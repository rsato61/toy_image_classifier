// cpu_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 17.0 595

`timescale 1 ps / 1 ps
module cpu_mm_interconnect_0 (
		input  wire        clk_0_clk_clk,                                        //                                      clk_0_clk.clk
		input  wire        sys_sdram_pll_0_sys_clk_clk,                          //                        sys_sdram_pll_0_sys_clk.clk
		input  wire        classification_pio_reset_reset_bridge_in_reset_reset, // classification_pio_reset_reset_bridge_in_reset.reset
		input  wire        cpu_nios_reset_reset_bridge_in_reset_reset,           //           cpu_nios_reset_reset_bridge_in_reset.reset
		input  wire        jtag_reset_reset_bridge_in_reset_reset,               //               jtag_reset_reset_bridge_in_reset.reset
		input  wire [17:0] cpu_nios_data_master_address,                         //                           cpu_nios_data_master.address
		output wire        cpu_nios_data_master_waitrequest,                     //                                               .waitrequest
		input  wire [3:0]  cpu_nios_data_master_byteenable,                      //                                               .byteenable
		input  wire        cpu_nios_data_master_read,                            //                                               .read
		output wire [31:0] cpu_nios_data_master_readdata,                        //                                               .readdata
		input  wire        cpu_nios_data_master_write,                           //                                               .write
		input  wire [31:0] cpu_nios_data_master_writedata,                       //                                               .writedata
		input  wire        cpu_nios_data_master_debugaccess,                     //                                               .debugaccess
		input  wire [17:0] cpu_nios_instruction_master_address,                  //                    cpu_nios_instruction_master.address
		output wire        cpu_nios_instruction_master_waitrequest,              //                                               .waitrequest
		input  wire        cpu_nios_instruction_master_read,                     //                                               .read
		output wire [31:0] cpu_nios_instruction_master_readdata,                 //                                               .readdata
		output wire [1:0]  classification_pio_s1_address,                        //                          classification_pio_s1.address
		input  wire [31:0] classification_pio_s1_readdata,                       //                                               .readdata
		output wire [8:0]  cpu_nios_debug_mem_slave_address,                     //                       cpu_nios_debug_mem_slave.address
		output wire        cpu_nios_debug_mem_slave_write,                       //                                               .write
		output wire        cpu_nios_debug_mem_slave_read,                        //                                               .read
		input  wire [31:0] cpu_nios_debug_mem_slave_readdata,                    //                                               .readdata
		output wire [31:0] cpu_nios_debug_mem_slave_writedata,                   //                                               .writedata
		output wire [3:0]  cpu_nios_debug_mem_slave_byteenable,                  //                                               .byteenable
		input  wire        cpu_nios_debug_mem_slave_waitrequest,                 //                                               .waitrequest
		output wire        cpu_nios_debug_mem_slave_debugaccess,                 //                                               .debugaccess
		output wire [1:0]  distance_pio_s1_address,                              //                                distance_pio_s1.address
		input  wire [31:0] distance_pio_s1_readdata,                             //                                               .readdata
		output wire [1:0]  done_read_pio_s1_address,                             //                               done_read_pio_s1.address
		output wire        done_read_pio_s1_write,                               //                                               .write
		input  wire [31:0] done_read_pio_s1_readdata,                            //                                               .readdata
		output wire [31:0] done_read_pio_s1_writedata,                           //                                               .writedata
		output wire        done_read_pio_s1_chipselect,                          //                                               .chipselect
		output wire [0:0]  jtag_avalon_jtag_slave_address,                       //                         jtag_avalon_jtag_slave.address
		output wire        jtag_avalon_jtag_slave_write,                         //                                               .write
		output wire        jtag_avalon_jtag_slave_read,                          //                                               .read
		input  wire [31:0] jtag_avalon_jtag_slave_readdata,                      //                                               .readdata
		output wire [31:0] jtag_avalon_jtag_slave_writedata,                     //                                               .writedata
		input  wire        jtag_avalon_jtag_slave_waitrequest,                   //                                               .waitrequest
		output wire        jtag_avalon_jtag_slave_chipselect,                    //                                               .chipselect
		output wire [13:0] onchip_memory_s1_address,                             //                               onchip_memory_s1.address
		output wire        onchip_memory_s1_write,                               //                                               .write
		input  wire [31:0] onchip_memory_s1_readdata,                            //                                               .readdata
		output wire [31:0] onchip_memory_s1_writedata,                           //                                               .writedata
		output wire [3:0]  onchip_memory_s1_byteenable,                          //                                               .byteenable
		output wire        onchip_memory_s1_chipselect,                          //                                               .chipselect
		output wire        onchip_memory_s1_clken,                               //                                               .clken
		output wire [1:0]  read_diff_pio_s1_address,                             //                               read_diff_pio_s1.address
		input  wire [31:0] read_diff_pio_s1_readdata,                            //                                               .readdata
		output wire [0:0]  sysid_qsys_0_control_slave_address,                   //                     sysid_qsys_0_control_slave.address
		input  wire [31:0] sysid_qsys_0_control_slave_readdata                   //                                               .readdata
	);

	wire         cpu_nios_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_nios_data_master_agent:av_waitrequest -> cpu_nios_data_master_translator:uav_waitrequest
	wire  [31:0] cpu_nios_data_master_translator_avalon_universal_master_0_readdata;             // cpu_nios_data_master_agent:av_readdata -> cpu_nios_data_master_translator:uav_readdata
	wire         cpu_nios_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_nios_data_master_translator:uav_debugaccess -> cpu_nios_data_master_agent:av_debugaccess
	wire  [17:0] cpu_nios_data_master_translator_avalon_universal_master_0_address;              // cpu_nios_data_master_translator:uav_address -> cpu_nios_data_master_agent:av_address
	wire         cpu_nios_data_master_translator_avalon_universal_master_0_read;                 // cpu_nios_data_master_translator:uav_read -> cpu_nios_data_master_agent:av_read
	wire   [3:0] cpu_nios_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_nios_data_master_translator:uav_byteenable -> cpu_nios_data_master_agent:av_byteenable
	wire         cpu_nios_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_nios_data_master_agent:av_readdatavalid -> cpu_nios_data_master_translator:uav_readdatavalid
	wire         cpu_nios_data_master_translator_avalon_universal_master_0_lock;                 // cpu_nios_data_master_translator:uav_lock -> cpu_nios_data_master_agent:av_lock
	wire         cpu_nios_data_master_translator_avalon_universal_master_0_write;                // cpu_nios_data_master_translator:uav_write -> cpu_nios_data_master_agent:av_write
	wire  [31:0] cpu_nios_data_master_translator_avalon_universal_master_0_writedata;            // cpu_nios_data_master_translator:uav_writedata -> cpu_nios_data_master_agent:av_writedata
	wire   [2:0] cpu_nios_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_nios_data_master_translator:uav_burstcount -> cpu_nios_data_master_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                              // rsp_mux:src_valid -> cpu_nios_data_master_agent:rp_valid
	wire  [93:0] rsp_mux_src_data;                                                               // rsp_mux:src_data -> cpu_nios_data_master_agent:rp_data
	wire         rsp_mux_src_ready;                                                              // cpu_nios_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [7:0] rsp_mux_src_channel;                                                            // rsp_mux:src_channel -> cpu_nios_data_master_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                      // rsp_mux:src_startofpacket -> cpu_nios_data_master_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                        // rsp_mux:src_endofpacket -> cpu_nios_data_master_agent:rp_endofpacket
	wire         cpu_nios_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_nios_instruction_master_agent:av_waitrequest -> cpu_nios_instruction_master_translator:uav_waitrequest
	wire  [31:0] cpu_nios_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_nios_instruction_master_agent:av_readdata -> cpu_nios_instruction_master_translator:uav_readdata
	wire         cpu_nios_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_nios_instruction_master_translator:uav_debugaccess -> cpu_nios_instruction_master_agent:av_debugaccess
	wire  [17:0] cpu_nios_instruction_master_translator_avalon_universal_master_0_address;       // cpu_nios_instruction_master_translator:uav_address -> cpu_nios_instruction_master_agent:av_address
	wire         cpu_nios_instruction_master_translator_avalon_universal_master_0_read;          // cpu_nios_instruction_master_translator:uav_read -> cpu_nios_instruction_master_agent:av_read
	wire   [3:0] cpu_nios_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_nios_instruction_master_translator:uav_byteenable -> cpu_nios_instruction_master_agent:av_byteenable
	wire         cpu_nios_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_nios_instruction_master_agent:av_readdatavalid -> cpu_nios_instruction_master_translator:uav_readdatavalid
	wire         cpu_nios_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_nios_instruction_master_translator:uav_lock -> cpu_nios_instruction_master_agent:av_lock
	wire         cpu_nios_instruction_master_translator_avalon_universal_master_0_write;         // cpu_nios_instruction_master_translator:uav_write -> cpu_nios_instruction_master_agent:av_write
	wire  [31:0] cpu_nios_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_nios_instruction_master_translator:uav_writedata -> cpu_nios_instruction_master_agent:av_writedata
	wire   [2:0] cpu_nios_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_nios_instruction_master_translator:uav_burstcount -> cpu_nios_instruction_master_agent:av_burstcount
	wire         rsp_mux_001_src_valid;                                                          // rsp_mux_001:src_valid -> cpu_nios_instruction_master_agent:rp_valid
	wire  [93:0] rsp_mux_001_src_data;                                                           // rsp_mux_001:src_data -> cpu_nios_instruction_master_agent:rp_data
	wire         rsp_mux_001_src_ready;                                                          // cpu_nios_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [7:0] rsp_mux_001_src_channel;                                                        // rsp_mux_001:src_channel -> cpu_nios_instruction_master_agent:rp_channel
	wire         rsp_mux_001_src_startofpacket;                                                  // rsp_mux_001:src_startofpacket -> cpu_nios_instruction_master_agent:rp_startofpacket
	wire         rsp_mux_001_src_endofpacket;                                                    // rsp_mux_001:src_endofpacket -> cpu_nios_instruction_master_agent:rp_endofpacket
	wire  [31:0] jtag_avalon_jtag_slave_agent_m0_readdata;                                       // jtag_avalon_jtag_slave_translator:uav_readdata -> jtag_avalon_jtag_slave_agent:m0_readdata
	wire         jtag_avalon_jtag_slave_agent_m0_waitrequest;                                    // jtag_avalon_jtag_slave_translator:uav_waitrequest -> jtag_avalon_jtag_slave_agent:m0_waitrequest
	wire         jtag_avalon_jtag_slave_agent_m0_debugaccess;                                    // jtag_avalon_jtag_slave_agent:m0_debugaccess -> jtag_avalon_jtag_slave_translator:uav_debugaccess
	wire  [17:0] jtag_avalon_jtag_slave_agent_m0_address;                                        // jtag_avalon_jtag_slave_agent:m0_address -> jtag_avalon_jtag_slave_translator:uav_address
	wire   [3:0] jtag_avalon_jtag_slave_agent_m0_byteenable;                                     // jtag_avalon_jtag_slave_agent:m0_byteenable -> jtag_avalon_jtag_slave_translator:uav_byteenable
	wire         jtag_avalon_jtag_slave_agent_m0_read;                                           // jtag_avalon_jtag_slave_agent:m0_read -> jtag_avalon_jtag_slave_translator:uav_read
	wire         jtag_avalon_jtag_slave_agent_m0_readdatavalid;                                  // jtag_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_avalon_jtag_slave_agent:m0_readdatavalid
	wire         jtag_avalon_jtag_slave_agent_m0_lock;                                           // jtag_avalon_jtag_slave_agent:m0_lock -> jtag_avalon_jtag_slave_translator:uav_lock
	wire  [31:0] jtag_avalon_jtag_slave_agent_m0_writedata;                                      // jtag_avalon_jtag_slave_agent:m0_writedata -> jtag_avalon_jtag_slave_translator:uav_writedata
	wire         jtag_avalon_jtag_slave_agent_m0_write;                                          // jtag_avalon_jtag_slave_agent:m0_write -> jtag_avalon_jtag_slave_translator:uav_write
	wire   [2:0] jtag_avalon_jtag_slave_agent_m0_burstcount;                                     // jtag_avalon_jtag_slave_agent:m0_burstcount -> jtag_avalon_jtag_slave_translator:uav_burstcount
	wire         jtag_avalon_jtag_slave_agent_rf_source_valid;                                   // jtag_avalon_jtag_slave_agent:rf_source_valid -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [94:0] jtag_avalon_jtag_slave_agent_rf_source_data;                                    // jtag_avalon_jtag_slave_agent:rf_source_data -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire         jtag_avalon_jtag_slave_agent_rf_source_ready;                                   // jtag_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_avalon_jtag_slave_agent:rf_source_ready
	wire         jtag_avalon_jtag_slave_agent_rf_source_startofpacket;                           // jtag_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire         jtag_avalon_jtag_slave_agent_rf_source_endofpacket;                             // jtag_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid;                                // jtag_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_avalon_jtag_slave_agent:rf_sink_valid
	wire  [94:0] jtag_avalon_jtag_slave_agent_rsp_fifo_out_data;                                 // jtag_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_avalon_jtag_slave_agent:rf_sink_data
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready;                                // jtag_avalon_jtag_slave_agent:rf_sink_ready -> jtag_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                        // jtag_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire         jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                          // jtag_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_src_valid;                                                              // cmd_mux:src_valid -> jtag_avalon_jtag_slave_agent:cp_valid
	wire  [93:0] cmd_mux_src_data;                                                               // cmd_mux:src_data -> jtag_avalon_jtag_slave_agent:cp_data
	wire         cmd_mux_src_ready;                                                              // jtag_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [7:0] cmd_mux_src_channel;                                                            // cmd_mux:src_channel -> jtag_avalon_jtag_slave_agent:cp_channel
	wire         cmd_mux_src_startofpacket;                                                      // cmd_mux:src_startofpacket -> jtag_avalon_jtag_slave_agent:cp_startofpacket
	wire         cmd_mux_src_endofpacket;                                                        // cmd_mux:src_endofpacket -> jtag_avalon_jtag_slave_agent:cp_endofpacket
	wire  [31:0] sysid_qsys_0_control_slave_agent_m0_readdata;                                   // sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	wire         sysid_qsys_0_control_slave_agent_m0_waitrequest;                                // sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	wire         sysid_qsys_0_control_slave_agent_m0_debugaccess;                                // sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	wire  [17:0] sysid_qsys_0_control_slave_agent_m0_address;                                    // sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	wire   [3:0] sysid_qsys_0_control_slave_agent_m0_byteenable;                                 // sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	wire         sysid_qsys_0_control_slave_agent_m0_read;                                       // sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	wire         sysid_qsys_0_control_slave_agent_m0_readdatavalid;                              // sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	wire         sysid_qsys_0_control_slave_agent_m0_lock;                                       // sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	wire  [31:0] sysid_qsys_0_control_slave_agent_m0_writedata;                                  // sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	wire         sysid_qsys_0_control_slave_agent_m0_write;                                      // sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	wire   [2:0] sysid_qsys_0_control_slave_agent_m0_burstcount;                                 // sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	wire         sysid_qsys_0_control_slave_agent_rf_source_valid;                               // sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	wire  [94:0] sysid_qsys_0_control_slave_agent_rf_source_data;                                // sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	wire         sysid_qsys_0_control_slave_agent_rf_source_ready;                               // sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	wire         sysid_qsys_0_control_slave_agent_rf_source_startofpacket;                       // sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rf_source_endofpacket;                         // sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid;                            // sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	wire  [94:0] sysid_qsys_0_control_slave_agent_rsp_fifo_out_data;                             // sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready;                            // sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket;                    // sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket;                      // sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_001_src_valid;                                                          // cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	wire  [93:0] cmd_mux_001_src_data;                                                           // cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	wire         cmd_mux_001_src_ready;                                                          // sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [7:0] cmd_mux_001_src_channel;                                                        // cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	wire         cmd_mux_001_src_startofpacket;                                                  // cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	wire         cmd_mux_001_src_endofpacket;                                                    // cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	wire  [31:0] cpu_nios_debug_mem_slave_agent_m0_readdata;                                     // cpu_nios_debug_mem_slave_translator:uav_readdata -> cpu_nios_debug_mem_slave_agent:m0_readdata
	wire         cpu_nios_debug_mem_slave_agent_m0_waitrequest;                                  // cpu_nios_debug_mem_slave_translator:uav_waitrequest -> cpu_nios_debug_mem_slave_agent:m0_waitrequest
	wire         cpu_nios_debug_mem_slave_agent_m0_debugaccess;                                  // cpu_nios_debug_mem_slave_agent:m0_debugaccess -> cpu_nios_debug_mem_slave_translator:uav_debugaccess
	wire  [17:0] cpu_nios_debug_mem_slave_agent_m0_address;                                      // cpu_nios_debug_mem_slave_agent:m0_address -> cpu_nios_debug_mem_slave_translator:uav_address
	wire   [3:0] cpu_nios_debug_mem_slave_agent_m0_byteenable;                                   // cpu_nios_debug_mem_slave_agent:m0_byteenable -> cpu_nios_debug_mem_slave_translator:uav_byteenable
	wire         cpu_nios_debug_mem_slave_agent_m0_read;                                         // cpu_nios_debug_mem_slave_agent:m0_read -> cpu_nios_debug_mem_slave_translator:uav_read
	wire         cpu_nios_debug_mem_slave_agent_m0_readdatavalid;                                // cpu_nios_debug_mem_slave_translator:uav_readdatavalid -> cpu_nios_debug_mem_slave_agent:m0_readdatavalid
	wire         cpu_nios_debug_mem_slave_agent_m0_lock;                                         // cpu_nios_debug_mem_slave_agent:m0_lock -> cpu_nios_debug_mem_slave_translator:uav_lock
	wire  [31:0] cpu_nios_debug_mem_slave_agent_m0_writedata;                                    // cpu_nios_debug_mem_slave_agent:m0_writedata -> cpu_nios_debug_mem_slave_translator:uav_writedata
	wire         cpu_nios_debug_mem_slave_agent_m0_write;                                        // cpu_nios_debug_mem_slave_agent:m0_write -> cpu_nios_debug_mem_slave_translator:uav_write
	wire   [2:0] cpu_nios_debug_mem_slave_agent_m0_burstcount;                                   // cpu_nios_debug_mem_slave_agent:m0_burstcount -> cpu_nios_debug_mem_slave_translator:uav_burstcount
	wire         cpu_nios_debug_mem_slave_agent_rf_source_valid;                                 // cpu_nios_debug_mem_slave_agent:rf_source_valid -> cpu_nios_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [94:0] cpu_nios_debug_mem_slave_agent_rf_source_data;                                  // cpu_nios_debug_mem_slave_agent:rf_source_data -> cpu_nios_debug_mem_slave_agent_rsp_fifo:in_data
	wire         cpu_nios_debug_mem_slave_agent_rf_source_ready;                                 // cpu_nios_debug_mem_slave_agent_rsp_fifo:in_ready -> cpu_nios_debug_mem_slave_agent:rf_source_ready
	wire         cpu_nios_debug_mem_slave_agent_rf_source_startofpacket;                         // cpu_nios_debug_mem_slave_agent:rf_source_startofpacket -> cpu_nios_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire         cpu_nios_debug_mem_slave_agent_rf_source_endofpacket;                           // cpu_nios_debug_mem_slave_agent:rf_source_endofpacket -> cpu_nios_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire         cpu_nios_debug_mem_slave_agent_rsp_fifo_out_valid;                              // cpu_nios_debug_mem_slave_agent_rsp_fifo:out_valid -> cpu_nios_debug_mem_slave_agent:rf_sink_valid
	wire  [94:0] cpu_nios_debug_mem_slave_agent_rsp_fifo_out_data;                               // cpu_nios_debug_mem_slave_agent_rsp_fifo:out_data -> cpu_nios_debug_mem_slave_agent:rf_sink_data
	wire         cpu_nios_debug_mem_slave_agent_rsp_fifo_out_ready;                              // cpu_nios_debug_mem_slave_agent:rf_sink_ready -> cpu_nios_debug_mem_slave_agent_rsp_fifo:out_ready
	wire         cpu_nios_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // cpu_nios_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> cpu_nios_debug_mem_slave_agent:rf_sink_startofpacket
	wire         cpu_nios_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // cpu_nios_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> cpu_nios_debug_mem_slave_agent:rf_sink_endofpacket
	wire         cmd_mux_002_src_valid;                                                          // cmd_mux_002:src_valid -> cpu_nios_debug_mem_slave_agent:cp_valid
	wire  [93:0] cmd_mux_002_src_data;                                                           // cmd_mux_002:src_data -> cpu_nios_debug_mem_slave_agent:cp_data
	wire         cmd_mux_002_src_ready;                                                          // cpu_nios_debug_mem_slave_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [7:0] cmd_mux_002_src_channel;                                                        // cmd_mux_002:src_channel -> cpu_nios_debug_mem_slave_agent:cp_channel
	wire         cmd_mux_002_src_startofpacket;                                                  // cmd_mux_002:src_startofpacket -> cpu_nios_debug_mem_slave_agent:cp_startofpacket
	wire         cmd_mux_002_src_endofpacket;                                                    // cmd_mux_002:src_endofpacket -> cpu_nios_debug_mem_slave_agent:cp_endofpacket
	wire  [31:0] onchip_memory_s1_agent_m0_readdata;                                             // onchip_memory_s1_translator:uav_readdata -> onchip_memory_s1_agent:m0_readdata
	wire         onchip_memory_s1_agent_m0_waitrequest;                                          // onchip_memory_s1_translator:uav_waitrequest -> onchip_memory_s1_agent:m0_waitrequest
	wire         onchip_memory_s1_agent_m0_debugaccess;                                          // onchip_memory_s1_agent:m0_debugaccess -> onchip_memory_s1_translator:uav_debugaccess
	wire  [17:0] onchip_memory_s1_agent_m0_address;                                              // onchip_memory_s1_agent:m0_address -> onchip_memory_s1_translator:uav_address
	wire   [3:0] onchip_memory_s1_agent_m0_byteenable;                                           // onchip_memory_s1_agent:m0_byteenable -> onchip_memory_s1_translator:uav_byteenable
	wire         onchip_memory_s1_agent_m0_read;                                                 // onchip_memory_s1_agent:m0_read -> onchip_memory_s1_translator:uav_read
	wire         onchip_memory_s1_agent_m0_readdatavalid;                                        // onchip_memory_s1_translator:uav_readdatavalid -> onchip_memory_s1_agent:m0_readdatavalid
	wire         onchip_memory_s1_agent_m0_lock;                                                 // onchip_memory_s1_agent:m0_lock -> onchip_memory_s1_translator:uav_lock
	wire  [31:0] onchip_memory_s1_agent_m0_writedata;                                            // onchip_memory_s1_agent:m0_writedata -> onchip_memory_s1_translator:uav_writedata
	wire         onchip_memory_s1_agent_m0_write;                                                // onchip_memory_s1_agent:m0_write -> onchip_memory_s1_translator:uav_write
	wire   [2:0] onchip_memory_s1_agent_m0_burstcount;                                           // onchip_memory_s1_agent:m0_burstcount -> onchip_memory_s1_translator:uav_burstcount
	wire         onchip_memory_s1_agent_rf_source_valid;                                         // onchip_memory_s1_agent:rf_source_valid -> onchip_memory_s1_agent_rsp_fifo:in_valid
	wire  [94:0] onchip_memory_s1_agent_rf_source_data;                                          // onchip_memory_s1_agent:rf_source_data -> onchip_memory_s1_agent_rsp_fifo:in_data
	wire         onchip_memory_s1_agent_rf_source_ready;                                         // onchip_memory_s1_agent_rsp_fifo:in_ready -> onchip_memory_s1_agent:rf_source_ready
	wire         onchip_memory_s1_agent_rf_source_startofpacket;                                 // onchip_memory_s1_agent:rf_source_startofpacket -> onchip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire         onchip_memory_s1_agent_rf_source_endofpacket;                                   // onchip_memory_s1_agent:rf_source_endofpacket -> onchip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_valid;                                      // onchip_memory_s1_agent_rsp_fifo:out_valid -> onchip_memory_s1_agent:rf_sink_valid
	wire  [94:0] onchip_memory_s1_agent_rsp_fifo_out_data;                                       // onchip_memory_s1_agent_rsp_fifo:out_data -> onchip_memory_s1_agent:rf_sink_data
	wire         onchip_memory_s1_agent_rsp_fifo_out_ready;                                      // onchip_memory_s1_agent:rf_sink_ready -> onchip_memory_s1_agent_rsp_fifo:out_ready
	wire         onchip_memory_s1_agent_rsp_fifo_out_startofpacket;                              // onchip_memory_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory_s1_agent:rf_sink_startofpacket
	wire         onchip_memory_s1_agent_rsp_fifo_out_endofpacket;                                // onchip_memory_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory_s1_agent:rf_sink_endofpacket
	wire         cmd_mux_003_src_valid;                                                          // cmd_mux_003:src_valid -> onchip_memory_s1_agent:cp_valid
	wire  [93:0] cmd_mux_003_src_data;                                                           // cmd_mux_003:src_data -> onchip_memory_s1_agent:cp_data
	wire         cmd_mux_003_src_ready;                                                          // onchip_memory_s1_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [7:0] cmd_mux_003_src_channel;                                                        // cmd_mux_003:src_channel -> onchip_memory_s1_agent:cp_channel
	wire         cmd_mux_003_src_startofpacket;                                                  // cmd_mux_003:src_startofpacket -> onchip_memory_s1_agent:cp_startofpacket
	wire         cmd_mux_003_src_endofpacket;                                                    // cmd_mux_003:src_endofpacket -> onchip_memory_s1_agent:cp_endofpacket
	wire  [31:0] classification_pio_s1_agent_m0_readdata;                                        // classification_pio_s1_translator:uav_readdata -> classification_pio_s1_agent:m0_readdata
	wire         classification_pio_s1_agent_m0_waitrequest;                                     // classification_pio_s1_translator:uav_waitrequest -> classification_pio_s1_agent:m0_waitrequest
	wire         classification_pio_s1_agent_m0_debugaccess;                                     // classification_pio_s1_agent:m0_debugaccess -> classification_pio_s1_translator:uav_debugaccess
	wire  [17:0] classification_pio_s1_agent_m0_address;                                         // classification_pio_s1_agent:m0_address -> classification_pio_s1_translator:uav_address
	wire   [3:0] classification_pio_s1_agent_m0_byteenable;                                      // classification_pio_s1_agent:m0_byteenable -> classification_pio_s1_translator:uav_byteenable
	wire         classification_pio_s1_agent_m0_read;                                            // classification_pio_s1_agent:m0_read -> classification_pio_s1_translator:uav_read
	wire         classification_pio_s1_agent_m0_readdatavalid;                                   // classification_pio_s1_translator:uav_readdatavalid -> classification_pio_s1_agent:m0_readdatavalid
	wire         classification_pio_s1_agent_m0_lock;                                            // classification_pio_s1_agent:m0_lock -> classification_pio_s1_translator:uav_lock
	wire  [31:0] classification_pio_s1_agent_m0_writedata;                                       // classification_pio_s1_agent:m0_writedata -> classification_pio_s1_translator:uav_writedata
	wire         classification_pio_s1_agent_m0_write;                                           // classification_pio_s1_agent:m0_write -> classification_pio_s1_translator:uav_write
	wire   [2:0] classification_pio_s1_agent_m0_burstcount;                                      // classification_pio_s1_agent:m0_burstcount -> classification_pio_s1_translator:uav_burstcount
	wire         classification_pio_s1_agent_rf_source_valid;                                    // classification_pio_s1_agent:rf_source_valid -> classification_pio_s1_agent_rsp_fifo:in_valid
	wire  [94:0] classification_pio_s1_agent_rf_source_data;                                     // classification_pio_s1_agent:rf_source_data -> classification_pio_s1_agent_rsp_fifo:in_data
	wire         classification_pio_s1_agent_rf_source_ready;                                    // classification_pio_s1_agent_rsp_fifo:in_ready -> classification_pio_s1_agent:rf_source_ready
	wire         classification_pio_s1_agent_rf_source_startofpacket;                            // classification_pio_s1_agent:rf_source_startofpacket -> classification_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         classification_pio_s1_agent_rf_source_endofpacket;                              // classification_pio_s1_agent:rf_source_endofpacket -> classification_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         classification_pio_s1_agent_rsp_fifo_out_valid;                                 // classification_pio_s1_agent_rsp_fifo:out_valid -> classification_pio_s1_agent:rf_sink_valid
	wire  [94:0] classification_pio_s1_agent_rsp_fifo_out_data;                                  // classification_pio_s1_agent_rsp_fifo:out_data -> classification_pio_s1_agent:rf_sink_data
	wire         classification_pio_s1_agent_rsp_fifo_out_ready;                                 // classification_pio_s1_agent:rf_sink_ready -> classification_pio_s1_agent_rsp_fifo:out_ready
	wire         classification_pio_s1_agent_rsp_fifo_out_startofpacket;                         // classification_pio_s1_agent_rsp_fifo:out_startofpacket -> classification_pio_s1_agent:rf_sink_startofpacket
	wire         classification_pio_s1_agent_rsp_fifo_out_endofpacket;                           // classification_pio_s1_agent_rsp_fifo:out_endofpacket -> classification_pio_s1_agent:rf_sink_endofpacket
	wire         classification_pio_s1_agent_rdata_fifo_src_valid;                               // classification_pio_s1_agent:rdata_fifo_src_valid -> classification_pio_s1_agent_rdata_fifo:in_valid
	wire  [33:0] classification_pio_s1_agent_rdata_fifo_src_data;                                // classification_pio_s1_agent:rdata_fifo_src_data -> classification_pio_s1_agent_rdata_fifo:in_data
	wire         classification_pio_s1_agent_rdata_fifo_src_ready;                               // classification_pio_s1_agent_rdata_fifo:in_ready -> classification_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_valid;                                                          // cmd_mux_004:src_valid -> classification_pio_s1_agent:cp_valid
	wire  [93:0] cmd_mux_004_src_data;                                                           // cmd_mux_004:src_data -> classification_pio_s1_agent:cp_data
	wire         cmd_mux_004_src_ready;                                                          // classification_pio_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [7:0] cmd_mux_004_src_channel;                                                        // cmd_mux_004:src_channel -> classification_pio_s1_agent:cp_channel
	wire         cmd_mux_004_src_startofpacket;                                                  // cmd_mux_004:src_startofpacket -> classification_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_004_src_endofpacket;                                                    // cmd_mux_004:src_endofpacket -> classification_pio_s1_agent:cp_endofpacket
	wire  [31:0] done_read_pio_s1_agent_m0_readdata;                                             // done_read_pio_s1_translator:uav_readdata -> done_read_pio_s1_agent:m0_readdata
	wire         done_read_pio_s1_agent_m0_waitrequest;                                          // done_read_pio_s1_translator:uav_waitrequest -> done_read_pio_s1_agent:m0_waitrequest
	wire         done_read_pio_s1_agent_m0_debugaccess;                                          // done_read_pio_s1_agent:m0_debugaccess -> done_read_pio_s1_translator:uav_debugaccess
	wire  [17:0] done_read_pio_s1_agent_m0_address;                                              // done_read_pio_s1_agent:m0_address -> done_read_pio_s1_translator:uav_address
	wire   [3:0] done_read_pio_s1_agent_m0_byteenable;                                           // done_read_pio_s1_agent:m0_byteenable -> done_read_pio_s1_translator:uav_byteenable
	wire         done_read_pio_s1_agent_m0_read;                                                 // done_read_pio_s1_agent:m0_read -> done_read_pio_s1_translator:uav_read
	wire         done_read_pio_s1_agent_m0_readdatavalid;                                        // done_read_pio_s1_translator:uav_readdatavalid -> done_read_pio_s1_agent:m0_readdatavalid
	wire         done_read_pio_s1_agent_m0_lock;                                                 // done_read_pio_s1_agent:m0_lock -> done_read_pio_s1_translator:uav_lock
	wire  [31:0] done_read_pio_s1_agent_m0_writedata;                                            // done_read_pio_s1_agent:m0_writedata -> done_read_pio_s1_translator:uav_writedata
	wire         done_read_pio_s1_agent_m0_write;                                                // done_read_pio_s1_agent:m0_write -> done_read_pio_s1_translator:uav_write
	wire   [2:0] done_read_pio_s1_agent_m0_burstcount;                                           // done_read_pio_s1_agent:m0_burstcount -> done_read_pio_s1_translator:uav_burstcount
	wire         done_read_pio_s1_agent_rf_source_valid;                                         // done_read_pio_s1_agent:rf_source_valid -> done_read_pio_s1_agent_rsp_fifo:in_valid
	wire  [94:0] done_read_pio_s1_agent_rf_source_data;                                          // done_read_pio_s1_agent:rf_source_data -> done_read_pio_s1_agent_rsp_fifo:in_data
	wire         done_read_pio_s1_agent_rf_source_ready;                                         // done_read_pio_s1_agent_rsp_fifo:in_ready -> done_read_pio_s1_agent:rf_source_ready
	wire         done_read_pio_s1_agent_rf_source_startofpacket;                                 // done_read_pio_s1_agent:rf_source_startofpacket -> done_read_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         done_read_pio_s1_agent_rf_source_endofpacket;                                   // done_read_pio_s1_agent:rf_source_endofpacket -> done_read_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         done_read_pio_s1_agent_rsp_fifo_out_valid;                                      // done_read_pio_s1_agent_rsp_fifo:out_valid -> done_read_pio_s1_agent:rf_sink_valid
	wire  [94:0] done_read_pio_s1_agent_rsp_fifo_out_data;                                       // done_read_pio_s1_agent_rsp_fifo:out_data -> done_read_pio_s1_agent:rf_sink_data
	wire         done_read_pio_s1_agent_rsp_fifo_out_ready;                                      // done_read_pio_s1_agent:rf_sink_ready -> done_read_pio_s1_agent_rsp_fifo:out_ready
	wire         done_read_pio_s1_agent_rsp_fifo_out_startofpacket;                              // done_read_pio_s1_agent_rsp_fifo:out_startofpacket -> done_read_pio_s1_agent:rf_sink_startofpacket
	wire         done_read_pio_s1_agent_rsp_fifo_out_endofpacket;                                // done_read_pio_s1_agent_rsp_fifo:out_endofpacket -> done_read_pio_s1_agent:rf_sink_endofpacket
	wire         done_read_pio_s1_agent_rdata_fifo_src_valid;                                    // done_read_pio_s1_agent:rdata_fifo_src_valid -> done_read_pio_s1_agent_rdata_fifo:in_valid
	wire  [33:0] done_read_pio_s1_agent_rdata_fifo_src_data;                                     // done_read_pio_s1_agent:rdata_fifo_src_data -> done_read_pio_s1_agent_rdata_fifo:in_data
	wire         done_read_pio_s1_agent_rdata_fifo_src_ready;                                    // done_read_pio_s1_agent_rdata_fifo:in_ready -> done_read_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_valid;                                                          // cmd_mux_005:src_valid -> done_read_pio_s1_agent:cp_valid
	wire  [93:0] cmd_mux_005_src_data;                                                           // cmd_mux_005:src_data -> done_read_pio_s1_agent:cp_data
	wire         cmd_mux_005_src_ready;                                                          // done_read_pio_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [7:0] cmd_mux_005_src_channel;                                                        // cmd_mux_005:src_channel -> done_read_pio_s1_agent:cp_channel
	wire         cmd_mux_005_src_startofpacket;                                                  // cmd_mux_005:src_startofpacket -> done_read_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_005_src_endofpacket;                                                    // cmd_mux_005:src_endofpacket -> done_read_pio_s1_agent:cp_endofpacket
	wire  [31:0] read_diff_pio_s1_agent_m0_readdata;                                             // read_diff_pio_s1_translator:uav_readdata -> read_diff_pio_s1_agent:m0_readdata
	wire         read_diff_pio_s1_agent_m0_waitrequest;                                          // read_diff_pio_s1_translator:uav_waitrequest -> read_diff_pio_s1_agent:m0_waitrequest
	wire         read_diff_pio_s1_agent_m0_debugaccess;                                          // read_diff_pio_s1_agent:m0_debugaccess -> read_diff_pio_s1_translator:uav_debugaccess
	wire  [17:0] read_diff_pio_s1_agent_m0_address;                                              // read_diff_pio_s1_agent:m0_address -> read_diff_pio_s1_translator:uav_address
	wire   [3:0] read_diff_pio_s1_agent_m0_byteenable;                                           // read_diff_pio_s1_agent:m0_byteenable -> read_diff_pio_s1_translator:uav_byteenable
	wire         read_diff_pio_s1_agent_m0_read;                                                 // read_diff_pio_s1_agent:m0_read -> read_diff_pio_s1_translator:uav_read
	wire         read_diff_pio_s1_agent_m0_readdatavalid;                                        // read_diff_pio_s1_translator:uav_readdatavalid -> read_diff_pio_s1_agent:m0_readdatavalid
	wire         read_diff_pio_s1_agent_m0_lock;                                                 // read_diff_pio_s1_agent:m0_lock -> read_diff_pio_s1_translator:uav_lock
	wire  [31:0] read_diff_pio_s1_agent_m0_writedata;                                            // read_diff_pio_s1_agent:m0_writedata -> read_diff_pio_s1_translator:uav_writedata
	wire         read_diff_pio_s1_agent_m0_write;                                                // read_diff_pio_s1_agent:m0_write -> read_diff_pio_s1_translator:uav_write
	wire   [2:0] read_diff_pio_s1_agent_m0_burstcount;                                           // read_diff_pio_s1_agent:m0_burstcount -> read_diff_pio_s1_translator:uav_burstcount
	wire         read_diff_pio_s1_agent_rf_source_valid;                                         // read_diff_pio_s1_agent:rf_source_valid -> read_diff_pio_s1_agent_rsp_fifo:in_valid
	wire  [94:0] read_diff_pio_s1_agent_rf_source_data;                                          // read_diff_pio_s1_agent:rf_source_data -> read_diff_pio_s1_agent_rsp_fifo:in_data
	wire         read_diff_pio_s1_agent_rf_source_ready;                                         // read_diff_pio_s1_agent_rsp_fifo:in_ready -> read_diff_pio_s1_agent:rf_source_ready
	wire         read_diff_pio_s1_agent_rf_source_startofpacket;                                 // read_diff_pio_s1_agent:rf_source_startofpacket -> read_diff_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         read_diff_pio_s1_agent_rf_source_endofpacket;                                   // read_diff_pio_s1_agent:rf_source_endofpacket -> read_diff_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         read_diff_pio_s1_agent_rsp_fifo_out_valid;                                      // read_diff_pio_s1_agent_rsp_fifo:out_valid -> read_diff_pio_s1_agent:rf_sink_valid
	wire  [94:0] read_diff_pio_s1_agent_rsp_fifo_out_data;                                       // read_diff_pio_s1_agent_rsp_fifo:out_data -> read_diff_pio_s1_agent:rf_sink_data
	wire         read_diff_pio_s1_agent_rsp_fifo_out_ready;                                      // read_diff_pio_s1_agent:rf_sink_ready -> read_diff_pio_s1_agent_rsp_fifo:out_ready
	wire         read_diff_pio_s1_agent_rsp_fifo_out_startofpacket;                              // read_diff_pio_s1_agent_rsp_fifo:out_startofpacket -> read_diff_pio_s1_agent:rf_sink_startofpacket
	wire         read_diff_pio_s1_agent_rsp_fifo_out_endofpacket;                                // read_diff_pio_s1_agent_rsp_fifo:out_endofpacket -> read_diff_pio_s1_agent:rf_sink_endofpacket
	wire         read_diff_pio_s1_agent_rdata_fifo_src_valid;                                    // read_diff_pio_s1_agent:rdata_fifo_src_valid -> read_diff_pio_s1_agent_rdata_fifo:in_valid
	wire  [33:0] read_diff_pio_s1_agent_rdata_fifo_src_data;                                     // read_diff_pio_s1_agent:rdata_fifo_src_data -> read_diff_pio_s1_agent_rdata_fifo:in_data
	wire         read_diff_pio_s1_agent_rdata_fifo_src_ready;                                    // read_diff_pio_s1_agent_rdata_fifo:in_ready -> read_diff_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_valid;                                                          // cmd_mux_006:src_valid -> read_diff_pio_s1_agent:cp_valid
	wire  [93:0] cmd_mux_006_src_data;                                                           // cmd_mux_006:src_data -> read_diff_pio_s1_agent:cp_data
	wire         cmd_mux_006_src_ready;                                                          // read_diff_pio_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [7:0] cmd_mux_006_src_channel;                                                        // cmd_mux_006:src_channel -> read_diff_pio_s1_agent:cp_channel
	wire         cmd_mux_006_src_startofpacket;                                                  // cmd_mux_006:src_startofpacket -> read_diff_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_006_src_endofpacket;                                                    // cmd_mux_006:src_endofpacket -> read_diff_pio_s1_agent:cp_endofpacket
	wire  [31:0] distance_pio_s1_agent_m0_readdata;                                              // distance_pio_s1_translator:uav_readdata -> distance_pio_s1_agent:m0_readdata
	wire         distance_pio_s1_agent_m0_waitrequest;                                           // distance_pio_s1_translator:uav_waitrequest -> distance_pio_s1_agent:m0_waitrequest
	wire         distance_pio_s1_agent_m0_debugaccess;                                           // distance_pio_s1_agent:m0_debugaccess -> distance_pio_s1_translator:uav_debugaccess
	wire  [17:0] distance_pio_s1_agent_m0_address;                                               // distance_pio_s1_agent:m0_address -> distance_pio_s1_translator:uav_address
	wire   [3:0] distance_pio_s1_agent_m0_byteenable;                                            // distance_pio_s1_agent:m0_byteenable -> distance_pio_s1_translator:uav_byteenable
	wire         distance_pio_s1_agent_m0_read;                                                  // distance_pio_s1_agent:m0_read -> distance_pio_s1_translator:uav_read
	wire         distance_pio_s1_agent_m0_readdatavalid;                                         // distance_pio_s1_translator:uav_readdatavalid -> distance_pio_s1_agent:m0_readdatavalid
	wire         distance_pio_s1_agent_m0_lock;                                                  // distance_pio_s1_agent:m0_lock -> distance_pio_s1_translator:uav_lock
	wire  [31:0] distance_pio_s1_agent_m0_writedata;                                             // distance_pio_s1_agent:m0_writedata -> distance_pio_s1_translator:uav_writedata
	wire         distance_pio_s1_agent_m0_write;                                                 // distance_pio_s1_agent:m0_write -> distance_pio_s1_translator:uav_write
	wire   [2:0] distance_pio_s1_agent_m0_burstcount;                                            // distance_pio_s1_agent:m0_burstcount -> distance_pio_s1_translator:uav_burstcount
	wire         distance_pio_s1_agent_rf_source_valid;                                          // distance_pio_s1_agent:rf_source_valid -> distance_pio_s1_agent_rsp_fifo:in_valid
	wire  [94:0] distance_pio_s1_agent_rf_source_data;                                           // distance_pio_s1_agent:rf_source_data -> distance_pio_s1_agent_rsp_fifo:in_data
	wire         distance_pio_s1_agent_rf_source_ready;                                          // distance_pio_s1_agent_rsp_fifo:in_ready -> distance_pio_s1_agent:rf_source_ready
	wire         distance_pio_s1_agent_rf_source_startofpacket;                                  // distance_pio_s1_agent:rf_source_startofpacket -> distance_pio_s1_agent_rsp_fifo:in_startofpacket
	wire         distance_pio_s1_agent_rf_source_endofpacket;                                    // distance_pio_s1_agent:rf_source_endofpacket -> distance_pio_s1_agent_rsp_fifo:in_endofpacket
	wire         distance_pio_s1_agent_rsp_fifo_out_valid;                                       // distance_pio_s1_agent_rsp_fifo:out_valid -> distance_pio_s1_agent:rf_sink_valid
	wire  [94:0] distance_pio_s1_agent_rsp_fifo_out_data;                                        // distance_pio_s1_agent_rsp_fifo:out_data -> distance_pio_s1_agent:rf_sink_data
	wire         distance_pio_s1_agent_rsp_fifo_out_ready;                                       // distance_pio_s1_agent:rf_sink_ready -> distance_pio_s1_agent_rsp_fifo:out_ready
	wire         distance_pio_s1_agent_rsp_fifo_out_startofpacket;                               // distance_pio_s1_agent_rsp_fifo:out_startofpacket -> distance_pio_s1_agent:rf_sink_startofpacket
	wire         distance_pio_s1_agent_rsp_fifo_out_endofpacket;                                 // distance_pio_s1_agent_rsp_fifo:out_endofpacket -> distance_pio_s1_agent:rf_sink_endofpacket
	wire         distance_pio_s1_agent_rdata_fifo_src_valid;                                     // distance_pio_s1_agent:rdata_fifo_src_valid -> distance_pio_s1_agent_rdata_fifo:in_valid
	wire  [33:0] distance_pio_s1_agent_rdata_fifo_src_data;                                      // distance_pio_s1_agent:rdata_fifo_src_data -> distance_pio_s1_agent_rdata_fifo:in_data
	wire         distance_pio_s1_agent_rdata_fifo_src_ready;                                     // distance_pio_s1_agent_rdata_fifo:in_ready -> distance_pio_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_valid;                                                          // cmd_mux_007:src_valid -> distance_pio_s1_agent:cp_valid
	wire  [93:0] cmd_mux_007_src_data;                                                           // cmd_mux_007:src_data -> distance_pio_s1_agent:cp_data
	wire         cmd_mux_007_src_ready;                                                          // distance_pio_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [7:0] cmd_mux_007_src_channel;                                                        // cmd_mux_007:src_channel -> distance_pio_s1_agent:cp_channel
	wire         cmd_mux_007_src_startofpacket;                                                  // cmd_mux_007:src_startofpacket -> distance_pio_s1_agent:cp_startofpacket
	wire         cmd_mux_007_src_endofpacket;                                                    // cmd_mux_007:src_endofpacket -> distance_pio_s1_agent:cp_endofpacket
	wire         cpu_nios_data_master_agent_cp_valid;                                            // cpu_nios_data_master_agent:cp_valid -> router:sink_valid
	wire  [93:0] cpu_nios_data_master_agent_cp_data;                                             // cpu_nios_data_master_agent:cp_data -> router:sink_data
	wire         cpu_nios_data_master_agent_cp_ready;                                            // router:sink_ready -> cpu_nios_data_master_agent:cp_ready
	wire         cpu_nios_data_master_agent_cp_startofpacket;                                    // cpu_nios_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire         cpu_nios_data_master_agent_cp_endofpacket;                                      // cpu_nios_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [93:0] router_src_data;                                                                // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                               // cmd_demux:sink_ready -> router:src_ready
	wire   [7:0] router_src_channel;                                                             // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         cpu_nios_instruction_master_agent_cp_valid;                                     // cpu_nios_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [93:0] cpu_nios_instruction_master_agent_cp_data;                                      // cpu_nios_instruction_master_agent:cp_data -> router_001:sink_data
	wire         cpu_nios_instruction_master_agent_cp_ready;                                     // router_001:sink_ready -> cpu_nios_instruction_master_agent:cp_ready
	wire         cpu_nios_instruction_master_agent_cp_startofpacket;                             // cpu_nios_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire         cpu_nios_instruction_master_agent_cp_endofpacket;                               // cpu_nios_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         router_001_src_valid;                                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [93:0] router_001_src_data;                                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire         router_001_src_ready;                                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [7:0] router_001_src_channel;                                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire         router_001_src_startofpacket;                                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire         router_001_src_endofpacket;                                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         jtag_avalon_jtag_slave_agent_rp_valid;                                          // jtag_avalon_jtag_slave_agent:rp_valid -> router_002:sink_valid
	wire  [93:0] jtag_avalon_jtag_slave_agent_rp_data;                                           // jtag_avalon_jtag_slave_agent:rp_data -> router_002:sink_data
	wire         jtag_avalon_jtag_slave_agent_rp_ready;                                          // router_002:sink_ready -> jtag_avalon_jtag_slave_agent:rp_ready
	wire         jtag_avalon_jtag_slave_agent_rp_startofpacket;                                  // jtag_avalon_jtag_slave_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire         jtag_avalon_jtag_slave_agent_rp_endofpacket;                                    // jtag_avalon_jtag_slave_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         router_002_src_valid;                                                           // router_002:src_valid -> rsp_demux:sink_valid
	wire  [93:0] router_002_src_data;                                                            // router_002:src_data -> rsp_demux:sink_data
	wire         router_002_src_ready;                                                           // rsp_demux:sink_ready -> router_002:src_ready
	wire   [7:0] router_002_src_channel;                                                         // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_startofpacket;                                                   // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_002_src_endofpacket;                                                     // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         sysid_qsys_0_control_slave_agent_rp_valid;                                      // sysid_qsys_0_control_slave_agent:rp_valid -> router_003:sink_valid
	wire  [93:0] sysid_qsys_0_control_slave_agent_rp_data;                                       // sysid_qsys_0_control_slave_agent:rp_data -> router_003:sink_data
	wire         sysid_qsys_0_control_slave_agent_rp_ready;                                      // router_003:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	wire         sysid_qsys_0_control_slave_agent_rp_startofpacket;                              // sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire         sysid_qsys_0_control_slave_agent_rp_endofpacket;                                // sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         router_003_src_valid;                                                           // router_003:src_valid -> rsp_demux_001:sink_valid
	wire  [93:0] router_003_src_data;                                                            // router_003:src_data -> rsp_demux_001:sink_data
	wire         router_003_src_ready;                                                           // rsp_demux_001:sink_ready -> router_003:src_ready
	wire   [7:0] router_003_src_channel;                                                         // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_startofpacket;                                                   // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire         router_003_src_endofpacket;                                                     // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         cpu_nios_debug_mem_slave_agent_rp_valid;                                        // cpu_nios_debug_mem_slave_agent:rp_valid -> router_004:sink_valid
	wire  [93:0] cpu_nios_debug_mem_slave_agent_rp_data;                                         // cpu_nios_debug_mem_slave_agent:rp_data -> router_004:sink_data
	wire         cpu_nios_debug_mem_slave_agent_rp_ready;                                        // router_004:sink_ready -> cpu_nios_debug_mem_slave_agent:rp_ready
	wire         cpu_nios_debug_mem_slave_agent_rp_startofpacket;                                // cpu_nios_debug_mem_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire         cpu_nios_debug_mem_slave_agent_rp_endofpacket;                                  // cpu_nios_debug_mem_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         router_004_src_valid;                                                           // router_004:src_valid -> rsp_demux_002:sink_valid
	wire  [93:0] router_004_src_data;                                                            // router_004:src_data -> rsp_demux_002:sink_data
	wire         router_004_src_ready;                                                           // rsp_demux_002:sink_ready -> router_004:src_ready
	wire   [7:0] router_004_src_channel;                                                         // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_startofpacket;                                                   // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire         router_004_src_endofpacket;                                                     // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         onchip_memory_s1_agent_rp_valid;                                                // onchip_memory_s1_agent:rp_valid -> router_005:sink_valid
	wire  [93:0] onchip_memory_s1_agent_rp_data;                                                 // onchip_memory_s1_agent:rp_data -> router_005:sink_data
	wire         onchip_memory_s1_agent_rp_ready;                                                // router_005:sink_ready -> onchip_memory_s1_agent:rp_ready
	wire         onchip_memory_s1_agent_rp_startofpacket;                                        // onchip_memory_s1_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire         onchip_memory_s1_agent_rp_endofpacket;                                          // onchip_memory_s1_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         router_005_src_valid;                                                           // router_005:src_valid -> rsp_demux_003:sink_valid
	wire  [93:0] router_005_src_data;                                                            // router_005:src_data -> rsp_demux_003:sink_data
	wire         router_005_src_ready;                                                           // rsp_demux_003:sink_ready -> router_005:src_ready
	wire   [7:0] router_005_src_channel;                                                         // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_startofpacket;                                                   // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire         router_005_src_endofpacket;                                                     // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         classification_pio_s1_agent_rp_valid;                                           // classification_pio_s1_agent:rp_valid -> router_006:sink_valid
	wire  [93:0] classification_pio_s1_agent_rp_data;                                            // classification_pio_s1_agent:rp_data -> router_006:sink_data
	wire         classification_pio_s1_agent_rp_ready;                                           // router_006:sink_ready -> classification_pio_s1_agent:rp_ready
	wire         classification_pio_s1_agent_rp_startofpacket;                                   // classification_pio_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire         classification_pio_s1_agent_rp_endofpacket;                                     // classification_pio_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         router_006_src_valid;                                                           // router_006:src_valid -> rsp_demux_004:sink_valid
	wire  [93:0] router_006_src_data;                                                            // router_006:src_data -> rsp_demux_004:sink_data
	wire         router_006_src_ready;                                                           // rsp_demux_004:sink_ready -> router_006:src_ready
	wire   [7:0] router_006_src_channel;                                                         // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_startofpacket;                                                   // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire         router_006_src_endofpacket;                                                     // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         done_read_pio_s1_agent_rp_valid;                                                // done_read_pio_s1_agent:rp_valid -> router_007:sink_valid
	wire  [93:0] done_read_pio_s1_agent_rp_data;                                                 // done_read_pio_s1_agent:rp_data -> router_007:sink_data
	wire         done_read_pio_s1_agent_rp_ready;                                                // router_007:sink_ready -> done_read_pio_s1_agent:rp_ready
	wire         done_read_pio_s1_agent_rp_startofpacket;                                        // done_read_pio_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire         done_read_pio_s1_agent_rp_endofpacket;                                          // done_read_pio_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         router_007_src_valid;                                                           // router_007:src_valid -> rsp_demux_005:sink_valid
	wire  [93:0] router_007_src_data;                                                            // router_007:src_data -> rsp_demux_005:sink_data
	wire         router_007_src_ready;                                                           // rsp_demux_005:sink_ready -> router_007:src_ready
	wire   [7:0] router_007_src_channel;                                                         // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_startofpacket;                                                   // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire         router_007_src_endofpacket;                                                     // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         read_diff_pio_s1_agent_rp_valid;                                                // read_diff_pio_s1_agent:rp_valid -> router_008:sink_valid
	wire  [93:0] read_diff_pio_s1_agent_rp_data;                                                 // read_diff_pio_s1_agent:rp_data -> router_008:sink_data
	wire         read_diff_pio_s1_agent_rp_ready;                                                // router_008:sink_ready -> read_diff_pio_s1_agent:rp_ready
	wire         read_diff_pio_s1_agent_rp_startofpacket;                                        // read_diff_pio_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire         read_diff_pio_s1_agent_rp_endofpacket;                                          // read_diff_pio_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         router_008_src_valid;                                                           // router_008:src_valid -> rsp_demux_006:sink_valid
	wire  [93:0] router_008_src_data;                                                            // router_008:src_data -> rsp_demux_006:sink_data
	wire         router_008_src_ready;                                                           // rsp_demux_006:sink_ready -> router_008:src_ready
	wire   [7:0] router_008_src_channel;                                                         // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_startofpacket;                                                   // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire         router_008_src_endofpacket;                                                     // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         distance_pio_s1_agent_rp_valid;                                                 // distance_pio_s1_agent:rp_valid -> router_009:sink_valid
	wire  [93:0] distance_pio_s1_agent_rp_data;                                                  // distance_pio_s1_agent:rp_data -> router_009:sink_data
	wire         distance_pio_s1_agent_rp_ready;                                                 // router_009:sink_ready -> distance_pio_s1_agent:rp_ready
	wire         distance_pio_s1_agent_rp_startofpacket;                                         // distance_pio_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire         distance_pio_s1_agent_rp_endofpacket;                                           // distance_pio_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         router_009_src_valid;                                                           // router_009:src_valid -> rsp_demux_007:sink_valid
	wire  [93:0] router_009_src_data;                                                            // router_009:src_data -> rsp_demux_007:sink_data
	wire         router_009_src_ready;                                                           // rsp_demux_007:sink_ready -> router_009:src_ready
	wire   [7:0] router_009_src_channel;                                                         // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_startofpacket;                                                   // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire         router_009_src_endofpacket;                                                     // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                           // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [93:0] cmd_demux_src0_data;                                                            // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire         cmd_demux_src0_ready;                                                           // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [7:0] cmd_demux_src0_channel;                                                         // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_startofpacket;                                                   // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                     // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [93:0] cmd_demux_src1_data;                                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire         cmd_demux_src1_ready;                                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [7:0] cmd_demux_src1_channel;                                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_startofpacket;                                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire         cmd_demux_src1_endofpacket;                                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src2_valid;                                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [93:0] cmd_demux_src2_data;                                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire         cmd_demux_src2_ready;                                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [7:0] cmd_demux_src2_channel;                                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_src2_startofpacket;                                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire         cmd_demux_src2_endofpacket;                                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_src3_valid;                                                           // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [93:0] cmd_demux_src3_data;                                                            // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire         cmd_demux_src3_ready;                                                           // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [7:0] cmd_demux_src3_channel;                                                         // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_src3_startofpacket;                                                   // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire         cmd_demux_src3_endofpacket;                                                     // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_001_src0_valid;                                                       // cmd_demux_001:src0_valid -> cmd_mux_002:sink1_valid
	wire  [93:0] cmd_demux_001_src0_data;                                                        // cmd_demux_001:src0_data -> cmd_mux_002:sink1_data
	wire         cmd_demux_001_src0_ready;                                                       // cmd_mux_002:sink1_ready -> cmd_demux_001:src0_ready
	wire   [7:0] cmd_demux_001_src0_channel;                                                     // cmd_demux_001:src0_channel -> cmd_mux_002:sink1_channel
	wire         cmd_demux_001_src0_startofpacket;                                               // cmd_demux_001:src0_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire         cmd_demux_001_src0_endofpacket;                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire         cmd_demux_001_src1_valid;                                                       // cmd_demux_001:src1_valid -> cmd_mux_003:sink1_valid
	wire  [93:0] cmd_demux_001_src1_data;                                                        // cmd_demux_001:src1_data -> cmd_mux_003:sink1_data
	wire         cmd_demux_001_src1_ready;                                                       // cmd_mux_003:sink1_ready -> cmd_demux_001:src1_ready
	wire   [7:0] cmd_demux_001_src1_channel;                                                     // cmd_demux_001:src1_channel -> cmd_mux_003:sink1_channel
	wire         cmd_demux_001_src1_startofpacket;                                               // cmd_demux_001:src1_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire         cmd_demux_001_src1_endofpacket;                                                 // cmd_demux_001:src1_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire         rsp_demux_src0_valid;                                                           // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [93:0] rsp_demux_src0_data;                                                            // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire         rsp_demux_src0_ready;                                                           // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [7:0] rsp_demux_src0_channel;                                                         // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_startofpacket;                                                   // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                     // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_001_src0_valid;                                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [93:0] rsp_demux_001_src0_data;                                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire         rsp_demux_001_src0_ready;                                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [7:0] rsp_demux_001_src0_channel;                                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_startofpacket;                                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire         rsp_demux_001_src0_endofpacket;                                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [93:0] rsp_demux_002_src0_data;                                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire         rsp_demux_002_src0_ready;                                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [7:0] rsp_demux_002_src0_channel;                                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire         rsp_demux_002_src0_startofpacket;                                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire         rsp_demux_002_src0_endofpacket;                                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire         rsp_demux_002_src1_valid;                                                       // rsp_demux_002:src1_valid -> rsp_mux_001:sink0_valid
	wire  [93:0] rsp_demux_002_src1_data;                                                        // rsp_demux_002:src1_data -> rsp_mux_001:sink0_data
	wire         rsp_demux_002_src1_ready;                                                       // rsp_mux_001:sink0_ready -> rsp_demux_002:src1_ready
	wire   [7:0] rsp_demux_002_src1_channel;                                                     // rsp_demux_002:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_002_src1_startofpacket;                                               // rsp_demux_002:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire         rsp_demux_002_src1_endofpacket;                                                 // rsp_demux_002:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_003_src0_valid;                                                       // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [93:0] rsp_demux_003_src0_data;                                                        // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire         rsp_demux_003_src0_ready;                                                       // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [7:0] rsp_demux_003_src0_channel;                                                     // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire         rsp_demux_003_src0_startofpacket;                                               // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire         rsp_demux_003_src0_endofpacket;                                                 // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire         rsp_demux_003_src1_valid;                                                       // rsp_demux_003:src1_valid -> rsp_mux_001:sink1_valid
	wire  [93:0] rsp_demux_003_src1_data;                                                        // rsp_demux_003:src1_data -> rsp_mux_001:sink1_data
	wire         rsp_demux_003_src1_ready;                                                       // rsp_mux_001:sink1_ready -> rsp_demux_003:src1_ready
	wire   [7:0] rsp_demux_003_src1_channel;                                                     // rsp_demux_003:src1_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_003_src1_startofpacket;                                               // rsp_demux_003:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire         rsp_demux_003_src1_endofpacket;                                                 // rsp_demux_003:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         cmd_demux_src4_valid;                                                           // cmd_demux:src4_valid -> crosser:in_valid
	wire  [93:0] cmd_demux_src4_data;                                                            // cmd_demux:src4_data -> crosser:in_data
	wire         cmd_demux_src4_ready;                                                           // crosser:in_ready -> cmd_demux:src4_ready
	wire   [7:0] cmd_demux_src4_channel;                                                         // cmd_demux:src4_channel -> crosser:in_channel
	wire         cmd_demux_src4_startofpacket;                                                   // cmd_demux:src4_startofpacket -> crosser:in_startofpacket
	wire         cmd_demux_src4_endofpacket;                                                     // cmd_demux:src4_endofpacket -> crosser:in_endofpacket
	wire         crosser_out_valid;                                                              // crosser:out_valid -> cmd_mux_004:sink0_valid
	wire  [93:0] crosser_out_data;                                                               // crosser:out_data -> cmd_mux_004:sink0_data
	wire         crosser_out_ready;                                                              // cmd_mux_004:sink0_ready -> crosser:out_ready
	wire   [7:0] crosser_out_channel;                                                            // crosser:out_channel -> cmd_mux_004:sink0_channel
	wire         crosser_out_startofpacket;                                                      // crosser:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire         crosser_out_endofpacket;                                                        // crosser:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_src5_valid;                                                           // cmd_demux:src5_valid -> crosser_001:in_valid
	wire  [93:0] cmd_demux_src5_data;                                                            // cmd_demux:src5_data -> crosser_001:in_data
	wire         cmd_demux_src5_ready;                                                           // crosser_001:in_ready -> cmd_demux:src5_ready
	wire   [7:0] cmd_demux_src5_channel;                                                         // cmd_demux:src5_channel -> crosser_001:in_channel
	wire         cmd_demux_src5_startofpacket;                                                   // cmd_demux:src5_startofpacket -> crosser_001:in_startofpacket
	wire         cmd_demux_src5_endofpacket;                                                     // cmd_demux:src5_endofpacket -> crosser_001:in_endofpacket
	wire         crosser_001_out_valid;                                                          // crosser_001:out_valid -> cmd_mux_005:sink0_valid
	wire  [93:0] crosser_001_out_data;                                                           // crosser_001:out_data -> cmd_mux_005:sink0_data
	wire         crosser_001_out_ready;                                                          // cmd_mux_005:sink0_ready -> crosser_001:out_ready
	wire   [7:0] crosser_001_out_channel;                                                        // crosser_001:out_channel -> cmd_mux_005:sink0_channel
	wire         crosser_001_out_startofpacket;                                                  // crosser_001:out_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire         crosser_001_out_endofpacket;                                                    // crosser_001:out_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_src6_valid;                                                           // cmd_demux:src6_valid -> crosser_002:in_valid
	wire  [93:0] cmd_demux_src6_data;                                                            // cmd_demux:src6_data -> crosser_002:in_data
	wire         cmd_demux_src6_ready;                                                           // crosser_002:in_ready -> cmd_demux:src6_ready
	wire   [7:0] cmd_demux_src6_channel;                                                         // cmd_demux:src6_channel -> crosser_002:in_channel
	wire         cmd_demux_src6_startofpacket;                                                   // cmd_demux:src6_startofpacket -> crosser_002:in_startofpacket
	wire         cmd_demux_src6_endofpacket;                                                     // cmd_demux:src6_endofpacket -> crosser_002:in_endofpacket
	wire         crosser_002_out_valid;                                                          // crosser_002:out_valid -> cmd_mux_006:sink0_valid
	wire  [93:0] crosser_002_out_data;                                                           // crosser_002:out_data -> cmd_mux_006:sink0_data
	wire         crosser_002_out_ready;                                                          // cmd_mux_006:sink0_ready -> crosser_002:out_ready
	wire   [7:0] crosser_002_out_channel;                                                        // crosser_002:out_channel -> cmd_mux_006:sink0_channel
	wire         crosser_002_out_startofpacket;                                                  // crosser_002:out_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire         crosser_002_out_endofpacket;                                                    // crosser_002:out_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_src7_valid;                                                           // cmd_demux:src7_valid -> crosser_003:in_valid
	wire  [93:0] cmd_demux_src7_data;                                                            // cmd_demux:src7_data -> crosser_003:in_data
	wire         cmd_demux_src7_ready;                                                           // crosser_003:in_ready -> cmd_demux:src7_ready
	wire   [7:0] cmd_demux_src7_channel;                                                         // cmd_demux:src7_channel -> crosser_003:in_channel
	wire         cmd_demux_src7_startofpacket;                                                   // cmd_demux:src7_startofpacket -> crosser_003:in_startofpacket
	wire         cmd_demux_src7_endofpacket;                                                     // cmd_demux:src7_endofpacket -> crosser_003:in_endofpacket
	wire         crosser_003_out_valid;                                                          // crosser_003:out_valid -> cmd_mux_007:sink0_valid
	wire  [93:0] crosser_003_out_data;                                                           // crosser_003:out_data -> cmd_mux_007:sink0_data
	wire         crosser_003_out_ready;                                                          // cmd_mux_007:sink0_ready -> crosser_003:out_ready
	wire   [7:0] crosser_003_out_channel;                                                        // crosser_003:out_channel -> cmd_mux_007:sink0_channel
	wire         crosser_003_out_startofpacket;                                                  // crosser_003:out_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire         crosser_003_out_endofpacket;                                                    // crosser_003:out_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         rsp_demux_004_src0_valid;                                                       // rsp_demux_004:src0_valid -> crosser_004:in_valid
	wire  [93:0] rsp_demux_004_src0_data;                                                        // rsp_demux_004:src0_data -> crosser_004:in_data
	wire         rsp_demux_004_src0_ready;                                                       // crosser_004:in_ready -> rsp_demux_004:src0_ready
	wire   [7:0] rsp_demux_004_src0_channel;                                                     // rsp_demux_004:src0_channel -> crosser_004:in_channel
	wire         rsp_demux_004_src0_startofpacket;                                               // rsp_demux_004:src0_startofpacket -> crosser_004:in_startofpacket
	wire         rsp_demux_004_src0_endofpacket;                                                 // rsp_demux_004:src0_endofpacket -> crosser_004:in_endofpacket
	wire         crosser_004_out_valid;                                                          // crosser_004:out_valid -> rsp_mux:sink4_valid
	wire  [93:0] crosser_004_out_data;                                                           // crosser_004:out_data -> rsp_mux:sink4_data
	wire         crosser_004_out_ready;                                                          // rsp_mux:sink4_ready -> crosser_004:out_ready
	wire   [7:0] crosser_004_out_channel;                                                        // crosser_004:out_channel -> rsp_mux:sink4_channel
	wire         crosser_004_out_startofpacket;                                                  // crosser_004:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire         crosser_004_out_endofpacket;                                                    // crosser_004:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                       // rsp_demux_005:src0_valid -> crosser_005:in_valid
	wire  [93:0] rsp_demux_005_src0_data;                                                        // rsp_demux_005:src0_data -> crosser_005:in_data
	wire         rsp_demux_005_src0_ready;                                                       // crosser_005:in_ready -> rsp_demux_005:src0_ready
	wire   [7:0] rsp_demux_005_src0_channel;                                                     // rsp_demux_005:src0_channel -> crosser_005:in_channel
	wire         rsp_demux_005_src0_startofpacket;                                               // rsp_demux_005:src0_startofpacket -> crosser_005:in_startofpacket
	wire         rsp_demux_005_src0_endofpacket;                                                 // rsp_demux_005:src0_endofpacket -> crosser_005:in_endofpacket
	wire         crosser_005_out_valid;                                                          // crosser_005:out_valid -> rsp_mux:sink5_valid
	wire  [93:0] crosser_005_out_data;                                                           // crosser_005:out_data -> rsp_mux:sink5_data
	wire         crosser_005_out_ready;                                                          // rsp_mux:sink5_ready -> crosser_005:out_ready
	wire   [7:0] crosser_005_out_channel;                                                        // crosser_005:out_channel -> rsp_mux:sink5_channel
	wire         crosser_005_out_startofpacket;                                                  // crosser_005:out_startofpacket -> rsp_mux:sink5_startofpacket
	wire         crosser_005_out_endofpacket;                                                    // crosser_005:out_endofpacket -> rsp_mux:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                       // rsp_demux_006:src0_valid -> crosser_006:in_valid
	wire  [93:0] rsp_demux_006_src0_data;                                                        // rsp_demux_006:src0_data -> crosser_006:in_data
	wire         rsp_demux_006_src0_ready;                                                       // crosser_006:in_ready -> rsp_demux_006:src0_ready
	wire   [7:0] rsp_demux_006_src0_channel;                                                     // rsp_demux_006:src0_channel -> crosser_006:in_channel
	wire         rsp_demux_006_src0_startofpacket;                                               // rsp_demux_006:src0_startofpacket -> crosser_006:in_startofpacket
	wire         rsp_demux_006_src0_endofpacket;                                                 // rsp_demux_006:src0_endofpacket -> crosser_006:in_endofpacket
	wire         crosser_006_out_valid;                                                          // crosser_006:out_valid -> rsp_mux:sink6_valid
	wire  [93:0] crosser_006_out_data;                                                           // crosser_006:out_data -> rsp_mux:sink6_data
	wire         crosser_006_out_ready;                                                          // rsp_mux:sink6_ready -> crosser_006:out_ready
	wire   [7:0] crosser_006_out_channel;                                                        // crosser_006:out_channel -> rsp_mux:sink6_channel
	wire         crosser_006_out_startofpacket;                                                  // crosser_006:out_startofpacket -> rsp_mux:sink6_startofpacket
	wire         crosser_006_out_endofpacket;                                                    // crosser_006:out_endofpacket -> rsp_mux:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                       // rsp_demux_007:src0_valid -> crosser_007:in_valid
	wire  [93:0] rsp_demux_007_src0_data;                                                        // rsp_demux_007:src0_data -> crosser_007:in_data
	wire         rsp_demux_007_src0_ready;                                                       // crosser_007:in_ready -> rsp_demux_007:src0_ready
	wire   [7:0] rsp_demux_007_src0_channel;                                                     // rsp_demux_007:src0_channel -> crosser_007:in_channel
	wire         rsp_demux_007_src0_startofpacket;                                               // rsp_demux_007:src0_startofpacket -> crosser_007:in_startofpacket
	wire         rsp_demux_007_src0_endofpacket;                                                 // rsp_demux_007:src0_endofpacket -> crosser_007:in_endofpacket
	wire         crosser_007_out_valid;                                                          // crosser_007:out_valid -> rsp_mux:sink7_valid
	wire  [93:0] crosser_007_out_data;                                                           // crosser_007:out_data -> rsp_mux:sink7_data
	wire         crosser_007_out_ready;                                                          // rsp_mux:sink7_ready -> crosser_007:out_ready
	wire   [7:0] crosser_007_out_channel;                                                        // crosser_007:out_channel -> rsp_mux:sink7_channel
	wire         crosser_007_out_startofpacket;                                                  // crosser_007:out_startofpacket -> rsp_mux:sink7_startofpacket
	wire         crosser_007_out_endofpacket;                                                    // crosser_007:out_endofpacket -> rsp_mux:sink7_endofpacket
	wire         jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid;                              // jtag_avalon_jtag_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] jtag_avalon_jtag_slave_agent_rdata_fifo_src_data;                               // jtag_avalon_jtag_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire         jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready;                              // avalon_st_adapter:in_0_ready -> jtag_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_out_0_valid;                                                  // avalon_st_adapter:out_0_valid -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                   // avalon_st_adapter:out_0_data -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                  // jtag_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                  // avalon_st_adapter:out_0_error -> jtag_avalon_jtag_slave_agent:rdata_fifo_sink_error
	wire         sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid;                          // sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire  [33:0] sysid_qsys_0_control_slave_agent_rdata_fifo_src_data;                           // sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire         sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready;                          // avalon_st_adapter_001:in_0_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_001_out_0_valid;                                              // avalon_st_adapter_001:out_0_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_001_out_0_data;                                               // avalon_st_adapter_001:out_0_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_001_out_0_ready;                                              // sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire   [0:0] avalon_st_adapter_001_out_0_error;                                              // avalon_st_adapter_001:out_0_error -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_error
	wire         cpu_nios_debug_mem_slave_agent_rdata_fifo_src_valid;                            // cpu_nios_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire  [33:0] cpu_nios_debug_mem_slave_agent_rdata_fifo_src_data;                             // cpu_nios_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire         cpu_nios_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_002:in_0_ready -> cpu_nios_debug_mem_slave_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_002_out_0_valid;                                              // avalon_st_adapter_002:out_0_valid -> cpu_nios_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_002_out_0_data;                                               // avalon_st_adapter_002:out_0_data -> cpu_nios_debug_mem_slave_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_002_out_0_ready;                                              // cpu_nios_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire   [0:0] avalon_st_adapter_002_out_0_error;                                              // avalon_st_adapter_002:out_0_error -> cpu_nios_debug_mem_slave_agent:rdata_fifo_sink_error
	wire         onchip_memory_s1_agent_rdata_fifo_src_valid;                                    // onchip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire  [33:0] onchip_memory_s1_agent_rdata_fifo_src_data;                                     // onchip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire         onchip_memory_s1_agent_rdata_fifo_src_ready;                                    // avalon_st_adapter_003:in_0_ready -> onchip_memory_s1_agent:rdata_fifo_src_ready
	wire         avalon_st_adapter_003_out_0_valid;                                              // avalon_st_adapter_003:out_0_valid -> onchip_memory_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_003_out_0_data;                                               // avalon_st_adapter_003:out_0_data -> onchip_memory_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_003_out_0_ready;                                              // onchip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire   [0:0] avalon_st_adapter_003_out_0_error;                                              // avalon_st_adapter_003:out_0_error -> onchip_memory_s1_agent:rdata_fifo_sink_error
	wire         classification_pio_s1_agent_rdata_fifo_out_valid;                               // classification_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_004:in_0_valid
	wire  [33:0] classification_pio_s1_agent_rdata_fifo_out_data;                                // classification_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_004:in_0_data
	wire         classification_pio_s1_agent_rdata_fifo_out_ready;                               // avalon_st_adapter_004:in_0_ready -> classification_pio_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_004_out_0_valid;                                              // avalon_st_adapter_004:out_0_valid -> classification_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_004_out_0_data;                                               // avalon_st_adapter_004:out_0_data -> classification_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_004_out_0_ready;                                              // classification_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire   [0:0] avalon_st_adapter_004_out_0_error;                                              // avalon_st_adapter_004:out_0_error -> classification_pio_s1_agent:rdata_fifo_sink_error
	wire         done_read_pio_s1_agent_rdata_fifo_out_valid;                                    // done_read_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_005:in_0_valid
	wire  [33:0] done_read_pio_s1_agent_rdata_fifo_out_data;                                     // done_read_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_005:in_0_data
	wire         done_read_pio_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_005:in_0_ready -> done_read_pio_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_005_out_0_valid;                                              // avalon_st_adapter_005:out_0_valid -> done_read_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_005_out_0_data;                                               // avalon_st_adapter_005:out_0_data -> done_read_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_005_out_0_ready;                                              // done_read_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire   [0:0] avalon_st_adapter_005_out_0_error;                                              // avalon_st_adapter_005:out_0_error -> done_read_pio_s1_agent:rdata_fifo_sink_error
	wire         read_diff_pio_s1_agent_rdata_fifo_out_valid;                                    // read_diff_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_006:in_0_valid
	wire  [33:0] read_diff_pio_s1_agent_rdata_fifo_out_data;                                     // read_diff_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_006:in_0_data
	wire         read_diff_pio_s1_agent_rdata_fifo_out_ready;                                    // avalon_st_adapter_006:in_0_ready -> read_diff_pio_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_006_out_0_valid;                                              // avalon_st_adapter_006:out_0_valid -> read_diff_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_006_out_0_data;                                               // avalon_st_adapter_006:out_0_data -> read_diff_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_006_out_0_ready;                                              // read_diff_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire   [0:0] avalon_st_adapter_006_out_0_error;                                              // avalon_st_adapter_006:out_0_error -> read_diff_pio_s1_agent:rdata_fifo_sink_error
	wire         distance_pio_s1_agent_rdata_fifo_out_valid;                                     // distance_pio_s1_agent_rdata_fifo:out_valid -> avalon_st_adapter_007:in_0_valid
	wire  [33:0] distance_pio_s1_agent_rdata_fifo_out_data;                                      // distance_pio_s1_agent_rdata_fifo:out_data -> avalon_st_adapter_007:in_0_data
	wire         distance_pio_s1_agent_rdata_fifo_out_ready;                                     // avalon_st_adapter_007:in_0_ready -> distance_pio_s1_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_007_out_0_valid;                                              // avalon_st_adapter_007:out_0_valid -> distance_pio_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_007_out_0_data;                                               // avalon_st_adapter_007:out_0_data -> distance_pio_s1_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_007_out_0_ready;                                              // distance_pio_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire   [0:0] avalon_st_adapter_007_out_0_error;                                              // avalon_st_adapter_007:out_0_error -> distance_pio_s1_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) cpu_nios_data_master_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                             //                       clk.clk
		.reset                  (cpu_nios_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (cpu_nios_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_nios_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_nios_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_nios_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_nios_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_nios_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_nios_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_nios_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_nios_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_nios_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_nios_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_nios_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_nios_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (cpu_nios_data_master_byteenable),                                         //                          .byteenable
		.av_read                (cpu_nios_data_master_read),                                               //                          .read
		.av_readdata            (cpu_nios_data_master_readdata),                                           //                          .readdata
		.av_write               (cpu_nios_data_master_write),                                              //                          .write
		.av_writedata           (cpu_nios_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (cpu_nios_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                    //               (terminated)
		.uav_clken              (),                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                   //               (terminated)
		.av_response            (),                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (18),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (18),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_nios_instruction_master_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                                                    //                       clk.clk
		.reset                  (cpu_nios_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (cpu_nios_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (cpu_nios_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (cpu_nios_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (cpu_nios_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (cpu_nios_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (cpu_nios_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (cpu_nios_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (cpu_nios_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (cpu_nios_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (cpu_nios_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (cpu_nios_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (cpu_nios_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (cpu_nios_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (cpu_nios_instruction_master_read),                                               //                          .read
		.av_readdata            (cpu_nios_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                           //               (terminated)
		.av_byteenable          (4'b1111),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                           //               (terminated)
		.av_begintransfer       (1'b0),                                                                           //               (terminated)
		.av_chipselect          (1'b0),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                               //               (terminated)
		.av_write               (1'b0),                                                                           //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                           //               (terminated)
		.av_lock                (1'b0),                                                                           //               (terminated)
		.av_debugaccess         (1'b0),                                                                           //               (terminated)
		.uav_clken              (),                                                                               //               (terminated)
		.av_clken               (1'b1),                                                                           //               (terminated)
		.uav_response           (2'b00),                                                                          //               (terminated)
		.av_response            (),                                                                               //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                           //               (terminated)
		.av_writeresponsevalid  ()                                                                                //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_avalon_jtag_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                   //                      clk.clk
		.reset                  (jtag_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (jtag_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                              //              (terminated)
		.av_beginbursttransfer  (),                                              //              (terminated)
		.av_burstcount          (),                                              //              (terminated)
		.av_byteenable          (),                                              //              (terminated)
		.av_readdatavalid       (1'b0),                                          //              (terminated)
		.av_writebyteenable     (),                                              //              (terminated)
		.av_lock                (),                                              //              (terminated)
		.av_clken               (),                                              //              (terminated)
		.uav_clken              (1'b0),                                          //              (terminated)
		.av_debugaccess         (),                                              //              (terminated)
		.av_outputenable        (),                                              //              (terminated)
		.uav_response           (),                                              //              (terminated)
		.av_response            (2'b00),                                         //              (terminated)
		.uav_writeresponsevalid (),                                              //              (terminated)
		.av_writeresponsevalid  (1'b0)                                           //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sysid_qsys_0_control_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                       //                      clk.clk
		.reset                  (cpu_nios_reset_reset_bridge_in_reset_reset),        //                    reset.reset
		.uav_address            (sysid_qsys_0_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (sysid_qsys_0_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (sysid_qsys_0_control_slave_agent_m0_read),          //                         .read
		.uav_write              (sysid_qsys_0_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (sysid_qsys_0_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (sysid_qsys_0_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (sysid_qsys_0_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (sysid_qsys_0_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (sysid_qsys_0_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (sysid_qsys_0_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (sysid_qsys_0_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (sysid_qsys_0_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata            (sysid_qsys_0_control_slave_readdata),               //                         .readdata
		.av_write               (),                                                  //              (terminated)
		.av_read                (),                                                  //              (terminated)
		.av_writedata           (),                                                  //              (terminated)
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_waitrequest         (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_nios_debug_mem_slave_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                     //                      clk.clk
		.reset                  (cpu_nios_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (cpu_nios_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (cpu_nios_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (cpu_nios_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (cpu_nios_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (cpu_nios_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (cpu_nios_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (cpu_nios_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (cpu_nios_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (cpu_nios_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (cpu_nios_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (cpu_nios_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (cpu_nios_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (cpu_nios_debug_mem_slave_write),                  //                         .write
		.av_read                (cpu_nios_debug_mem_slave_read),                   //                         .read
		.av_readdata            (cpu_nios_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (cpu_nios_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (cpu_nios_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (cpu_nios_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (cpu_nios_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                //              (terminated)
		.av_beginbursttransfer  (),                                                //              (terminated)
		.av_burstcount          (),                                                //              (terminated)
		.av_readdatavalid       (1'b0),                                            //              (terminated)
		.av_writebyteenable     (),                                                //              (terminated)
		.av_lock                (),                                                //              (terminated)
		.av_chipselect          (),                                                //              (terminated)
		.av_clken               (),                                                //              (terminated)
		.uav_clken              (1'b0),                                            //              (terminated)
		.av_outputenable        (),                                                //              (terminated)
		.uav_response           (),                                                //              (terminated)
		.av_response            (2'b00),                                           //              (terminated)
		.uav_writeresponsevalid (),                                                //              (terminated)
		.av_writeresponsevalid  (1'b0)                                             //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory_s1_translator (
		.clk                    (sys_sdram_pll_0_sys_clk_clk),                //                      clk.clk
		.reset                  (cpu_nios_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (onchip_memory_s1_agent_m0_read),             //                         .read
		.uav_write              (onchip_memory_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (onchip_memory_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (onchip_memory_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (onchip_memory_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (onchip_memory_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (onchip_memory_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (onchip_memory_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (onchip_memory_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (onchip_memory_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (onchip_memory_s1_write),                     //                         .write
		.av_readdata            (onchip_memory_s1_readdata),                  //                         .readdata
		.av_writedata           (onchip_memory_s1_writedata),                 //                         .writedata
		.av_byteenable          (onchip_memory_s1_byteenable),                //                         .byteenable
		.av_chipselect          (onchip_memory_s1_chipselect),                //                         .chipselect
		.av_clken               (onchip_memory_s1_clken),                     //                         .clken
		.av_read                (),                                           //              (terminated)
		.av_begintransfer       (),                                           //              (terminated)
		.av_beginbursttransfer  (),                                           //              (terminated)
		.av_burstcount          (),                                           //              (terminated)
		.av_readdatavalid       (1'b0),                                       //              (terminated)
		.av_waitrequest         (1'b0),                                       //              (terminated)
		.av_writebyteenable     (),                                           //              (terminated)
		.av_lock                (),                                           //              (terminated)
		.uav_clken              (1'b0),                                       //              (terminated)
		.av_debugaccess         (),                                           //              (terminated)
		.av_outputenable        (),                                           //              (terminated)
		.uav_response           (),                                           //              (terminated)
		.av_response            (2'b00),                                      //              (terminated)
		.uav_writeresponsevalid (),                                           //              (terminated)
		.av_writeresponsevalid  (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) classification_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (classification_pio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (classification_pio_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (classification_pio_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (classification_pio_s1_agent_m0_read),                  //                         .read
		.uav_write              (classification_pio_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (classification_pio_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (classification_pio_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (classification_pio_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (classification_pio_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (classification_pio_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (classification_pio_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (classification_pio_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (classification_pio_s1_address),                        //      avalon_anti_slave_0.address
		.av_readdata            (classification_pio_s1_readdata),                       //                         .readdata
		.av_write               (),                                                     //              (terminated)
		.av_read                (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) done_read_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (classification_pio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (done_read_pio_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (done_read_pio_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (done_read_pio_s1_agent_m0_read),                       //                         .read
		.uav_write              (done_read_pio_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (done_read_pio_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (done_read_pio_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (done_read_pio_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (done_read_pio_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (done_read_pio_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (done_read_pio_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (done_read_pio_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (done_read_pio_s1_address),                             //      avalon_anti_slave_0.address
		.av_write               (done_read_pio_s1_write),                               //                         .write
		.av_readdata            (done_read_pio_s1_readdata),                            //                         .readdata
		.av_writedata           (done_read_pio_s1_writedata),                           //                         .writedata
		.av_chipselect          (done_read_pio_s1_chipselect),                          //                         .chipselect
		.av_read                (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) read_diff_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (classification_pio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (read_diff_pio_s1_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (read_diff_pio_s1_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (read_diff_pio_s1_agent_m0_read),                       //                         .read
		.uav_write              (read_diff_pio_s1_agent_m0_write),                      //                         .write
		.uav_waitrequest        (read_diff_pio_s1_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (read_diff_pio_s1_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (read_diff_pio_s1_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (read_diff_pio_s1_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (read_diff_pio_s1_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (read_diff_pio_s1_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (read_diff_pio_s1_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (read_diff_pio_s1_address),                             //      avalon_anti_slave_0.address
		.av_readdata            (read_diff_pio_s1_readdata),                            //                         .readdata
		.av_write               (),                                                     //              (terminated)
		.av_read                (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (18),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) distance_pio_s1_translator (
		.clk                    (clk_0_clk_clk),                                        //                      clk.clk
		.reset                  (classification_pio_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (distance_pio_s1_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (distance_pio_s1_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (distance_pio_s1_agent_m0_read),                        //                         .read
		.uav_write              (distance_pio_s1_agent_m0_write),                       //                         .write
		.uav_waitrequest        (distance_pio_s1_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (distance_pio_s1_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (distance_pio_s1_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (distance_pio_s1_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (distance_pio_s1_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (distance_pio_s1_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (distance_pio_s1_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (distance_pio_s1_address),                              //      avalon_anti_slave_0.address
		.av_readdata            (distance_pio_s1_readdata),                             //                         .readdata
		.av_write               (),                                                     //              (terminated)
		.av_read                (),                                                     //              (terminated)
		.av_writedata           (),                                                     //              (terminated)
		.av_begintransfer       (),                                                     //              (terminated)
		.av_beginbursttransfer  (),                                                     //              (terminated)
		.av_burstcount          (),                                                     //              (terminated)
		.av_byteenable          (),                                                     //              (terminated)
		.av_readdatavalid       (1'b0),                                                 //              (terminated)
		.av_waitrequest         (1'b0),                                                 //              (terminated)
		.av_writebyteenable     (),                                                     //              (terminated)
		.av_lock                (),                                                     //              (terminated)
		.av_chipselect          (),                                                     //              (terminated)
		.av_clken               (),                                                     //              (terminated)
		.uav_clken              (1'b0),                                                 //              (terminated)
		.av_debugaccess         (),                                                     //              (terminated)
		.av_outputenable        (),                                                     //              (terminated)
		.uav_response           (),                                                     //              (terminated)
		.av_response            (2'b00),                                                //              (terminated)
		.uav_writeresponsevalid (),                                                     //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                  //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_nios_data_master_agent (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                             //       clk.clk
		.reset                 (cpu_nios_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (cpu_nios_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_nios_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_nios_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_nios_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_nios_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_nios_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_nios_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_nios_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_nios_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_nios_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_nios_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_nios_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_nios_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_nios_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_nios_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_nios_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                       //          .ready
		.av_response           (),                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_QOS_H                 (74),
		.PKT_QOS_L                 (74),
		.PKT_DATA_SIDEBAND_H       (72),
		.PKT_DATA_SIDEBAND_L       (72),
		.PKT_ADDR_SIDEBAND_H       (71),
		.PKT_ADDR_SIDEBAND_L       (71),
		.PKT_BURST_TYPE_H          (70),
		.PKT_BURST_TYPE_L          (69),
		.PKT_CACHE_H               (88),
		.PKT_CACHE_L               (85),
		.PKT_THREAD_ID_H           (81),
		.PKT_THREAD_ID_L           (81),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_EXCLUSIVE       (59),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.ST_DATA_W                 (94),
		.ST_CHANNEL_W              (8),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_nios_instruction_master_agent (
		.clk                   (sys_sdram_pll_0_sys_clk_clk),                                                    //       clk.clk
		.reset                 (cpu_nios_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (cpu_nios_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (cpu_nios_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (cpu_nios_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (cpu_nios_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (cpu_nios_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (cpu_nios_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (cpu_nios_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (cpu_nios_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (cpu_nios_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (cpu_nios_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (cpu_nios_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (cpu_nios_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (cpu_nios_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (cpu_nios_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (cpu_nios_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (cpu_nios_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                          //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                           //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                        //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                  //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                    //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                          //          .ready
		.av_response           (),                                                                               // (terminated)
		.av_writeresponsevalid ()                                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_avalon_jtag_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                             //             clk.clk
		.reset                   (jtag_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (jtag_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                     //                .channel
		.rf_sink_ready           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                             //       clk.clk
		.reset             (jtag_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (jtag_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) sysid_qsys_0_control_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                                 //             clk.clk
		.reset                   (cpu_nios_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (sysid_qsys_0_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sysid_qsys_0_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sysid_qsys_0_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sysid_qsys_0_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sysid_qsys_0_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sysid_qsys_0_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sysid_qsys_0_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sysid_qsys_0_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sysid_qsys_0_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sysid_qsys_0_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sysid_qsys_0_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sysid_qsys_0_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sysid_qsys_0_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sysid_qsys_0_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sysid_qsys_0_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sysid_qsys_0_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                     //                .channel
		.rf_sink_ready           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sysid_qsys_0_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sysid_qsys_0_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sysid_qsys_0_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sysid_qsys_0_control_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                                 //       clk.clk
		.reset             (cpu_nios_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (sysid_qsys_0_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sysid_qsys_0_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sysid_qsys_0_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sysid_qsys_0_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sysid_qsys_0_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sysid_qsys_0_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) cpu_nios_debug_mem_slave_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                               //             clk.clk
		.reset                   (cpu_nios_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_nios_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_nios_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_nios_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_nios_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_nios_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_nios_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_nios_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_nios_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_nios_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_nios_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_nios_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_nios_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_nios_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_nios_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_nios_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_nios_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_nios_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_nios_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_nios_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_nios_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_nios_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (cpu_nios_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_nios_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_nios_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_nios_debug_mem_slave_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                               //       clk.clk
		.reset             (cpu_nios_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_nios_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_nios_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_nios_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_nios_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_nios_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_nios_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory_s1_agent (
		.clk                     (sys_sdram_pll_0_sys_clk_clk),                       //             clk.clk
		.reset                   (cpu_nios_reset_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (onchip_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_003_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                           //                .channel
		.rf_sink_ready           (onchip_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (onchip_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory_s1_agent_rsp_fifo (
		.clk               (sys_sdram_pll_0_sys_clk_clk),                       //       clk.clk
		.reset             (cpu_nios_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (onchip_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) classification_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (classification_pio_reset_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (classification_pio_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (classification_pio_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (classification_pio_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (classification_pio_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (classification_pio_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (classification_pio_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (classification_pio_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (classification_pio_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (classification_pio_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (classification_pio_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (classification_pio_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (classification_pio_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (classification_pio_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (classification_pio_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (classification_pio_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (classification_pio_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                //                .channel
		.rf_sink_ready           (classification_pio_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (classification_pio_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (classification_pio_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (classification_pio_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (classification_pio_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (classification_pio_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (classification_pio_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (classification_pio_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (classification_pio_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (classification_pio_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (classification_pio_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (classification_pio_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (classification_pio_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) classification_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (classification_pio_s1_agent_rf_source_data),             //        in.data
		.in_valid          (classification_pio_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (classification_pio_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (classification_pio_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (classification_pio_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (classification_pio_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (classification_pio_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (classification_pio_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (classification_pio_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (classification_pio_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) classification_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (classification_pio_s1_agent_rdata_fifo_src_data),      //        in.data
		.in_valid          (classification_pio_s1_agent_rdata_fifo_src_valid),     //          .valid
		.in_ready          (classification_pio_s1_agent_rdata_fifo_src_ready),     //          .ready
		.out_data          (classification_pio_s1_agent_rdata_fifo_out_data),      //       out.data
		.out_valid         (classification_pio_s1_agent_rdata_fifo_out_valid),     //          .valid
		.out_ready         (classification_pio_s1_agent_rdata_fifo_out_ready),     //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) done_read_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (classification_pio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (done_read_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (done_read_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (done_read_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (done_read_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (done_read_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (done_read_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (done_read_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (done_read_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (done_read_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (done_read_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (done_read_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (done_read_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (done_read_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (done_read_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (done_read_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (done_read_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                              //                .channel
		.rf_sink_ready           (done_read_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (done_read_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (done_read_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (done_read_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (done_read_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (done_read_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (done_read_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (done_read_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (done_read_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (done_read_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (done_read_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (done_read_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (done_read_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) done_read_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (done_read_pio_s1_agent_rf_source_data),                //        in.data
		.in_valid          (done_read_pio_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (done_read_pio_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (done_read_pio_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (done_read_pio_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (done_read_pio_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (done_read_pio_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (done_read_pio_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (done_read_pio_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (done_read_pio_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) done_read_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (done_read_pio_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (done_read_pio_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (done_read_pio_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (done_read_pio_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (done_read_pio_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (done_read_pio_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) read_diff_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (classification_pio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (read_diff_pio_s1_agent_m0_address),                    //              m0.address
		.m0_burstcount           (read_diff_pio_s1_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (read_diff_pio_s1_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (read_diff_pio_s1_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (read_diff_pio_s1_agent_m0_lock),                       //                .lock
		.m0_readdata             (read_diff_pio_s1_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (read_diff_pio_s1_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (read_diff_pio_s1_agent_m0_read),                       //                .read
		.m0_waitrequest          (read_diff_pio_s1_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (read_diff_pio_s1_agent_m0_writedata),                  //                .writedata
		.m0_write                (read_diff_pio_s1_agent_m0_write),                      //                .write
		.rp_endofpacket          (read_diff_pio_s1_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (read_diff_pio_s1_agent_rp_ready),                      //                .ready
		.rp_valid                (read_diff_pio_s1_agent_rp_valid),                      //                .valid
		.rp_data                 (read_diff_pio_s1_agent_rp_data),                       //                .data
		.rp_startofpacket        (read_diff_pio_s1_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_006_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                              //                .channel
		.rf_sink_ready           (read_diff_pio_s1_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (read_diff_pio_s1_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (read_diff_pio_s1_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (read_diff_pio_s1_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (read_diff_pio_s1_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (read_diff_pio_s1_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (read_diff_pio_s1_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (read_diff_pio_s1_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (read_diff_pio_s1_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (read_diff_pio_s1_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (read_diff_pio_s1_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (read_diff_pio_s1_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (read_diff_pio_s1_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_diff_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (read_diff_pio_s1_agent_rf_source_data),                //        in.data
		.in_valid          (read_diff_pio_s1_agent_rf_source_valid),               //          .valid
		.in_ready          (read_diff_pio_s1_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (read_diff_pio_s1_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (read_diff_pio_s1_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (read_diff_pio_s1_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (read_diff_pio_s1_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (read_diff_pio_s1_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (read_diff_pio_s1_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (read_diff_pio_s1_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) read_diff_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (read_diff_pio_s1_agent_rdata_fifo_src_data),           //        in.data
		.in_valid          (read_diff_pio_s1_agent_rdata_fifo_src_valid),          //          .valid
		.in_ready          (read_diff_pio_s1_agent_rdata_fifo_src_ready),          //          .ready
		.out_data          (read_diff_pio_s1_agent_rdata_fifo_out_data),           //       out.data
		.out_valid         (read_diff_pio_s1_agent_rdata_fifo_out_valid),          //          .valid
		.out_ready         (read_diff_pio_s1_agent_rdata_fifo_out_ready),          //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (93),
		.PKT_ORI_BURST_SIZE_L      (91),
		.PKT_RESPONSE_STATUS_H     (90),
		.PKT_RESPONSE_STATUS_L     (89),
		.PKT_BURST_SIZE_H          (68),
		.PKT_BURST_SIZE_L          (66),
		.PKT_TRANS_LOCK            (58),
		.PKT_BEGIN_BURST           (73),
		.PKT_PROTECTION_H          (84),
		.PKT_PROTECTION_L          (82),
		.PKT_BURSTWRAP_H           (65),
		.PKT_BURSTWRAP_L           (63),
		.PKT_BYTE_CNT_H            (62),
		.PKT_BYTE_CNT_L            (60),
		.PKT_ADDR_H                (53),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (54),
		.PKT_TRANS_POSTED          (55),
		.PKT_TRANS_WRITE           (56),
		.PKT_TRANS_READ            (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (75),
		.PKT_DEST_ID_H             (80),
		.PKT_DEST_ID_L             (78),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (8),
		.ST_DATA_W                 (94),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) distance_pio_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (classification_pio_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (distance_pio_s1_agent_m0_address),                     //              m0.address
		.m0_burstcount           (distance_pio_s1_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (distance_pio_s1_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (distance_pio_s1_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (distance_pio_s1_agent_m0_lock),                        //                .lock
		.m0_readdata             (distance_pio_s1_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (distance_pio_s1_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (distance_pio_s1_agent_m0_read),                        //                .read
		.m0_waitrequest          (distance_pio_s1_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (distance_pio_s1_agent_m0_writedata),                   //                .writedata
		.m0_write                (distance_pio_s1_agent_m0_write),                       //                .write
		.rp_endofpacket          (distance_pio_s1_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (distance_pio_s1_agent_rp_ready),                       //                .ready
		.rp_valid                (distance_pio_s1_agent_rp_valid),                       //                .valid
		.rp_data                 (distance_pio_s1_agent_rp_data),                        //                .data
		.rp_startofpacket        (distance_pio_s1_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_007_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                              //                .channel
		.rf_sink_ready           (distance_pio_s1_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (distance_pio_s1_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (distance_pio_s1_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (distance_pio_s1_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (distance_pio_s1_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (distance_pio_s1_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (distance_pio_s1_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (distance_pio_s1_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (distance_pio_s1_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (distance_pio_s1_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (distance_pio_s1_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (distance_pio_s1_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (distance_pio_s1_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (95),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) distance_pio_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (distance_pio_s1_agent_rf_source_data),                 //        in.data
		.in_valid          (distance_pio_s1_agent_rf_source_valid),                //          .valid
		.in_ready          (distance_pio_s1_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (distance_pio_s1_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (distance_pio_s1_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (distance_pio_s1_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (distance_pio_s1_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (distance_pio_s1_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (distance_pio_s1_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (distance_pio_s1_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) distance_pio_s1_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (distance_pio_s1_agent_rdata_fifo_src_data),            //        in.data
		.in_valid          (distance_pio_s1_agent_rdata_fifo_src_valid),           //          .valid
		.in_ready          (distance_pio_s1_agent_rdata_fifo_src_ready),           //          .ready
		.out_data          (distance_pio_s1_agent_rdata_fifo_out_data),            //       out.data
		.out_valid         (distance_pio_s1_agent_rdata_fifo_out_valid),           //          .valid
		.out_ready         (distance_pio_s1_agent_rdata_fifo_out_ready),           //          .ready
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_startofpacket  (1'b0),                                                 // (terminated)
		.in_endofpacket    (1'b0),                                                 // (terminated)
		.out_startofpacket (),                                                     // (terminated)
		.out_endofpacket   (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	cpu_mm_interconnect_0_router router (
		.sink_ready         (cpu_nios_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_nios_data_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_nios_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_nios_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_nios_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                 //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                            //       src.ready
		.src_valid          (router_src_valid),                            //          .valid
		.src_data           (router_src_data),                             //          .data
		.src_channel        (router_src_channel),                          //          .channel
		.src_startofpacket  (router_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                       //          .endofpacket
	);

	cpu_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_nios_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_nios_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_nios_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_nios_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_nios_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                        //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                               //       src.ready
		.src_valid          (router_001_src_valid),                               //          .valid
		.src_data           (router_001_src_data),                                //          .data
		.src_channel        (router_001_src_channel),                             //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                          //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (jtag_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                   //       clk.clk
		.reset              (jtag_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_002_src_ready),                          //       src.ready
		.src_valid          (router_002_src_valid),                          //          .valid
		.src_data           (router_002_src_data),                           //          .data
		.src_channel        (router_002_src_channel),                        //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                     //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (sysid_qsys_0_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sysid_qsys_0_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sysid_qsys_0_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sysid_qsys_0_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sysid_qsys_0_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                       //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_003_src_ready),                              //       src.ready
		.src_valid          (router_003_src_valid),                              //          .valid
		.src_data           (router_003_src_data),                               //          .data
		.src_channel        (router_003_src_channel),                            //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                         //          .endofpacket
	);

	cpu_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (cpu_nios_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_nios_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (cpu_nios_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_nios_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_nios_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                     //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_004_src_ready),                            //       src.ready
		.src_valid          (router_004_src_valid),                            //          .valid
		.src_data           (router_004_src_data),                             //          .data
		.src_channel        (router_004_src_channel),                          //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                       //          .endofpacket
	);

	cpu_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (onchip_memory_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (onchip_memory_s1_agent_rp_valid),            //          .valid
		.sink_data          (onchip_memory_s1_agent_rp_data),             //          .data
		.sink_startofpacket (onchip_memory_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (onchip_memory_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                       //       src.ready
		.src_valid          (router_005_src_valid),                       //          .valid
		.src_data           (router_005_src_data),                        //          .data
		.src_channel        (router_005_src_channel),                     //          .channel
		.src_startofpacket  (router_005_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                  //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_006 (
		.sink_ready         (classification_pio_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (classification_pio_s1_agent_rp_valid),                 //          .valid
		.sink_data          (classification_pio_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (classification_pio_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (classification_pio_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                 //       src.ready
		.src_valid          (router_006_src_valid),                                 //          .valid
		.src_data           (router_006_src_data),                                  //          .data
		.src_channel        (router_006_src_channel),                               //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_007 (
		.sink_ready         (done_read_pio_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (done_read_pio_s1_agent_rp_valid),                      //          .valid
		.sink_data          (done_read_pio_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (done_read_pio_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (done_read_pio_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                 //       src.ready
		.src_valid          (router_007_src_valid),                                 //          .valid
		.src_data           (router_007_src_data),                                  //          .data
		.src_channel        (router_007_src_channel),                               //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_008 (
		.sink_ready         (read_diff_pio_s1_agent_rp_ready),                      //      sink.ready
		.sink_valid         (read_diff_pio_s1_agent_rp_valid),                      //          .valid
		.sink_data          (read_diff_pio_s1_agent_rp_data),                       //          .data
		.sink_startofpacket (read_diff_pio_s1_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (read_diff_pio_s1_agent_rp_endofpacket),                //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                 //       src.ready
		.src_valid          (router_008_src_valid),                                 //          .valid
		.src_data           (router_008_src_data),                                  //          .data
		.src_channel        (router_008_src_channel),                               //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                            //          .endofpacket
	);

	cpu_mm_interconnect_0_router_002 router_009 (
		.sink_ready         (distance_pio_s1_agent_rp_ready),                       //      sink.ready
		.sink_valid         (distance_pio_s1_agent_rp_valid),                       //          .valid
		.sink_data          (distance_pio_s1_agent_rp_data),                        //          .data
		.sink_startofpacket (distance_pio_s1_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (distance_pio_s1_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                 //       src.ready
		.src_valid          (router_009_src_valid),                                 //          .valid
		.src_data           (router_009_src_data),                                  //          .data
		.src_channel        (router_009_src_channel),                               //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                            //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                           //      sink.ready
		.sink_channel       (router_src_channel),                         //          .channel
		.sink_data          (router_src_data),                            //          .data
		.sink_startofpacket (router_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_src0_data),                        //          .data
		.src0_channel       (cmd_demux_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_src1_data),                        //          .data
		.src1_channel       (cmd_demux_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (cmd_demux_src2_ready),                       //      src2.ready
		.src2_valid         (cmd_demux_src2_valid),                       //          .valid
		.src2_data          (cmd_demux_src2_data),                        //          .data
		.src2_channel       (cmd_demux_src2_channel),                     //          .channel
		.src2_startofpacket (cmd_demux_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (cmd_demux_src2_endofpacket),                 //          .endofpacket
		.src3_ready         (cmd_demux_src3_ready),                       //      src3.ready
		.src3_valid         (cmd_demux_src3_valid),                       //          .valid
		.src3_data          (cmd_demux_src3_data),                        //          .data
		.src3_channel       (cmd_demux_src3_channel),                     //          .channel
		.src3_startofpacket (cmd_demux_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket   (cmd_demux_src3_endofpacket),                 //          .endofpacket
		.src4_ready         (cmd_demux_src4_ready),                       //      src4.ready
		.src4_valid         (cmd_demux_src4_valid),                       //          .valid
		.src4_data          (cmd_demux_src4_data),                        //          .data
		.src4_channel       (cmd_demux_src4_channel),                     //          .channel
		.src4_startofpacket (cmd_demux_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket   (cmd_demux_src4_endofpacket),                 //          .endofpacket
		.src5_ready         (cmd_demux_src5_ready),                       //      src5.ready
		.src5_valid         (cmd_demux_src5_valid),                       //          .valid
		.src5_data          (cmd_demux_src5_data),                        //          .data
		.src5_channel       (cmd_demux_src5_channel),                     //          .channel
		.src5_startofpacket (cmd_demux_src5_startofpacket),               //          .startofpacket
		.src5_endofpacket   (cmd_demux_src5_endofpacket),                 //          .endofpacket
		.src6_ready         (cmd_demux_src6_ready),                       //      src6.ready
		.src6_valid         (cmd_demux_src6_valid),                       //          .valid
		.src6_data          (cmd_demux_src6_data),                        //          .data
		.src6_channel       (cmd_demux_src6_channel),                     //          .channel
		.src6_startofpacket (cmd_demux_src6_startofpacket),               //          .startofpacket
		.src6_endofpacket   (cmd_demux_src6_endofpacket),                 //          .endofpacket
		.src7_ready         (cmd_demux_src7_ready),                       //      src7.ready
		.src7_valid         (cmd_demux_src7_valid),                       //          .valid
		.src7_data          (cmd_demux_src7_data),                        //          .data
		.src7_channel       (cmd_demux_src7_channel),                     //          .channel
		.src7_startofpacket (cmd_demux_src7_startofpacket),               //          .startofpacket
		.src7_endofpacket   (cmd_demux_src7_endofpacket)                  //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                       //      sink.ready
		.sink_channel       (router_001_src_channel),                     //          .channel
		.sink_data          (router_001_src_data),                        //          .data
		.sink_startofpacket (router_001_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_001_src_valid),                       //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.src0_data          (cmd_demux_001_src0_data),                    //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),             //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                   //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.src1_data          (cmd_demux_001_src1_data),                    //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),            //       clk.clk
		.reset               (jtag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_src_valid),                      //          .valid
		.src_data            (cmd_mux_src_data),                       //          .data
		.src_channel         (cmd_mux_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                   //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                 //          .channel
		.sink0_data          (cmd_demux_src0_data),                    //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset               (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                      //          .valid
		.src_data            (cmd_mux_001_src_data),                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                     //          .channel
		.sink0_data          (cmd_demux_src1_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                  //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset               (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                      //          .valid
		.src_data            (cmd_mux_002_src_data),                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                     //          .channel
		.sink0_data          (cmd_demux_src2_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset               (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                      //          .valid
		.src_data            (cmd_mux_003_src_data),                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                     //          .channel
		.sink0_data          (cmd_demux_src3_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket),                 //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                   //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                    //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                        //       clk.clk
		.reset               (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                //          .valid
		.src_data            (cmd_mux_004_src_data),                                 //          .data
		.src_channel         (cmd_mux_004_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_out_ready),                                    //     sink0.ready
		.sink0_valid         (crosser_out_valid),                                    //          .valid
		.sink0_channel       (crosser_out_channel),                                  //          .channel
		.sink0_data          (crosser_out_data),                                     //          .data
		.sink0_startofpacket (crosser_out_startofpacket),                            //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                               //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                        //       clk.clk
		.reset               (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                                //          .valid
		.src_data            (cmd_mux_005_src_data),                                 //          .data
		.src_channel         (cmd_mux_005_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_001_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_001_out_valid),                                //          .valid
		.sink0_channel       (crosser_001_out_channel),                              //          .channel
		.sink0_data          (crosser_001_out_data),                                 //          .data
		.sink0_startofpacket (crosser_001_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_001_out_endofpacket)                           //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                        //       clk.clk
		.reset               (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                                //          .valid
		.src_data            (cmd_mux_006_src_data),                                 //          .data
		.src_channel         (cmd_mux_006_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_002_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_002_out_valid),                                //          .valid
		.sink0_channel       (crosser_002_out_channel),                              //          .channel
		.sink0_data          (crosser_002_out_data),                                 //          .data
		.sink0_startofpacket (crosser_002_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_002_out_endofpacket)                           //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                        //       clk.clk
		.reset               (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                                //          .valid
		.src_data            (cmd_mux_007_src_data),                                 //          .data
		.src_channel         (cmd_mux_007_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (crosser_003_out_ready),                                //     sink0.ready
		.sink0_valid         (crosser_003_out_valid),                                //          .valid
		.sink0_channel       (crosser_003_out_channel),                              //          .channel
		.sink0_data          (crosser_003_out_data),                                 //          .data
		.sink0_startofpacket (crosser_003_out_startofpacket),                        //          .startofpacket
		.sink0_endofpacket   (crosser_003_out_endofpacket)                           //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (sys_sdram_pll_0_sys_clk_clk),            //       clk.clk
		.reset              (jtag_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                   //      sink.ready
		.sink_channel       (router_002_src_channel),                 //          .channel
		.sink_data          (router_002_src_data),                    //          .data
		.sink_startofpacket (router_002_src_startofpacket),           //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),             //          .endofpacket
		.sink_valid         (router_002_src_valid),                   //          .valid
		.src0_ready         (rsp_demux_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_src0_data),                    //          .data
		.src0_channel       (rsp_demux_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_001 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_002_src1_data),                    //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_cmd_demux_001 rsp_demux_003 (
		.clk                (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset              (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                       //      sink.ready
		.sink_channel       (router_005_src_channel),                     //          .channel
		.sink_data          (router_005_src_data),                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),             //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                   //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                   //          .valid
		.src1_data          (rsp_demux_003_src1_data),                    //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                 //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),           //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)              //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                 //      sink.ready
		.sink_channel       (router_006_src_channel),                               //          .channel
		.sink_data          (router_006_src_data),                                  //          .data
		.sink_startofpacket (router_006_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_006_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_004_src0_data),                              //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                 //      sink.ready
		.sink_channel       (router_007_src_channel),                               //          .channel
		.sink_data          (router_007_src_data),                                  //          .data
		.sink_startofpacket (router_007_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_007_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_005_src0_data),                              //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                                 //      sink.ready
		.sink_channel       (router_008_src_channel),                               //          .channel
		.sink_data          (router_008_src_data),                                  //          .data
		.sink_startofpacket (router_008_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_008_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_006_src0_data),                              //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_demux rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (classification_pio_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                 //      sink.ready
		.sink_channel       (router_009_src_channel),                               //          .channel
		.sink_data          (router_009_src_data),                                  //          .data
		.sink_startofpacket (router_009_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                           //          .endofpacket
		.sink_valid         (router_009_src_valid),                                 //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_007_src0_data),                              //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                        //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset               (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_src_valid),                          //          .valid
		.src_data            (rsp_mux_src_data),                           //          .data
		.src_channel         (rsp_mux_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                       //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                     //          .channel
		.sink0_data          (rsp_demux_src0_data),                        //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                   //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                 //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                    //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),             //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                   //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                    //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),             //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                   //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                    //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),             //          .endofpacket
		.sink4_ready         (crosser_004_out_ready),                      //     sink4.ready
		.sink4_valid         (crosser_004_out_valid),                      //          .valid
		.sink4_channel       (crosser_004_out_channel),                    //          .channel
		.sink4_data          (crosser_004_out_data),                       //          .data
		.sink4_startofpacket (crosser_004_out_startofpacket),              //          .startofpacket
		.sink4_endofpacket   (crosser_004_out_endofpacket),                //          .endofpacket
		.sink5_ready         (crosser_005_out_ready),                      //     sink5.ready
		.sink5_valid         (crosser_005_out_valid),                      //          .valid
		.sink5_channel       (crosser_005_out_channel),                    //          .channel
		.sink5_data          (crosser_005_out_data),                       //          .data
		.sink5_startofpacket (crosser_005_out_startofpacket),              //          .startofpacket
		.sink5_endofpacket   (crosser_005_out_endofpacket),                //          .endofpacket
		.sink6_ready         (crosser_006_out_ready),                      //     sink6.ready
		.sink6_valid         (crosser_006_out_valid),                      //          .valid
		.sink6_channel       (crosser_006_out_channel),                    //          .channel
		.sink6_data          (crosser_006_out_data),                       //          .data
		.sink6_startofpacket (crosser_006_out_startofpacket),              //          .startofpacket
		.sink6_endofpacket   (crosser_006_out_endofpacket),                //          .endofpacket
		.sink7_ready         (crosser_007_out_ready),                      //     sink7.ready
		.sink7_valid         (crosser_007_out_valid),                      //          .valid
		.sink7_channel       (crosser_007_out_channel),                    //          .channel
		.sink7_data          (crosser_007_out_data),                       //          .data
		.sink7_startofpacket (crosser_007_out_startofpacket),              //          .startofpacket
		.sink7_endofpacket   (crosser_007_out_endofpacket)                 //          .endofpacket
	);

	cpu_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (sys_sdram_pll_0_sys_clk_clk),                //       clk.clk
		.reset               (cpu_nios_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                      //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                      //          .valid
		.src_data            (rsp_mux_001_src_data),                       //          .data
		.src_channel         (rsp_mux_001_src_channel),                    //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready         (rsp_demux_002_src1_ready),                   //     sink0.ready
		.sink0_valid         (rsp_demux_002_src1_valid),                   //          .valid
		.sink0_channel       (rsp_demux_002_src1_channel),                 //          .channel
		.sink0_data          (rsp_demux_002_src1_data),                    //          .data
		.sink0_startofpacket (rsp_demux_002_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (rsp_demux_002_src1_endofpacket),             //          .endofpacket
		.sink1_ready         (rsp_demux_003_src1_ready),                   //     sink1.ready
		.sink1_valid         (rsp_demux_003_src1_valid),                   //          .valid
		.sink1_channel       (rsp_demux_003_src1_channel),                 //          .channel
		.sink1_data          (rsp_demux_003_src1_data),                    //          .data
		.sink1_startofpacket (rsp_demux_003_src1_startofpacket),           //          .startofpacket
		.sink1_endofpacket   (rsp_demux_003_src1_endofpacket)              //          .endofpacket
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_nios_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (classification_pio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src4_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src4_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src4_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src4_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src4_channel),                               //              .channel
		.in_data           (cmd_demux_src4_data),                                  //              .data
		.out_ready         (crosser_out_ready),                                    //           out.ready
		.out_valid         (crosser_out_valid),                                    //              .valid
		.out_startofpacket (crosser_out_startofpacket),                            //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                              //              .endofpacket
		.out_channel       (crosser_out_channel),                                  //              .channel
		.out_data          (crosser_out_data),                                     //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_nios_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (classification_pio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src5_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src5_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src5_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src5_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src5_channel),                               //              .channel
		.in_data           (cmd_demux_src5_data),                                  //              .data
		.out_ready         (crosser_001_out_ready),                                //           out.ready
		.out_valid         (crosser_001_out_valid),                                //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_001_out_channel),                              //              .channel
		.out_data          (crosser_001_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_002 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_nios_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (classification_pio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src6_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src6_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src6_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src6_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src6_channel),                               //              .channel
		.in_data           (cmd_demux_src6_data),                                  //              .data
		.out_ready         (crosser_002_out_ready),                                //           out.ready
		.out_valid         (crosser_002_out_valid),                                //              .valid
		.out_startofpacket (crosser_002_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_002_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_002_out_channel),                              //              .channel
		.out_data          (crosser_002_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_003 (
		.in_clk            (sys_sdram_pll_0_sys_clk_clk),                          //        in_clk.clk
		.in_reset          (cpu_nios_reset_reset_bridge_in_reset_reset),           //  in_clk_reset.reset
		.out_clk           (clk_0_clk_clk),                                        //       out_clk.clk
		.out_reset         (classification_pio_reset_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (cmd_demux_src7_ready),                                 //            in.ready
		.in_valid          (cmd_demux_src7_valid),                                 //              .valid
		.in_startofpacket  (cmd_demux_src7_startofpacket),                         //              .startofpacket
		.in_endofpacket    (cmd_demux_src7_endofpacket),                           //              .endofpacket
		.in_channel        (cmd_demux_src7_channel),                               //              .channel
		.in_data           (cmd_demux_src7_data),                                  //              .data
		.out_ready         (crosser_003_out_ready),                                //           out.ready
		.out_valid         (crosser_003_out_valid),                                //              .valid
		.out_startofpacket (crosser_003_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_003_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_003_out_channel),                              //              .channel
		.out_data          (crosser_003_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_004 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (classification_pio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_nios_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_004_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_004_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_004_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_004_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_004_src0_channel),                           //              .channel
		.in_data           (rsp_demux_004_src0_data),                              //              .data
		.out_ready         (crosser_004_out_ready),                                //           out.ready
		.out_valid         (crosser_004_out_valid),                                //              .valid
		.out_startofpacket (crosser_004_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_004_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_004_out_channel),                              //              .channel
		.out_data          (crosser_004_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_005 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (classification_pio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_nios_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_005_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_005_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_005_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_005_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_005_src0_channel),                           //              .channel
		.in_data           (rsp_demux_005_src0_data),                              //              .data
		.out_ready         (crosser_005_out_ready),                                //           out.ready
		.out_valid         (crosser_005_out_valid),                                //              .valid
		.out_startofpacket (crosser_005_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_005_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_005_out_channel),                              //              .channel
		.out_data          (crosser_005_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_006 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (classification_pio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_nios_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_006_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_006_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_006_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_006_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_006_src0_channel),                           //              .channel
		.in_data           (rsp_demux_006_src0_data),                              //              .data
		.out_ready         (crosser_006_out_ready),                                //           out.ready
		.out_valid         (crosser_006_out_valid),                                //              .valid
		.out_startofpacket (crosser_006_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_006_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_006_out_channel),                              //              .channel
		.out_data          (crosser_006_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (94),
		.BITS_PER_SYMBOL     (94),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (8),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_007 (
		.in_clk            (clk_0_clk_clk),                                        //        in_clk.clk
		.in_reset          (classification_pio_reset_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (sys_sdram_pll_0_sys_clk_clk),                          //       out_clk.clk
		.out_reset         (cpu_nios_reset_reset_bridge_in_reset_reset),           // out_clk_reset.reset
		.in_ready          (rsp_demux_007_src0_ready),                             //            in.ready
		.in_valid          (rsp_demux_007_src0_valid),                             //              .valid
		.in_startofpacket  (rsp_demux_007_src0_startofpacket),                     //              .startofpacket
		.in_endofpacket    (rsp_demux_007_src0_endofpacket),                       //              .endofpacket
		.in_channel        (rsp_demux_007_src0_channel),                           //              .channel
		.in_data           (rsp_demux_007_src0_data),                              //              .data
		.out_ready         (crosser_007_out_ready),                                //           out.ready
		.out_valid         (crosser_007_out_valid),                                //              .valid
		.out_startofpacket (crosser_007_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_007_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_007_out_channel),                              //              .channel
		.out_data          (crosser_007_out_data),                                 //              .data
		.in_empty          (1'b0),                                                 //   (terminated)
		.in_error          (1'b0),                                                 //   (terminated)
		.out_empty         (),                                                     //   (terminated)
		.out_error         ()                                                      //   (terminated)
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                       // in_clk_0.clk
		.in_rst_0_reset (jtag_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (jtag_avalon_jtag_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_avalon_jtag_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                      //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                           // in_clk_0.clk
		.in_rst_0_reset (cpu_nios_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (sysid_qsys_0_control_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                      //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                         // in_clk_0.clk
		.in_rst_0_reset (cpu_nios_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (cpu_nios_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (cpu_nios_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (cpu_nios_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                    //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                   //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                   //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                    //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (sys_sdram_pll_0_sys_clk_clk),                 // in_clk_0.clk
		.in_rst_0_reset (cpu_nios_reset_reset_bridge_in_reset_reset),  // in_rst_0.reset
		.in_0_data      (onchip_memory_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),            //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),           //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),           //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)            //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (classification_pio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (classification_pio_s1_agent_rdata_fifo_out_data),      //     in_0.data
		.in_0_valid     (classification_pio_s1_agent_rdata_fifo_out_valid),     //         .valid
		.in_0_ready     (classification_pio_s1_agent_rdata_fifo_out_ready),     //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                     //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (classification_pio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (done_read_pio_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (done_read_pio_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (done_read_pio_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)                     //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (classification_pio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (read_diff_pio_s1_agent_rdata_fifo_out_data),           //     in_0.data
		.in_0_valid     (read_diff_pio_s1_agent_rdata_fifo_out_valid),          //         .valid
		.in_0_ready     (read_diff_pio_s1_agent_rdata_fifo_out_ready),          //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)                     //         .error
	);

	cpu_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (classification_pio_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (distance_pio_s1_agent_rdata_fifo_out_data),            //     in_0.data
		.in_0_valid     (distance_pio_s1_agent_rdata_fifo_out_valid),           //         .valid
		.in_0_ready     (distance_pio_s1_agent_rdata_fifo_out_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),                     //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),                    //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),                    //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)                     //         .error
	);

endmodule
