
host_fs.elf:     file format elf32-littlenios2
host_fs.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08010000

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00000210 memsz 0x00000210 flags r-x
    LOAD off    0x00002000 vaddr 0x08010000 paddr 0x08010000 align 2**12
         filesz 0x0000b580 memsz 0x0000b580 flags r-x
    LOAD off    0x0000d580 vaddr 0x0801b580 paddr 0x0801d08c align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x0000fb98 vaddr 0x0801eb98 paddr 0x0801eb98 align 2**12
         filesz 0x00000000 memsz 0x000006f0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000af10  08010000  08010000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000670  0801af10  0801af10  0000cf10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  0801b580  0801d08c  0000d580  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000006f0  0801eb98  0801eb98  0000fb98  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04000230  04000230  0000f08c  2**0
                  CONTENTS
  7 .onchip_memory 00000000  0801f288  0801f288  0000f08c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cc8  00000000  00000000  0000f0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00022401  00000000  00000000  0000fd78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000858b  00000000  00000000  00032179  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000097f9  00000000  00000000  0003a704  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001fe0  00000000  00000000  00043f00  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000392a  00000000  00000000  00045ee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00005ddd  00000000  00000000  0004980a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000010  00000000  00000000  0004f5e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000008a0  00000000  00000000  0004f5f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000531c6  2**0
                  CONTENTS, READONLY
 19 .cpu          00000008  00000000  00000000  000531c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000531d1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000531d2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000531d3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000531d7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000531db  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000004  00000000  00000000  000531df  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000004  00000000  00000000  000531e3  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000004  00000000  00000000  000531e7  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000003  00000000  00000000  000531eb  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000033  00000000  00000000  000531ee  2**0
                  CONTENTS, READONLY
 30 .jdi          0000389c  00000000  00000000  00053221  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0005a080  00000000  00000000  00056abd  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
08010000 l    d  .text	00000000 .text
0801af10 l    d  .rodata	00000000 .rodata
0801b580 l    d  .rwdata	00000000 .rwdata
0801eb98 l    d  .bss	00000000 .bss
04000230 l    d  .sdram	00000000 .sdram
0801f288 l    d  .onchip_memory	00000000 .onchip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../host_fs_bsp//obj/HAL/src/crt0.o
08010038 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 atoi.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080108ec l     F .text	00000008 __fp_unlock
08010900 l     F .text	0000019c __sinit.part.1
08010a9c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fseeko.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getline.c
00000000 l    df *ABS*	00000000 impure.c
0801b580 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 itoa.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 refill.c
08012550 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtol.c
00000000 l    df *ABS*	00000000 utoa.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 ctype_.c
0801b3a1 l     O .rodata	00000180 _ctype_b
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 getdelim.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 getc_u.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_close.c
08013c60 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
08013d74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
08013dd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
08013ec8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
08013fb0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801409c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
08014268 l     F .text	0000003c alt_get_errno
080142a4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
08014754 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0801d034 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
080149c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08014b04 l     F .text	00000034 alt_dev_reg
0801bf54 l     O .rwdata	00001060 jtag
0801cfb4 l     O .rwdata	00000028 altera_hostfs
0801cfdc l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08019194 l     F .text	0000020c altera_avalon_jtag_uart_irq
080193a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_hostfs.c
0801d038 l     O .rwdata	00000009 hcinfo.2538
0801d044 l     O .rwdata	0000000a hcinfo.2551
0801d050 l     O .rwdata	00000009 hcinfo.2560
0801d05c l     O .rwdata	0000000a hcinfo.2573
0801d068 l     O .rwdata	0000000a hcinfo.2586
0801d074 l     O .rwdata	0000000a hcinfo.2612
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08019fa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801a624 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
0801ebf4 g     O .bss	00000004 alt_instruction_exception_handler
0801ebbc g     O .bss	00000004 aux_status_register
080131a0 g     F .text	00000054 _isatty_r
080141b4 g     F .text	0000006c alt_main
0801f188 g     O .bss	00000100 alt_irq
080131f4 g     F .text	00000060 _lseek_r
0801d08c g       *ABS*	00000000 __flash_rwdata_start
08012f90 g     F .text	000000ac __sflags
08014f40 g     F .text	000001a4 Check_for_Master_Boot_Record
0801f288 g       *ABS*	00000000 __alt_heap_start
08012984 g     F .text	00000008 strtok_r
08018da4 g     F .text	000001cc alt_up_sd_card_fclose
0801286c g     F .text	0000005c __sseek
08010c4c g     F .text	00000010 __sinit
0801ac64 g     F .text	00000140 __swbuf_r
08010aa4 g     F .text	00000078 __sfmoreglue
08014244 g     F .text	00000024 __malloc_unlock
080199d8 g     F .text	0000011c alt_hostfs_open
08013840 g     F .text	00000028 _getc_unlocked_r
0801ebe0 g     O .bss	00000004 current_sector_modified
080138a0 g     F .text	0000015c memmove
08010c34 g     F .text	00000018 _cleanup
080128e8 g     F .text	0000009c __strtok_r
08017974 g     F .text	000000c4 alt_up_sd_card_is_Present
08014c88 g     F .text	0000004c Save_Modified_Sector
0801a928 g     F .text	00000024 altera_nios2_gen2_irq_init
08013830 g     F .text	00000010 __errno
08013868 g     F .text	00000038 getc_unlocked
04000000 g     F .entry	0000000c __reset
0801ebd8 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
04000020 g       *ABS*	00000000 __flash_exceptions_start
0801165c g     F .text	0000005c _fstat_r
0801eb98 g     O .bss	00000004 errno
08013a70 g     F .text	00000014 __srget
080127e8 g     F .text	00000008 __seofread
0801ebac g     O .bss	00000004 alt_argv
08025008 g       *ABS*	00000000 _gp
08017f3c g     F .text	0000037c alt_up_sd_card_fopen
08017aa4 g     F .text	000000d0 alt_up_sd_card_find_first
0801ebcc g     O .bss	00000004 command_argument_register
0801303c g     F .text	00000164 __getdelim
0801bdd4 g     O .rwdata	00000180 alt_fd_list
08019c10 g     F .text	00000068 alt_hostfs_seek
080171d8 g     F .text	00000134 find_first_empty_record_in_root_directory
0801a088 g     F .text	00000090 alt_find_dev
08012280 g     F .text	00000148 memcpy
080101bc g     F .text	000001a0 sdTest
080108f4 g     F .text	0000000c _cleanup_r
0801a220 g     F .text	00000080 alt_fs_reg
0801a708 g     F .text	0000007c alt_io_redirect
0801a94c g     F .text	0000009c alt_exception_cause_generated_bad_addr
08016dc8 g     F .text	000001bc find_first_empty_cluster
080178b8 g     F .text	000000bc alt_up_sd_card_open_dev
08019598 g     F .text	0000021c altera_avalon_jtag_uart_read
08013b7c g     F .text	00000064 .hidden __udivsi3
08013f04 g     F .text	000000ac isatty
0801eba4 g     O .bss	00000004 __malloc_top_pad
080100e0 g     F .text	000000dc transferImage
080118b4 g     F .text	00000004 itoa
080160a8 g     F .text	000000b8 get_dir_divider_location
08012740 g     F .text	00000054 _sbrk_r
08015d78 g     F .text	000000c4 filename_to_upper_case
08019b38 g     F .text	0000006c alt_hostfs_read
080182b8 g     F .text	00000088 alt_up_sd_card_set_attributes
080150e4 g     F .text	0000027c Read_File_Record_At_Offset
08013254 g     F .text	00000060 _read_r
0801d02c g     O .rwdata	00000004 alt_max_fd
0801003c g     F .text	000000a4 printImage
08016944 g     F .text	00000484 find_file_in_directory
08010540 g     F .text	000000f0 _fclose_r
080108bc g     F .text	00000030 fflush
0801eba0 g     O .bss	00000004 __malloc_max_sbrked_mem
08017a38 g     F .text	0000006c alt_up_sd_card_is_FAT16
080140d8 g     F .text	000000dc lseek
0801d008 g     O .rwdata	00000004 _global_impure_ptr
080163fc g     F .text	00000548 get_home_directory_cluster_for_file
080132cc g     F .text	00000564 _realloc_r
0801f288 g       *ABS*	00000000 __bss_end
0801a534 g     F .text	000000f0 alt_iic_isr_register
0801a820 g     F .text	00000108 alt_tick
0801ebe4 g     O .bss	00000004 current_sector_index
08010c6c g     F .text	00000018 __fp_lock_all
0801a4e8 g     F .text	0000004c alt_ic_irq_enabled
0801a784 g     F .text	0000009c alt_alarm_stop
08012be4 g     F .text	0000001c strtol
08014e60 g     F .text	000000e0 mark_cluster
0801ebe8 g     O .bss	00000004 alt_irq_active
080111fc g     F .text	00000444 _fseeko_r
08019af4 g     F .text	00000044 alt_hostfs_close
040000fc g     F .exceptions	000000d4 alt_irq_handler
0801bdac g     O .rwdata	00000028 alt_dev_null
08011840 g     F .text	0000000c __getline
0801730c g     F .text	0000018c convert_filename_to_name_extension
08019f88 g     F .text	00000020 alt_dcache_flush_all
0801ebb8 g     O .bss	00000004 is_sd_card_formated_as_FAT16
08012d58 g     F .text	00000004 utoa
08016f84 g     F .text	00000254 find_first_empty_record_in_a_subdirectory
0801d08c g       *ABS*	00000000 __ram_rwdata_end
08010000 g       *ABS*	00000000 __alt_mem_onchip_memory
0801d024 g     O .rwdata	00000008 alt_dev_list
08014a04 g     F .text	00000100 write
0801aa64 g     F .text	000000a0 _putc_r
0801ebdc g     O .bss	00000004 device_pointer
0801b580 g       *ABS*	00000000 __ram_rodata_end
08013e10 g     F .text	000000b8 fstat
08013be0 g     F .text	00000058 .hidden __umodsi3
0801f288 g       *ABS*	00000000 end
08011640 g     F .text	0000001c fseeko
0801184c g     F .text	00000068 __itoa
080104fc g     F .text	0000000c _atoi_r
080111e0 g     F .text	0000001c fseek
080190d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0801fa00 g       *ABS*	00000000 __alt_stack_pointer
080197b4 g     F .text	00000224 altera_avalon_jtag_uart_write
08010c5c g     F .text	00000004 __sfp_lock_acquire
08010ecc g     F .text	00000310 _free_r
080144ec g     F .text	0000022c alt_printf
080139fc g     F .text	00000074 __srget_r
08012e10 g     F .text	00000180 __call_exitprocs
0801d010 g     O .rwdata	00000004 __malloc_sbrk_base
08010000 g     F .text	0000003c _start
0801ebec g     O .bss	00000004 _alt_tick_rate
0801ebf0 g     O .bss	00000004 _alt_nticks
08014790 g     F .text	00000104 read
08014b70 g     F .text	00000064 alt_sys_init
080124f0 g     F .text	00000060 _open_r
08019440 g     F .text	00000068 altera_avalon_jtag_uart_close
08013c38 g     F .text	00000028 .hidden __mulsi3
0801b580 g       *ABS*	00000000 __ram_rwdata_start
0801af10 g       *ABS*	00000000 __ram_rodata_start
0801ebf8 g     O .bss	00000028 __malloc_current_mallinfo
0801ebb4 g     O .bss	00000004 initialized
080132b4 g     F .text	00000018 realloc
08018f70 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801a2a0 g     F .text	000000c4 alt_get_fd
0801ec20 g     O .bss	00000014 search_data
08012dbc g     F .text	00000054 _close_r
080128d0 g     F .text	00000018 strtok
0801a9e8 g     F .text	0000007c memcmp
08019030 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801f288 g       *ABS*	00000000 __alt_stack_base
08019080 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0801adbc g     F .text	00000154 __swsetup_r
08010b1c g     F .text	00000118 __sfp
0801ec34 g     O .bss	00000054 boot_sector_data
0801b9a4 g     O .rwdata	00000408 __malloc_av_
08010c68 g     F .text	00000004 __sinit_lock_release
08012794 g     F .text	00000054 __sread
0801a118 g     F .text	00000108 alt_find_file
08019fe4 g     F .text	000000a4 alt_dev_llist_insert
08014220 g     F .text	00000024 __malloc_lock
08014918 g     F .text	000000b0 sbrk
08010860 g     F .text	0000005c _fflush_r
08012c00 g     F .text	00000158 __utoa
08010d90 g     F .text	00000018 fopen
0801eb98 g       *ABS*	00000000 __bss_start
080123c8 g     F .text	00000128 memset
0801035c g     F .text	00000194 main
0801ebb0 g     O .bss	00000004 alt_envp
0801eb9c g     O .bss	00000004 __malloc_max_total_mem
08018fd0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0801ada4 g     F .text	00000018 __swbuf
08018340 g     F .text	00000088 alt_up_sd_card_get_attributes
08014bd4 g     F .text	000000b4 Write_Sector_Data
08018758 g     F .text	0000064c alt_up_sd_card_write
080128c8 g     F .text	00000008 __sclose
0801fa00 g       *ABS*	00000000 __alt_heap_limit
08010630 g     F .text	00000014 fclose
0801298c g     F .text	00000258 _strtol_r
08011a74 g     F .text	0000080c _malloc_r
0801d030 g     O .rwdata	00000004 alt_errno
080116b8 g     F .text	000000c4 _fwalk
0801ab04 g     F .text	000000c8 putc
08013a84 g     F .text	00000084 .hidden __divsi3
08010da8 g     F .text	00000124 _malloc_trim_r
0801ebc0 g     O .bss	00000004 status_register
0801ebc8 g     O .bss	00000004 command_register
0801af10 g       *ABS*	00000000 __flash_rodata_start
08014b38 g     F .text	00000038 alt_irq_init
08014894 g     F .text	00000084 alt_release_fd
08014dac g     F .text	000000b4 get_cluster_flag
08015360 g     F .text	0000028c Write_File_Record_At_Offset
08012d5c g     F .text	00000060 _write_r
080155ec g     F .text	000006a0 Check_for_DOS_FAT
08017498 g     F .text	000002d8 create_file
0801d00c g     O .rwdata	00000004 _impure_ptr
0801ebc4 g     O .bss	00000004 CSD_register_w0
0801eba8 g     O .bss	00000004 alt_argc
08010644 g     F .text	0000021c __sflush_r
080111dc g     F .text	00000004 _fseek_r
0801256c g     F .text	000001d4 __srefill_r
04000020 g       .exceptions	00000000 alt_irq_entry
08010c84 g     F .text	00000018 __fp_unlock_all
0801d01c g     O .rwdata	00000008 alt_fs_list
08015e3c g     F .text	0000026c check_file_name_for_FAT16_compliance
0801ebd0 g     O .bss	00000004 buffer_memory
08019ba4 g     F .text	0000006c alt_hostfs_write
04000020 g       *ABS*	00000000 __ram_exceptions_start
0801a384 g     F .text	00000050 alt_ic_isr_register
0801ebd4 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0801d08c g       *ABS*	00000000 _edata
0801f288 g       *ABS*	00000000 _end
0801ec88 g     O .bss	00000500 active_files
04000230 g       *ABS*	00000000 __ram_exceptions_end
08017770 g     F .text	00000148 copy_file_record_name_to_string
080194a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08015c8c g     F .text	000000ec Look_for_FAT16
0801a45c g     F .text	0000008c alt_ic_irq_disable
080127f0 g     F .text	0000007c __swrite
0801d014 g     O .rwdata	00000004 __malloc_trim_threshold
08010508 g     F .text	00000038 exit
08017b74 g     F .text	000003c8 alt_up_sd_card_find_next
0801177c g     F .text	000000c4 _fwalk_reent
08013b08 g     F .text	00000074 .hidden __modsi3
0801d018 g     O .rwdata	00000004 __ctype_ptr__
08014cd4 g     F .text	000000d8 Read_Sector_Data
0801fa00 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
08010c60 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
080104f0 g     F .text	0000000c atoi
0801b2a0 g     O .rodata	00000101 _ctype_
08010c9c g     F .text	000000f4 _fopen_r
08013da0 g     F .text	00000034 _exit
08019e5c g     F .text	0000012c alt_alarm_start
080183c8 g     F .text	00000390 alt_up_sd_card_read
080118b8 g     F .text	000001bc __smakebuf_r
0801abcc g     F .text	00000098 strlen
08014390 g     F .text	0000015c open
08014718 g     F .text	0000003c alt_putchar
0801a364 g     F .text	00000020 alt_icache_flush_all
0801d080 g     O .rwdata	00000004 alt_priority_mask
0801a3d4 g     F .text	00000088 alt_ic_irq_enable
0801d084 g     O .rwdata	00000008 alt_alarm_list
08013c9c g     F .text	000000d8 close
08014018 g     F .text	00000084 alt_load
08016160 g     F .text	0000029c match_file_record_to_name_ext
08010c64 g     F .text	00000004 __sinit_lock_acquire
08019c78 g     F .text	000001e4 alt_hostfs_fstat



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00420074 	movhi	at,2049
    ori r1, r1, %lo(_start)
 4000004:	08400014 	ori	at,at,0
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008200b4 	movhi	r2,2050
 4000140:	10bc6204 	addi	r2,r2,-3704
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008200b4 	movhi	r2,2050
 4000158:	10bc6204 	addi	r2,r2,-3704
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <_gp+0xfbfdb124>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <_gp+0xfbfdb118>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a6fb17 	ldw	r2,-25620(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a6fb17 	ldw	r2,-25620(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

08010000 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8010000:	06c20074 	movhi	sp,2049
    ori sp, sp, %lo(__alt_stack_pointer)
 8010004:	defe8014 	ori	sp,sp,64000
    movhi gp, %hi(_gp)
 8010008:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 801000c:	d6940214 	ori	gp,gp,20488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8010010:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8010014:	10bae614 	ori	r2,r2,60312

    movhi r3, %hi(__bss_end)
 8010018:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 801001c:	18fca214 	ori	r3,r3,62088

    beq r2, r3, 1f
 8010020:	10c00326 	beq	r2,r3,8010030 <_start+0x30>

0:
    stw zero, (r2)
 8010024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8010028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 801002c:	10fffd36 	bltu	r2,r3,8010024 <_gp+0xfffeb01c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8010030:	80140180 	call	8014018 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8010034:	80141b40 	call	80141b4 <alt_main>

08010038 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8010038:	003fff06 	br	8010038 <_gp+0xfffeb030>

0801003c <printImage>:
#define BUSY (0x0000)
#define READY (0x0001)
#define CONTINUE (0x0002)
#define DONE (0x0003)

void printImage(unsigned char image[BYTES_PER_IMAGE], int size) {
 801003c:	defff804 	addi	sp,sp,-32
 8010040:	dfc00715 	stw	ra,28(sp)
 8010044:	df000615 	stw	fp,24(sp)
 8010048:	df000604 	addi	fp,sp,24
 801004c:	e13ffe15 	stw	r4,-8(fp)
 8010050:	e17fff15 	stw	r5,-4(fp)
    alt_printf("Printing: \n");
 8010054:	010200b4 	movhi	r4,2050
 8010058:	212bc404 	addi	r4,r4,-20720
 801005c:	80144ec0 	call	80144ec <alt_printf>
    for(int i = 0; i < size; i++) {
 8010060:	e03ffa15 	stw	zero,-24(fp)
 8010064:	00001206 	br	80100b0 <printImage+0x74>
        int value = (int)image[i];
 8010068:	e0bffa17 	ldw	r2,-24(fp)
 801006c:	e0fffe17 	ldw	r3,-8(fp)
 8010070:	1885883a 	add	r2,r3,r2
 8010074:	10800003 	ldbu	r2,0(r2)
 8010078:	10803fcc 	andi	r2,r2,255
 801007c:	e0bffb15 	stw	r2,-20(fp)
        char buffer[5]; //String won't be more than 3 characters
        alt_printf("%s ", itoa(value, buffer, 10));
 8010080:	e0bffc04 	addi	r2,fp,-16
 8010084:	01800284 	movi	r6,10
 8010088:	100b883a 	mov	r5,r2
 801008c:	e13ffb17 	ldw	r4,-20(fp)
 8010090:	80118b40 	call	80118b4 <itoa>
 8010094:	100b883a 	mov	r5,r2
 8010098:	010200b4 	movhi	r4,2050
 801009c:	212bc704 	addi	r4,r4,-20708
 80100a0:	80144ec0 	call	80144ec <alt_printf>
#define CONTINUE (0x0002)
#define DONE (0x0003)

void printImage(unsigned char image[BYTES_PER_IMAGE], int size) {
    alt_printf("Printing: \n");
    for(int i = 0; i < size; i++) {
 80100a4:	e0bffa17 	ldw	r2,-24(fp)
 80100a8:	10800044 	addi	r2,r2,1
 80100ac:	e0bffa15 	stw	r2,-24(fp)
 80100b0:	e0fffa17 	ldw	r3,-24(fp)
 80100b4:	e0bfff17 	ldw	r2,-4(fp)
 80100b8:	18bfeb16 	blt	r3,r2,8010068 <_gp+0xfffeb060>
        int value = (int)image[i];
        char buffer[5]; //String won't be more than 3 characters
        alt_printf("%s ", itoa(value, buffer, 10));
    }
    alt_printf("\n");
 80100bc:	010200b4 	movhi	r4,2050
 80100c0:	212bc804 	addi	r4,r4,-20704
 80100c4:	80144ec0 	call	80144ec <alt_printf>
}
 80100c8:	0001883a 	nop
 80100cc:	e037883a 	mov	sp,fp
 80100d0:	dfc00117 	ldw	ra,4(sp)
 80100d4:	df000017 	ldw	fp,0(sp)
 80100d8:	dec00204 	addi	sp,sp,8
 80100dc:	f800283a 	ret

080100e0 <transferImage>:

void transferImage(unsigned char image[BYTES_PER_IMAGE]) {
 80100e0:	defff904 	addi	sp,sp,-28
 80100e4:	df000615 	stw	fp,24(sp)
 80100e8:	df000604 	addi	fp,sp,24
 80100ec:	e13fff15 	stw	r4,-4(fp)
	volatile unsigned char* fpgaControl = FPGA_CONTROL_LINE_ADDRESS;
 80100f0:	00820134 	movhi	r2,2052
 80100f4:	10840004 	addi	r2,r2,4096
 80100f8:	e0bffb15 	stw	r2,-20(fp)
	unsigned char* niosControl = NIOS_CONTROL_LINE_ADDRESS;
 80100fc:	00820134 	movhi	r2,2052
 8010100:	10840404 	addi	r2,r2,4112
 8010104:	e0bffc15 	stw	r2,-16(fp)
	unsigned int* imageRegister = IMAGE_BASE_ADDRESS;
 8010108:	00820134 	movhi	r2,2052
 801010c:	10840804 	addi	r2,r2,4128
 8010110:	e0bffd15 	stw	r2,-12(fp)

	for(int i = 0; i < BYTES_PER_IMAGE; i += BYTES_PER_TRANSFER) {
 8010114:	e03ffa15 	stw	zero,-24(fp)
 8010118:	00001d06 	br	8010190 <transferImage+0xb0>
		*niosControl = CONTINUE; //Continue signal
 801011c:	e0bffc17 	ldw	r2,-16(fp)
 8010120:	00c00084 	movi	r3,2
 8010124:	10c00005 	stb	r3,0(r2)
		while(*fpgaControl != READY) {} //Wait until the fpga is ready
 8010128:	0001883a 	nop
 801012c:	e0bffb17 	ldw	r2,-20(fp)
 8010130:	10800003 	ldbu	r2,0(r2)
 8010134:	10803fcc 	andi	r2,r2,255
 8010138:	10800058 	cmpnei	r2,r2,1
 801013c:	103ffb1e 	bne	r2,zero,801012c <_gp+0xfffeb124>
		unsigned int* pointer = &image[i]; // Point to the first of a group of four bytes
 8010140:	e0bffa17 	ldw	r2,-24(fp)
 8010144:	e0ffff17 	ldw	r3,-4(fp)
 8010148:	1885883a 	add	r2,r3,r2
 801014c:	e0bffe15 	stw	r2,-8(fp)
		*imageRegister = *pointer;
 8010150:	e0bffe17 	ldw	r2,-8(fp)
 8010154:	10c00017 	ldw	r3,0(r2)
 8010158:	e0bffd17 	ldw	r2,-12(fp)
 801015c:	10c00015 	stw	r3,0(r2)
		*niosControl = READY; //Start reading signal
 8010160:	e0bffc17 	ldw	r2,-16(fp)
 8010164:	00c00044 	movi	r3,1
 8010168:	10c00005 	stb	r3,0(r2)
		while(*fpgaControl != CONTINUE) {} //Wait until we start the read
 801016c:	0001883a 	nop
 8010170:	e0bffb17 	ldw	r2,-20(fp)
 8010174:	10800003 	ldbu	r2,0(r2)
 8010178:	10803fcc 	andi	r2,r2,255
 801017c:	10800098 	cmpnei	r2,r2,2
 8010180:	103ffb1e 	bne	r2,zero,8010170 <_gp+0xfffeb168>
void transferImage(unsigned char image[BYTES_PER_IMAGE]) {
	volatile unsigned char* fpgaControl = FPGA_CONTROL_LINE_ADDRESS;
	unsigned char* niosControl = NIOS_CONTROL_LINE_ADDRESS;
	unsigned int* imageRegister = IMAGE_BASE_ADDRESS;

	for(int i = 0; i < BYTES_PER_IMAGE; i += BYTES_PER_TRANSFER) {
 8010184:	e0bffa17 	ldw	r2,-24(fp)
 8010188:	10800104 	addi	r2,r2,4
 801018c:	e0bffa15 	stw	r2,-24(fp)
 8010190:	e0bffa17 	ldw	r2,-24(fp)
 8010194:	1080c410 	cmplti	r2,r2,784
 8010198:	103fe01e 	bne	r2,zero,801011c <_gp+0xfffeb114>
		unsigned int* pointer = &image[i]; // Point to the first of a group of four bytes
		*imageRegister = *pointer;
		*niosControl = READY; //Start reading signal
		while(*fpgaControl != CONTINUE) {} //Wait until we start the read
	}
	*niosControl = DONE;
 801019c:	e0bffc17 	ldw	r2,-16(fp)
 80101a0:	00c000c4 	movi	r3,3
 80101a4:	10c00005 	stb	r3,0(r2)
}
 80101a8:	0001883a 	nop
 80101ac:	e037883a 	mov	sp,fp
 80101b0:	df000017 	ldw	fp,0(sp)
 80101b4:	dec00104 	addi	sp,sp,4
 80101b8:	f800283a 	ret

080101bc <sdTest>:

void sdTest() {
 80101bc:	deff7b04 	addi	sp,sp,-532
 80101c0:	dfc08415 	stw	ra,528(sp)
 80101c4:	df008315 	stw	fp,524(sp)
 80101c8:	df008304 	addi	fp,sp,524
	alt_printf("SD Card Access Test\n");
 80101cc:	010200b4 	movhi	r4,2050
 80101d0:	212bc904 	addi	r4,r4,-20700
 80101d4:	80144ec0 	call	80144ec <alt_printf>

	alt_up_sd_card_dev *sd_card_dev = alt_up_sd_card_open_dev(ALTERA_UP_SD_CARD_AVALON_INTERFACE_0_NAME);
 80101d8:	010200b4 	movhi	r4,2050
 80101dc:	212bcf04 	addi	r4,r4,-20676
 80101e0:	80178b80 	call	80178b8 <alt_up_sd_card_open_dev>
 80101e4:	e0bf7e15 	stw	r2,-520(fp)
	short int sd_fileh;
	char buffer[512] = "WELCOME TO THE INTERFACE!!\r\n\0";
 80101e8:	008200b4 	movhi	r2,2050
 80101ec:	10ac0b04 	addi	r2,r2,-20436
 80101f0:	e0ff7f84 	addi	r3,fp,-514
 80101f4:	1009883a 	mov	r4,r2
 80101f8:	00800784 	movi	r2,30
 80101fc:	100d883a 	mov	r6,r2
 8010200:	200b883a 	mov	r5,r4
 8010204:	1809883a 	mov	r4,r3
 8010208:	80122800 	call	8012280 <memcpy>
 801020c:	e0bf8704 	addi	r2,fp,-484
 8010210:	00c07884 	movi	r3,482
 8010214:	180d883a 	mov	r6,r3
 8010218:	000b883a 	mov	r5,zero
 801021c:	1009883a 	mov	r4,r2
 8010220:	80123c80 	call	80123c8 <memset>
	if(sd_card_dev != 0) {
 8010224:	e0bf7e17 	ldw	r2,-520(fp)
 8010228:	10004326 	beq	r2,zero,8010338 <sdTest+0x17c>
		if(alt_up_sd_card_is_Present()) {
 801022c:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8010230:	10003d26 	beq	r2,zero,8010328 <sdTest+0x16c>
			if(alt_up_sd_card_is_FAT16())
 8010234:	8017a380 	call	8017a38 <alt_up_sd_card_is_FAT16>
 8010238:	10000426 	beq	r2,zero,801024c <sdTest+0x90>
				alt_printf("Card is FAT16\n");
 801023c:	010200b4 	movhi	r4,2050
 8010240:	212bda04 	addi	r4,r4,-20632
 8010244:	80144ec0 	call	80144ec <alt_printf>
 8010248:	00000306 	br	8010258 <sdTest+0x9c>
			else
				alt_printf("Card is not FAT16\n");
 801024c:	010200b4 	movhi	r4,2050
 8010250:	212bde04 	addi	r4,r4,-20616
 8010254:	80144ec0 	call	80144ec <alt_printf>

			sd_fileh = alt_up_sd_card_fopen("file.txt", 1);
 8010258:	01400044 	movi	r5,1
 801025c:	010200b4 	movhi	r4,2050
 8010260:	212be304 	addi	r4,r4,-20596
 8010264:	8017f3c0 	call	8017f3c <alt_up_sd_card_fopen>
 8010268:	e0bf7f0d 	sth	r2,-516(fp)

			if (sd_fileh < 0)
 801026c:	e0bf7f0f 	ldh	r2,-516(fp)
 8010270:	1000060e 	bge	r2,zero,801028c <sdTest+0xd0>
				alt_printf("Problem creating file. Error %i", sd_fileh);
 8010274:	e0bf7f0f 	ldh	r2,-516(fp)
 8010278:	100b883a 	mov	r5,r2
 801027c:	010200b4 	movhi	r4,2050
 8010280:	212be604 	addi	r4,r4,-20584
 8010284:	80144ec0 	call	80144ec <alt_printf>
			alt_printf("Card not present!\n");
		}
	} else {
		alt_printf("alt_up_sd_card_dev is 0\n");
	}
}
 8010288:	00002e06 	br	8010344 <sdTest+0x188>
			sd_fileh = alt_up_sd_card_fopen("file.txt", 1);

			if (sd_fileh < 0)
				alt_printf("Problem creating file. Error %i", sd_fileh);
			else {
				alt_printf("SD Accessed Successfully, writing data...");
 801028c:	010200b4 	movhi	r4,2050
 8010290:	212bee04 	addi	r4,r4,-20552
 8010294:	80144ec0 	call	80144ec <alt_printf>
				int index = 0;
 8010298:	e03f7d15 	stw	zero,-524(fp)
				while (buffer[index] != '\0') {
 801029c:	00000d06 	br	80102d4 <sdTest+0x118>
					alt_up_sd_card_write(sd_fileh, buffer[index]);
 80102a0:	e13f7f0f 	ldh	r4,-516(fp)
 80102a4:	e0ff7f84 	addi	r3,fp,-514
 80102a8:	e0bf7d17 	ldw	r2,-524(fp)
 80102ac:	1885883a 	add	r2,r3,r2
 80102b0:	10800003 	ldbu	r2,0(r2)
 80102b4:	10803fcc 	andi	r2,r2,255
 80102b8:	1080201c 	xori	r2,r2,128
 80102bc:	10bfe004 	addi	r2,r2,-128
 80102c0:	100b883a 	mov	r5,r2
 80102c4:	80187580 	call	8018758 <alt_up_sd_card_write>
					index = index + 1;
 80102c8:	e0bf7d17 	ldw	r2,-524(fp)
 80102cc:	10800044 	addi	r2,r2,1
 80102d0:	e0bf7d15 	stw	r2,-524(fp)
			if (sd_fileh < 0)
				alt_printf("Problem creating file. Error %i", sd_fileh);
			else {
				alt_printf("SD Accessed Successfully, writing data...");
				int index = 0;
				while (buffer[index] != '\0') {
 80102d4:	e0ff7f84 	addi	r3,fp,-514
 80102d8:	e0bf7d17 	ldw	r2,-524(fp)
 80102dc:	1885883a 	add	r2,r3,r2
 80102e0:	10800003 	ldbu	r2,0(r2)
 80102e4:	10803fcc 	andi	r2,r2,255
 80102e8:	1080201c 	xori	r2,r2,128
 80102ec:	10bfe004 	addi	r2,r2,-128
 80102f0:	103feb1e 	bne	r2,zero,80102a0 <_gp+0xfffeb298>
					alt_up_sd_card_write(sd_fileh, buffer[index]);
					index = index + 1;
				}
				alt_printf("Done!\n");
 80102f4:	010200b4 	movhi	r4,2050
 80102f8:	212bf904 	addi	r4,r4,-20508
 80102fc:	80144ec0 	call	80144ec <alt_printf>

				alt_printf("Closing File...");
 8010300:	010200b4 	movhi	r4,2050
 8010304:	212bfb04 	addi	r4,r4,-20500
 8010308:	80144ec0 	call	80144ec <alt_printf>
				alt_up_sd_card_fclose(sd_fileh);
 801030c:	e0bf7f0f 	ldh	r2,-516(fp)
 8010310:	1009883a 	mov	r4,r2
 8010314:	8018da40 	call	8018da4 <alt_up_sd_card_fclose>
				alt_printf("Done!\n");
 8010318:	010200b4 	movhi	r4,2050
 801031c:	212bf904 	addi	r4,r4,-20508
 8010320:	80144ec0 	call	80144ec <alt_printf>
			alt_printf("Card not present!\n");
		}
	} else {
		alt_printf("alt_up_sd_card_dev is 0\n");
	}
}
 8010324:	00000706 	br	8010344 <sdTest+0x188>
				alt_printf("Closing File...");
				alt_up_sd_card_fclose(sd_fileh);
				alt_printf("Done!\n");
			}
		} else {
			alt_printf("Card not present!\n");
 8010328:	010200b4 	movhi	r4,2050
 801032c:	212bff04 	addi	r4,r4,-20484
 8010330:	80144ec0 	call	80144ec <alt_printf>
		}
	} else {
		alt_printf("alt_up_sd_card_dev is 0\n");
	}
}
 8010334:	00000306 	br	8010344 <sdTest+0x188>
			}
		} else {
			alt_printf("Card not present!\n");
		}
	} else {
		alt_printf("alt_up_sd_card_dev is 0\n");
 8010338:	010200b4 	movhi	r4,2050
 801033c:	212c0404 	addi	r4,r4,-20464
 8010340:	80144ec0 	call	80144ec <alt_printf>
	}
}
 8010344:	0001883a 	nop
 8010348:	e037883a 	mov	sp,fp
 801034c:	dfc00117 	ldw	ra,4(sp)
 8010350:	df000017 	ldw	fp,0(sp)
 8010354:	dec00204 	addi	sp,sp,8
 8010358:	f800283a 	ret

0801035c <main>:


int main()
{
 801035c:	deff3204 	addi	sp,sp,-824
 8010360:	dfc0cd15 	stw	ra,820(sp)
 8010364:	df00cc15 	stw	fp,816(sp)
 8010368:	dc00cb15 	stw	r16,812(sp)
 801036c:	df00cc04 	addi	fp,sp,816
	sdTest();
 8010370:	80101bc0 	call	80101bc <sdTest>
	alt_printf("First Starting...\n");
 8010374:	010200b4 	movhi	r4,2050
 8010378:	212c8b04 	addi	r4,r4,-19924
 801037c:	80144ec0 	call	80144ec <alt_printf>
	FILE* fp_ascii = NULL;
 8010380:	e03f3715 	stw	zero,-804(fp)
	fp_ascii = fopen ("/mnt/host/test.txt", "r");
 8010384:	014200b4 	movhi	r5,2050
 8010388:	296c9004 	addi	r5,r5,-19904
 801038c:	010200b4 	movhi	r4,2050
 8010390:	212c9104 	addi	r4,r4,-19900
 8010394:	8010d900 	call	8010d90 <fopen>
 8010398:	e0bf3715 	stw	r2,-804(fp)
	if (fp_ascii == NULL)
 801039c:	e0bf3717 	ldw	r2,-804(fp)
 80103a0:	1000051e 	bne	r2,zero,80103b8 <main+0x5c>
	{
	 alt_printf ("Cannot open file for reading\n");
 80103a4:	010200b4 	movhi	r4,2050
 80103a8:	212c9604 	addi	r4,r4,-19880
 80103ac:	80144ec0 	call	80144ec <alt_printf>
	 exit(1);
 80103b0:	01000044 	movi	r4,1
 80103b4:	80105080 	call	8010508 <exit>
	}
	char* line;
	size_t lineSize;
	ssize_t lineLength;
	unsigned char image[BYTES_PER_IMAGE];
	int pixelPos = 0;
 80103b8:	e03f3415 	stw	zero,-816(fp)
	int imageCount = 0;
 80103bc:	e03f3515 	stw	zero,-812(fp)
	while((lineLength = __getline(&line, &lineSize, fp_ascii)) != -1) {
 80103c0:	00003106 	br	8010488 <main+0x12c>
		char *pch;
		pch = strtok(line, " ");
 80103c4:	e0bf3917 	ldw	r2,-796(fp)
 80103c8:	014200b4 	movhi	r5,2050
 80103cc:	296c9e04 	addi	r5,r5,-19848
 80103d0:	1009883a 	mov	r4,r2
 80103d4:	80128d00 	call	80128d0 <strtok>
 80103d8:	e0bf3615 	stw	r2,-808(fp)
		image[pixelPos++] = (unsigned char)atoi(pch);
 80103dc:	e43f3417 	ldw	r16,-816(fp)
 80103e0:	80800044 	addi	r2,r16,1
 80103e4:	e0bf3415 	stw	r2,-816(fp)
 80103e8:	e13f3617 	ldw	r4,-808(fp)
 80103ec:	80104f00 	call	80104f0 <atoi>
 80103f0:	1007883a 	mov	r3,r2
 80103f4:	e0bf3b04 	addi	r2,fp,-788
 80103f8:	1405883a 	add	r2,r2,r16
 80103fc:	10c00005 	stb	r3,0(r2)
		while (pch != NULL && pixelPos < BYTES_PER_IMAGE) {
 8010400:	00001006 	br	8010444 <main+0xe8>
			pch = strtok(NULL, " ");
 8010404:	014200b4 	movhi	r5,2050
 8010408:	296c9e04 	addi	r5,r5,-19848
 801040c:	0009883a 	mov	r4,zero
 8010410:	80128d00 	call	80128d0 <strtok>
 8010414:	e0bf3615 	stw	r2,-808(fp)
			if(pch != NULL) {
 8010418:	e0bf3617 	ldw	r2,-808(fp)
 801041c:	10000926 	beq	r2,zero,8010444 <main+0xe8>
				image[pixelPos++] = (unsigned char) atoi(pch);
 8010420:	e43f3417 	ldw	r16,-816(fp)
 8010424:	80800044 	addi	r2,r16,1
 8010428:	e0bf3415 	stw	r2,-816(fp)
 801042c:	e13f3617 	ldw	r4,-808(fp)
 8010430:	80104f00 	call	80104f0 <atoi>
 8010434:	1007883a 	mov	r3,r2
 8010438:	e0bf3b04 	addi	r2,fp,-788
 801043c:	1405883a 	add	r2,r2,r16
 8010440:	10c00005 	stb	r3,0(r2)
	int imageCount = 0;
	while((lineLength = __getline(&line, &lineSize, fp_ascii)) != -1) {
		char *pch;
		pch = strtok(line, " ");
		image[pixelPos++] = (unsigned char)atoi(pch);
		while (pch != NULL && pixelPos < BYTES_PER_IMAGE) {
 8010444:	e0bf3617 	ldw	r2,-808(fp)
 8010448:	10000326 	beq	r2,zero,8010458 <main+0xfc>
 801044c:	e0bf3417 	ldw	r2,-816(fp)
 8010450:	1080c410 	cmplti	r2,r2,784
 8010454:	103feb1e 	bne	r2,zero,8010404 <_gp+0xfffeb3fc>
			pch = strtok(NULL, " ");
			if(pch != NULL) {
				image[pixelPos++] = (unsigned char) atoi(pch);
			}
		}
		if(pixelPos != BYTES_PER_IMAGE) {
 8010458:	e0bf3417 	ldw	r2,-816(fp)
 801045c:	1080c420 	cmpeqi	r2,r2,784
 8010460:	1000021e 	bne	r2,zero,801046c <main+0x110>
			return 21; //Have it return an error
 8010464:	00800544 	movi	r2,21
 8010468:	00001b06 	br	80104d8 <main+0x17c>
		}
		//printImage(image, BYTES_PER_IMAGE);
		transferImage(image);
 801046c:	e0bf3b04 	addi	r2,fp,-788
 8010470:	1009883a 	mov	r4,r2
 8010474:	80100e00 	call	80100e0 <transferImage>
		pixelPos = 0;
 8010478:	e03f3415 	stw	zero,-816(fp)
		imageCount++;
 801047c:	e0bf3517 	ldw	r2,-812(fp)
 8010480:	10800044 	addi	r2,r2,1
 8010484:	e0bf3515 	stw	r2,-812(fp)
	size_t lineSize;
	ssize_t lineLength;
	unsigned char image[BYTES_PER_IMAGE];
	int pixelPos = 0;
	int imageCount = 0;
	while((lineLength = __getline(&line, &lineSize, fp_ascii)) != -1) {
 8010488:	e0ff3a04 	addi	r3,fp,-792
 801048c:	e0bf3904 	addi	r2,fp,-796
 8010490:	e1bf3717 	ldw	r6,-804(fp)
 8010494:	180b883a 	mov	r5,r3
 8010498:	1009883a 	mov	r4,r2
 801049c:	80118400 	call	8011840 <__getline>
 80104a0:	e0bf3815 	stw	r2,-800(fp)
 80104a4:	e0bf3817 	ldw	r2,-800(fp)
 80104a8:	10bfffd8 	cmpnei	r2,r2,-1
 80104ac:	103fc51e 	bne	r2,zero,80103c4 <_gp+0xfffeb3bc>
		//printImage(image, BYTES_PER_IMAGE);
		transferImage(image);
		pixelPos = 0;
		imageCount++;
	}
	alt_printf("Number of images: %d", imageCount);
 80104b0:	e17f3517 	ldw	r5,-812(fp)
 80104b4:	010200b4 	movhi	r4,2050
 80104b8:	212c9f04 	addi	r4,r4,-19844
 80104bc:	80144ec0 	call	80144ec <alt_printf>
	fclose(fp_ascii);
 80104c0:	e13f3717 	ldw	r4,-804(fp)
 80104c4:	80106300 	call	8010630 <fclose>
	alt_printf("Done!");
 80104c8:	010200b4 	movhi	r4,2050
 80104cc:	212ca504 	addi	r4,r4,-19820
 80104d0:	80144ec0 	call	80144ec <alt_printf>
	while(1){}
 80104d4:	003fff06 	br	80104d4 <_gp+0xfffeb4cc>

}
 80104d8:	e6ffff04 	addi	sp,fp,-4
 80104dc:	dfc00217 	ldw	ra,8(sp)
 80104e0:	df000117 	ldw	fp,4(sp)
 80104e4:	dc000017 	ldw	r16,0(sp)
 80104e8:	dec00304 	addi	sp,sp,12
 80104ec:	f800283a 	ret

080104f0 <atoi>:
 80104f0:	01800284 	movi	r6,10
 80104f4:	000b883a 	mov	r5,zero
 80104f8:	8012be41 	jmpi	8012be4 <strtol>

080104fc <_atoi_r>:
 80104fc:	01c00284 	movi	r7,10
 8010500:	000d883a 	mov	r6,zero
 8010504:	801298c1 	jmpi	801298c <_strtol_r>

08010508 <exit>:
 8010508:	defffe04 	addi	sp,sp,-8
 801050c:	000b883a 	mov	r5,zero
 8010510:	dc000015 	stw	r16,0(sp)
 8010514:	dfc00115 	stw	ra,4(sp)
 8010518:	2021883a 	mov	r16,r4
 801051c:	8012e100 	call	8012e10 <__call_exitprocs>
 8010520:	008200b4 	movhi	r2,2050
 8010524:	10b40204 	addi	r2,r2,-12280
 8010528:	11000017 	ldw	r4,0(r2)
 801052c:	20800f17 	ldw	r2,60(r4)
 8010530:	10000126 	beq	r2,zero,8010538 <exit+0x30>
 8010534:	103ee83a 	callr	r2
 8010538:	8009883a 	mov	r4,r16
 801053c:	8013da00 	call	8013da0 <_exit>

08010540 <_fclose_r>:
 8010540:	28003926 	beq	r5,zero,8010628 <_fclose_r+0xe8>
 8010544:	defffc04 	addi	sp,sp,-16
 8010548:	dc400115 	stw	r17,4(sp)
 801054c:	dc000015 	stw	r16,0(sp)
 8010550:	dfc00315 	stw	ra,12(sp)
 8010554:	dc800215 	stw	r18,8(sp)
 8010558:	2023883a 	mov	r17,r4
 801055c:	2821883a 	mov	r16,r5
 8010560:	20000226 	beq	r4,zero,801056c <_fclose_r+0x2c>
 8010564:	20800e17 	ldw	r2,56(r4)
 8010568:	10002726 	beq	r2,zero,8010608 <_fclose_r+0xc8>
 801056c:	8080030f 	ldh	r2,12(r16)
 8010570:	1000071e 	bne	r2,zero,8010590 <_fclose_r+0x50>
 8010574:	0005883a 	mov	r2,zero
 8010578:	dfc00317 	ldw	ra,12(sp)
 801057c:	dc800217 	ldw	r18,8(sp)
 8010580:	dc400117 	ldw	r17,4(sp)
 8010584:	dc000017 	ldw	r16,0(sp)
 8010588:	dec00404 	addi	sp,sp,16
 801058c:	f800283a 	ret
 8010590:	800b883a 	mov	r5,r16
 8010594:	8809883a 	mov	r4,r17
 8010598:	80106440 	call	8010644 <__sflush_r>
 801059c:	1025883a 	mov	r18,r2
 80105a0:	80800b17 	ldw	r2,44(r16)
 80105a4:	10000426 	beq	r2,zero,80105b8 <_fclose_r+0x78>
 80105a8:	81400717 	ldw	r5,28(r16)
 80105ac:	8809883a 	mov	r4,r17
 80105b0:	103ee83a 	callr	r2
 80105b4:	10001616 	blt	r2,zero,8010610 <_fclose_r+0xd0>
 80105b8:	8080030b 	ldhu	r2,12(r16)
 80105bc:	1080200c 	andi	r2,r2,128
 80105c0:	1000151e 	bne	r2,zero,8010618 <_fclose_r+0xd8>
 80105c4:	81400c17 	ldw	r5,48(r16)
 80105c8:	28000526 	beq	r5,zero,80105e0 <_fclose_r+0xa0>
 80105cc:	80801004 	addi	r2,r16,64
 80105d0:	28800226 	beq	r5,r2,80105dc <_fclose_r+0x9c>
 80105d4:	8809883a 	mov	r4,r17
 80105d8:	8010ecc0 	call	8010ecc <_free_r>
 80105dc:	80000c15 	stw	zero,48(r16)
 80105e0:	81401117 	ldw	r5,68(r16)
 80105e4:	28000326 	beq	r5,zero,80105f4 <_fclose_r+0xb4>
 80105e8:	8809883a 	mov	r4,r17
 80105ec:	8010ecc0 	call	8010ecc <_free_r>
 80105f0:	80001115 	stw	zero,68(r16)
 80105f4:	8010c5c0 	call	8010c5c <__sfp_lock_acquire>
 80105f8:	8000030d 	sth	zero,12(r16)
 80105fc:	8010c600 	call	8010c60 <__sfp_lock_release>
 8010600:	9005883a 	mov	r2,r18
 8010604:	003fdc06 	br	8010578 <_gp+0xfffeb570>
 8010608:	8010c4c0 	call	8010c4c <__sinit>
 801060c:	003fd706 	br	801056c <_gp+0xfffeb564>
 8010610:	04bfffc4 	movi	r18,-1
 8010614:	003fe806 	br	80105b8 <_gp+0xfffeb5b0>
 8010618:	81400417 	ldw	r5,16(r16)
 801061c:	8809883a 	mov	r4,r17
 8010620:	8010ecc0 	call	8010ecc <_free_r>
 8010624:	003fe706 	br	80105c4 <_gp+0xfffeb5bc>
 8010628:	0005883a 	mov	r2,zero
 801062c:	f800283a 	ret

08010630 <fclose>:
 8010630:	008200b4 	movhi	r2,2050
 8010634:	10b40304 	addi	r2,r2,-12276
 8010638:	200b883a 	mov	r5,r4
 801063c:	11000017 	ldw	r4,0(r2)
 8010640:	80105401 	jmpi	8010540 <_fclose_r>

08010644 <__sflush_r>:
 8010644:	2880030b 	ldhu	r2,12(r5)
 8010648:	defffb04 	addi	sp,sp,-20
 801064c:	dcc00315 	stw	r19,12(sp)
 8010650:	dc400115 	stw	r17,4(sp)
 8010654:	dfc00415 	stw	ra,16(sp)
 8010658:	dc800215 	stw	r18,8(sp)
 801065c:	dc000015 	stw	r16,0(sp)
 8010660:	10c0020c 	andi	r3,r2,8
 8010664:	2823883a 	mov	r17,r5
 8010668:	2027883a 	mov	r19,r4
 801066c:	1800311e 	bne	r3,zero,8010734 <__sflush_r+0xf0>
 8010670:	28c00117 	ldw	r3,4(r5)
 8010674:	10820014 	ori	r2,r2,2048
 8010678:	2880030d 	sth	r2,12(r5)
 801067c:	00c04b0e 	bge	zero,r3,80107ac <__sflush_r+0x168>
 8010680:	8a000a17 	ldw	r8,40(r17)
 8010684:	40002326 	beq	r8,zero,8010714 <__sflush_r+0xd0>
 8010688:	9c000017 	ldw	r16,0(r19)
 801068c:	10c4000c 	andi	r3,r2,4096
 8010690:	98000015 	stw	zero,0(r19)
 8010694:	18004826 	beq	r3,zero,80107b8 <__sflush_r+0x174>
 8010698:	89801417 	ldw	r6,80(r17)
 801069c:	10c0010c 	andi	r3,r2,4
 80106a0:	18000626 	beq	r3,zero,80106bc <__sflush_r+0x78>
 80106a4:	88c00117 	ldw	r3,4(r17)
 80106a8:	88800c17 	ldw	r2,48(r17)
 80106ac:	30cdc83a 	sub	r6,r6,r3
 80106b0:	10000226 	beq	r2,zero,80106bc <__sflush_r+0x78>
 80106b4:	88800f17 	ldw	r2,60(r17)
 80106b8:	308dc83a 	sub	r6,r6,r2
 80106bc:	89400717 	ldw	r5,28(r17)
 80106c0:	000f883a 	mov	r7,zero
 80106c4:	9809883a 	mov	r4,r19
 80106c8:	403ee83a 	callr	r8
 80106cc:	00ffffc4 	movi	r3,-1
 80106d0:	10c04426 	beq	r2,r3,80107e4 <__sflush_r+0x1a0>
 80106d4:	88c0030b 	ldhu	r3,12(r17)
 80106d8:	89000417 	ldw	r4,16(r17)
 80106dc:	88000115 	stw	zero,4(r17)
 80106e0:	197dffcc 	andi	r5,r3,63487
 80106e4:	8940030d 	sth	r5,12(r17)
 80106e8:	89000015 	stw	r4,0(r17)
 80106ec:	18c4000c 	andi	r3,r3,4096
 80106f0:	18002c1e 	bne	r3,zero,80107a4 <__sflush_r+0x160>
 80106f4:	89400c17 	ldw	r5,48(r17)
 80106f8:	9c000015 	stw	r16,0(r19)
 80106fc:	28000526 	beq	r5,zero,8010714 <__sflush_r+0xd0>
 8010700:	88801004 	addi	r2,r17,64
 8010704:	28800226 	beq	r5,r2,8010710 <__sflush_r+0xcc>
 8010708:	9809883a 	mov	r4,r19
 801070c:	8010ecc0 	call	8010ecc <_free_r>
 8010710:	88000c15 	stw	zero,48(r17)
 8010714:	0005883a 	mov	r2,zero
 8010718:	dfc00417 	ldw	ra,16(sp)
 801071c:	dcc00317 	ldw	r19,12(sp)
 8010720:	dc800217 	ldw	r18,8(sp)
 8010724:	dc400117 	ldw	r17,4(sp)
 8010728:	dc000017 	ldw	r16,0(sp)
 801072c:	dec00504 	addi	sp,sp,20
 8010730:	f800283a 	ret
 8010734:	2c800417 	ldw	r18,16(r5)
 8010738:	903ff626 	beq	r18,zero,8010714 <_gp+0xfffeb70c>
 801073c:	2c000017 	ldw	r16,0(r5)
 8010740:	108000cc 	andi	r2,r2,3
 8010744:	2c800015 	stw	r18,0(r5)
 8010748:	84a1c83a 	sub	r16,r16,r18
 801074c:	1000131e 	bne	r2,zero,801079c <__sflush_r+0x158>
 8010750:	28800517 	ldw	r2,20(r5)
 8010754:	88800215 	stw	r2,8(r17)
 8010758:	04000316 	blt	zero,r16,8010768 <__sflush_r+0x124>
 801075c:	003fed06 	br	8010714 <_gp+0xfffeb70c>
 8010760:	90a5883a 	add	r18,r18,r2
 8010764:	043feb0e 	bge	zero,r16,8010714 <_gp+0xfffeb70c>
 8010768:	88800917 	ldw	r2,36(r17)
 801076c:	89400717 	ldw	r5,28(r17)
 8010770:	800f883a 	mov	r7,r16
 8010774:	900d883a 	mov	r6,r18
 8010778:	9809883a 	mov	r4,r19
 801077c:	103ee83a 	callr	r2
 8010780:	80a1c83a 	sub	r16,r16,r2
 8010784:	00bff616 	blt	zero,r2,8010760 <_gp+0xfffeb758>
 8010788:	88c0030b 	ldhu	r3,12(r17)
 801078c:	00bfffc4 	movi	r2,-1
 8010790:	18c01014 	ori	r3,r3,64
 8010794:	88c0030d 	sth	r3,12(r17)
 8010798:	003fdf06 	br	8010718 <_gp+0xfffeb710>
 801079c:	0005883a 	mov	r2,zero
 80107a0:	003fec06 	br	8010754 <_gp+0xfffeb74c>
 80107a4:	88801415 	stw	r2,80(r17)
 80107a8:	003fd206 	br	80106f4 <_gp+0xfffeb6ec>
 80107ac:	28c00f17 	ldw	r3,60(r5)
 80107b0:	00ffb316 	blt	zero,r3,8010680 <_gp+0xfffeb678>
 80107b4:	003fd706 	br	8010714 <_gp+0xfffeb70c>
 80107b8:	89400717 	ldw	r5,28(r17)
 80107bc:	000d883a 	mov	r6,zero
 80107c0:	01c00044 	movi	r7,1
 80107c4:	9809883a 	mov	r4,r19
 80107c8:	403ee83a 	callr	r8
 80107cc:	100d883a 	mov	r6,r2
 80107d0:	00bfffc4 	movi	r2,-1
 80107d4:	30801426 	beq	r6,r2,8010828 <__sflush_r+0x1e4>
 80107d8:	8880030b 	ldhu	r2,12(r17)
 80107dc:	8a000a17 	ldw	r8,40(r17)
 80107e0:	003fae06 	br	801069c <_gp+0xfffeb694>
 80107e4:	98c00017 	ldw	r3,0(r19)
 80107e8:	183fba26 	beq	r3,zero,80106d4 <_gp+0xfffeb6cc>
 80107ec:	01000744 	movi	r4,29
 80107f0:	19000626 	beq	r3,r4,801080c <__sflush_r+0x1c8>
 80107f4:	01000584 	movi	r4,22
 80107f8:	19000426 	beq	r3,r4,801080c <__sflush_r+0x1c8>
 80107fc:	88c0030b 	ldhu	r3,12(r17)
 8010800:	18c01014 	ori	r3,r3,64
 8010804:	88c0030d 	sth	r3,12(r17)
 8010808:	003fc306 	br	8010718 <_gp+0xfffeb710>
 801080c:	8880030b 	ldhu	r2,12(r17)
 8010810:	88c00417 	ldw	r3,16(r17)
 8010814:	88000115 	stw	zero,4(r17)
 8010818:	10bdffcc 	andi	r2,r2,63487
 801081c:	8880030d 	sth	r2,12(r17)
 8010820:	88c00015 	stw	r3,0(r17)
 8010824:	003fb306 	br	80106f4 <_gp+0xfffeb6ec>
 8010828:	98800017 	ldw	r2,0(r19)
 801082c:	103fea26 	beq	r2,zero,80107d8 <_gp+0xfffeb7d0>
 8010830:	00c00744 	movi	r3,29
 8010834:	10c00226 	beq	r2,r3,8010840 <__sflush_r+0x1fc>
 8010838:	00c00584 	movi	r3,22
 801083c:	10c0031e 	bne	r2,r3,801084c <__sflush_r+0x208>
 8010840:	9c000015 	stw	r16,0(r19)
 8010844:	0005883a 	mov	r2,zero
 8010848:	003fb306 	br	8010718 <_gp+0xfffeb710>
 801084c:	88c0030b 	ldhu	r3,12(r17)
 8010850:	3005883a 	mov	r2,r6
 8010854:	18c01014 	ori	r3,r3,64
 8010858:	88c0030d 	sth	r3,12(r17)
 801085c:	003fae06 	br	8010718 <_gp+0xfffeb710>

08010860 <_fflush_r>:
 8010860:	defffd04 	addi	sp,sp,-12
 8010864:	dc000115 	stw	r16,4(sp)
 8010868:	dfc00215 	stw	ra,8(sp)
 801086c:	2021883a 	mov	r16,r4
 8010870:	20000226 	beq	r4,zero,801087c <_fflush_r+0x1c>
 8010874:	20800e17 	ldw	r2,56(r4)
 8010878:	10000c26 	beq	r2,zero,80108ac <_fflush_r+0x4c>
 801087c:	2880030f 	ldh	r2,12(r5)
 8010880:	1000051e 	bne	r2,zero,8010898 <_fflush_r+0x38>
 8010884:	0005883a 	mov	r2,zero
 8010888:	dfc00217 	ldw	ra,8(sp)
 801088c:	dc000117 	ldw	r16,4(sp)
 8010890:	dec00304 	addi	sp,sp,12
 8010894:	f800283a 	ret
 8010898:	8009883a 	mov	r4,r16
 801089c:	dfc00217 	ldw	ra,8(sp)
 80108a0:	dc000117 	ldw	r16,4(sp)
 80108a4:	dec00304 	addi	sp,sp,12
 80108a8:	80106441 	jmpi	8010644 <__sflush_r>
 80108ac:	d9400015 	stw	r5,0(sp)
 80108b0:	8010c4c0 	call	8010c4c <__sinit>
 80108b4:	d9400017 	ldw	r5,0(sp)
 80108b8:	003ff006 	br	801087c <_gp+0xfffeb874>

080108bc <fflush>:
 80108bc:	20000526 	beq	r4,zero,80108d4 <fflush+0x18>
 80108c0:	008200b4 	movhi	r2,2050
 80108c4:	10b40304 	addi	r2,r2,-12276
 80108c8:	200b883a 	mov	r5,r4
 80108cc:	11000017 	ldw	r4,0(r2)
 80108d0:	80108601 	jmpi	8010860 <_fflush_r>
 80108d4:	008200b4 	movhi	r2,2050
 80108d8:	10b40204 	addi	r2,r2,-12280
 80108dc:	11000017 	ldw	r4,0(r2)
 80108e0:	01420074 	movhi	r5,2049
 80108e4:	29421804 	addi	r5,r5,2144
 80108e8:	801177c1 	jmpi	801177c <_fwalk_reent>

080108ec <__fp_unlock>:
 80108ec:	0005883a 	mov	r2,zero
 80108f0:	f800283a 	ret

080108f4 <_cleanup_r>:
 80108f4:	01420074 	movhi	r5,2049
 80108f8:	29415004 	addi	r5,r5,1344
 80108fc:	801177c1 	jmpi	801177c <_fwalk_reent>

08010900 <__sinit.part.1>:
 8010900:	defff704 	addi	sp,sp,-36
 8010904:	00c20074 	movhi	r3,2049
 8010908:	dfc00815 	stw	ra,32(sp)
 801090c:	ddc00715 	stw	r23,28(sp)
 8010910:	dd800615 	stw	r22,24(sp)
 8010914:	dd400515 	stw	r21,20(sp)
 8010918:	dd000415 	stw	r20,16(sp)
 801091c:	dcc00315 	stw	r19,12(sp)
 8010920:	dc800215 	stw	r18,8(sp)
 8010924:	dc400115 	stw	r17,4(sp)
 8010928:	dc000015 	stw	r16,0(sp)
 801092c:	18c23d04 	addi	r3,r3,2292
 8010930:	24000117 	ldw	r16,4(r4)
 8010934:	20c00f15 	stw	r3,60(r4)
 8010938:	2080bb04 	addi	r2,r4,748
 801093c:	00c000c4 	movi	r3,3
 8010940:	20c0b915 	stw	r3,740(r4)
 8010944:	2080ba15 	stw	r2,744(r4)
 8010948:	2000b815 	stw	zero,736(r4)
 801094c:	05c00204 	movi	r23,8
 8010950:	00800104 	movi	r2,4
 8010954:	2025883a 	mov	r18,r4
 8010958:	b80d883a 	mov	r6,r23
 801095c:	81001704 	addi	r4,r16,92
 8010960:	000b883a 	mov	r5,zero
 8010964:	80000015 	stw	zero,0(r16)
 8010968:	80000115 	stw	zero,4(r16)
 801096c:	80000215 	stw	zero,8(r16)
 8010970:	8080030d 	sth	r2,12(r16)
 8010974:	80001915 	stw	zero,100(r16)
 8010978:	8000038d 	sth	zero,14(r16)
 801097c:	80000415 	stw	zero,16(r16)
 8010980:	80000515 	stw	zero,20(r16)
 8010984:	80000615 	stw	zero,24(r16)
 8010988:	80123c80 	call	80123c8 <memset>
 801098c:	05820074 	movhi	r22,2049
 8010990:	94400217 	ldw	r17,8(r18)
 8010994:	05420074 	movhi	r21,2049
 8010998:	05020074 	movhi	r20,2049
 801099c:	04c20074 	movhi	r19,2049
 80109a0:	b589e504 	addi	r22,r22,10132
 80109a4:	ad49fc04 	addi	r21,r21,10224
 80109a8:	a50a1b04 	addi	r20,r20,10348
 80109ac:	9cca3204 	addi	r19,r19,10440
 80109b0:	85800815 	stw	r22,32(r16)
 80109b4:	85400915 	stw	r21,36(r16)
 80109b8:	85000a15 	stw	r20,40(r16)
 80109bc:	84c00b15 	stw	r19,44(r16)
 80109c0:	84000715 	stw	r16,28(r16)
 80109c4:	00800284 	movi	r2,10
 80109c8:	8880030d 	sth	r2,12(r17)
 80109cc:	00800044 	movi	r2,1
 80109d0:	b80d883a 	mov	r6,r23
 80109d4:	89001704 	addi	r4,r17,92
 80109d8:	000b883a 	mov	r5,zero
 80109dc:	88000015 	stw	zero,0(r17)
 80109e0:	88000115 	stw	zero,4(r17)
 80109e4:	88000215 	stw	zero,8(r17)
 80109e8:	88001915 	stw	zero,100(r17)
 80109ec:	8880038d 	sth	r2,14(r17)
 80109f0:	88000415 	stw	zero,16(r17)
 80109f4:	88000515 	stw	zero,20(r17)
 80109f8:	88000615 	stw	zero,24(r17)
 80109fc:	80123c80 	call	80123c8 <memset>
 8010a00:	94000317 	ldw	r16,12(r18)
 8010a04:	00800484 	movi	r2,18
 8010a08:	8c400715 	stw	r17,28(r17)
 8010a0c:	8d800815 	stw	r22,32(r17)
 8010a10:	8d400915 	stw	r21,36(r17)
 8010a14:	8d000a15 	stw	r20,40(r17)
 8010a18:	8cc00b15 	stw	r19,44(r17)
 8010a1c:	8080030d 	sth	r2,12(r16)
 8010a20:	00800084 	movi	r2,2
 8010a24:	80000015 	stw	zero,0(r16)
 8010a28:	80000115 	stw	zero,4(r16)
 8010a2c:	80000215 	stw	zero,8(r16)
 8010a30:	80001915 	stw	zero,100(r16)
 8010a34:	8080038d 	sth	r2,14(r16)
 8010a38:	80000415 	stw	zero,16(r16)
 8010a3c:	80000515 	stw	zero,20(r16)
 8010a40:	80000615 	stw	zero,24(r16)
 8010a44:	b80d883a 	mov	r6,r23
 8010a48:	000b883a 	mov	r5,zero
 8010a4c:	81001704 	addi	r4,r16,92
 8010a50:	80123c80 	call	80123c8 <memset>
 8010a54:	00800044 	movi	r2,1
 8010a58:	84000715 	stw	r16,28(r16)
 8010a5c:	85800815 	stw	r22,32(r16)
 8010a60:	85400915 	stw	r21,36(r16)
 8010a64:	85000a15 	stw	r20,40(r16)
 8010a68:	84c00b15 	stw	r19,44(r16)
 8010a6c:	90800e15 	stw	r2,56(r18)
 8010a70:	dfc00817 	ldw	ra,32(sp)
 8010a74:	ddc00717 	ldw	r23,28(sp)
 8010a78:	dd800617 	ldw	r22,24(sp)
 8010a7c:	dd400517 	ldw	r21,20(sp)
 8010a80:	dd000417 	ldw	r20,16(sp)
 8010a84:	dcc00317 	ldw	r19,12(sp)
 8010a88:	dc800217 	ldw	r18,8(sp)
 8010a8c:	dc400117 	ldw	r17,4(sp)
 8010a90:	dc000017 	ldw	r16,0(sp)
 8010a94:	dec00904 	addi	sp,sp,36
 8010a98:	f800283a 	ret

08010a9c <__fp_lock>:
 8010a9c:	0005883a 	mov	r2,zero
 8010aa0:	f800283a 	ret

08010aa4 <__sfmoreglue>:
 8010aa4:	defffc04 	addi	sp,sp,-16
 8010aa8:	dc800215 	stw	r18,8(sp)
 8010aac:	2825883a 	mov	r18,r5
 8010ab0:	dc000015 	stw	r16,0(sp)
 8010ab4:	01401a04 	movi	r5,104
 8010ab8:	2021883a 	mov	r16,r4
 8010abc:	913fffc4 	addi	r4,r18,-1
 8010ac0:	dfc00315 	stw	ra,12(sp)
 8010ac4:	dc400115 	stw	r17,4(sp)
 8010ac8:	8013c380 	call	8013c38 <__mulsi3>
 8010acc:	8009883a 	mov	r4,r16
 8010ad0:	11401d04 	addi	r5,r2,116
 8010ad4:	1023883a 	mov	r17,r2
 8010ad8:	8011a740 	call	8011a74 <_malloc_r>
 8010adc:	1021883a 	mov	r16,r2
 8010ae0:	10000726 	beq	r2,zero,8010b00 <__sfmoreglue+0x5c>
 8010ae4:	11000304 	addi	r4,r2,12
 8010ae8:	10000015 	stw	zero,0(r2)
 8010aec:	14800115 	stw	r18,4(r2)
 8010af0:	11000215 	stw	r4,8(r2)
 8010af4:	89801a04 	addi	r6,r17,104
 8010af8:	000b883a 	mov	r5,zero
 8010afc:	80123c80 	call	80123c8 <memset>
 8010b00:	8005883a 	mov	r2,r16
 8010b04:	dfc00317 	ldw	ra,12(sp)
 8010b08:	dc800217 	ldw	r18,8(sp)
 8010b0c:	dc400117 	ldw	r17,4(sp)
 8010b10:	dc000017 	ldw	r16,0(sp)
 8010b14:	dec00404 	addi	sp,sp,16
 8010b18:	f800283a 	ret

08010b1c <__sfp>:
 8010b1c:	defffb04 	addi	sp,sp,-20
 8010b20:	dc000015 	stw	r16,0(sp)
 8010b24:	040200b4 	movhi	r16,2050
 8010b28:	84340204 	addi	r16,r16,-12280
 8010b2c:	dcc00315 	stw	r19,12(sp)
 8010b30:	2027883a 	mov	r19,r4
 8010b34:	81000017 	ldw	r4,0(r16)
 8010b38:	dfc00415 	stw	ra,16(sp)
 8010b3c:	dc800215 	stw	r18,8(sp)
 8010b40:	20800e17 	ldw	r2,56(r4)
 8010b44:	dc400115 	stw	r17,4(sp)
 8010b48:	1000021e 	bne	r2,zero,8010b54 <__sfp+0x38>
 8010b4c:	80109000 	call	8010900 <__sinit.part.1>
 8010b50:	81000017 	ldw	r4,0(r16)
 8010b54:	2480b804 	addi	r18,r4,736
 8010b58:	047fffc4 	movi	r17,-1
 8010b5c:	91000117 	ldw	r4,4(r18)
 8010b60:	94000217 	ldw	r16,8(r18)
 8010b64:	213fffc4 	addi	r4,r4,-1
 8010b68:	20000a16 	blt	r4,zero,8010b94 <__sfp+0x78>
 8010b6c:	8080030f 	ldh	r2,12(r16)
 8010b70:	10000c26 	beq	r2,zero,8010ba4 <__sfp+0x88>
 8010b74:	80c01d04 	addi	r3,r16,116
 8010b78:	00000206 	br	8010b84 <__sfp+0x68>
 8010b7c:	18bfe60f 	ldh	r2,-104(r3)
 8010b80:	10000826 	beq	r2,zero,8010ba4 <__sfp+0x88>
 8010b84:	213fffc4 	addi	r4,r4,-1
 8010b88:	1c3ffd04 	addi	r16,r3,-12
 8010b8c:	18c01a04 	addi	r3,r3,104
 8010b90:	247ffa1e 	bne	r4,r17,8010b7c <_gp+0xfffebb74>
 8010b94:	90800017 	ldw	r2,0(r18)
 8010b98:	10001d26 	beq	r2,zero,8010c10 <__sfp+0xf4>
 8010b9c:	1025883a 	mov	r18,r2
 8010ba0:	003fee06 	br	8010b5c <_gp+0xfffebb54>
 8010ba4:	00bfffc4 	movi	r2,-1
 8010ba8:	8080038d 	sth	r2,14(r16)
 8010bac:	00800044 	movi	r2,1
 8010bb0:	8080030d 	sth	r2,12(r16)
 8010bb4:	80001915 	stw	zero,100(r16)
 8010bb8:	80000015 	stw	zero,0(r16)
 8010bbc:	80000215 	stw	zero,8(r16)
 8010bc0:	80000115 	stw	zero,4(r16)
 8010bc4:	80000415 	stw	zero,16(r16)
 8010bc8:	80000515 	stw	zero,20(r16)
 8010bcc:	80000615 	stw	zero,24(r16)
 8010bd0:	01800204 	movi	r6,8
 8010bd4:	000b883a 	mov	r5,zero
 8010bd8:	81001704 	addi	r4,r16,92
 8010bdc:	80123c80 	call	80123c8 <memset>
 8010be0:	8005883a 	mov	r2,r16
 8010be4:	80000c15 	stw	zero,48(r16)
 8010be8:	80000d15 	stw	zero,52(r16)
 8010bec:	80001115 	stw	zero,68(r16)
 8010bf0:	80001215 	stw	zero,72(r16)
 8010bf4:	dfc00417 	ldw	ra,16(sp)
 8010bf8:	dcc00317 	ldw	r19,12(sp)
 8010bfc:	dc800217 	ldw	r18,8(sp)
 8010c00:	dc400117 	ldw	r17,4(sp)
 8010c04:	dc000017 	ldw	r16,0(sp)
 8010c08:	dec00504 	addi	sp,sp,20
 8010c0c:	f800283a 	ret
 8010c10:	01400104 	movi	r5,4
 8010c14:	9809883a 	mov	r4,r19
 8010c18:	8010aa40 	call	8010aa4 <__sfmoreglue>
 8010c1c:	90800015 	stw	r2,0(r18)
 8010c20:	103fde1e 	bne	r2,zero,8010b9c <_gp+0xfffebb94>
 8010c24:	00800304 	movi	r2,12
 8010c28:	98800015 	stw	r2,0(r19)
 8010c2c:	0005883a 	mov	r2,zero
 8010c30:	003ff006 	br	8010bf4 <_gp+0xfffebbec>

08010c34 <_cleanup>:
 8010c34:	008200b4 	movhi	r2,2050
 8010c38:	10b40204 	addi	r2,r2,-12280
 8010c3c:	11000017 	ldw	r4,0(r2)
 8010c40:	01420074 	movhi	r5,2049
 8010c44:	29415004 	addi	r5,r5,1344
 8010c48:	801177c1 	jmpi	801177c <_fwalk_reent>

08010c4c <__sinit>:
 8010c4c:	20800e17 	ldw	r2,56(r4)
 8010c50:	10000126 	beq	r2,zero,8010c58 <__sinit+0xc>
 8010c54:	f800283a 	ret
 8010c58:	80109001 	jmpi	8010900 <__sinit.part.1>

08010c5c <__sfp_lock_acquire>:
 8010c5c:	f800283a 	ret

08010c60 <__sfp_lock_release>:
 8010c60:	f800283a 	ret

08010c64 <__sinit_lock_acquire>:
 8010c64:	f800283a 	ret

08010c68 <__sinit_lock_release>:
 8010c68:	f800283a 	ret

08010c6c <__fp_lock_all>:
 8010c6c:	008200b4 	movhi	r2,2050
 8010c70:	10b40304 	addi	r2,r2,-12276
 8010c74:	11000017 	ldw	r4,0(r2)
 8010c78:	01420074 	movhi	r5,2049
 8010c7c:	2942a704 	addi	r5,r5,2716
 8010c80:	80116b81 	jmpi	80116b8 <_fwalk>

08010c84 <__fp_unlock_all>:
 8010c84:	008200b4 	movhi	r2,2050
 8010c88:	10b40304 	addi	r2,r2,-12276
 8010c8c:	11000017 	ldw	r4,0(r2)
 8010c90:	01420074 	movhi	r5,2049
 8010c94:	29423b04 	addi	r5,r5,2284
 8010c98:	80116b81 	jmpi	80116b8 <_fwalk>

08010c9c <_fopen_r>:
 8010c9c:	defffa04 	addi	sp,sp,-24
 8010ca0:	3005883a 	mov	r2,r6
 8010ca4:	dcc00415 	stw	r19,16(sp)
 8010ca8:	d80d883a 	mov	r6,sp
 8010cac:	2827883a 	mov	r19,r5
 8010cb0:	100b883a 	mov	r5,r2
 8010cb4:	dc800315 	stw	r18,12(sp)
 8010cb8:	dfc00515 	stw	ra,20(sp)
 8010cbc:	dc400215 	stw	r17,8(sp)
 8010cc0:	dc000115 	stw	r16,4(sp)
 8010cc4:	2025883a 	mov	r18,r4
 8010cc8:	8012f900 	call	8012f90 <__sflags>
 8010ccc:	10002726 	beq	r2,zero,8010d6c <_fopen_r+0xd0>
 8010cd0:	9009883a 	mov	r4,r18
 8010cd4:	1023883a 	mov	r17,r2
 8010cd8:	8010b1c0 	call	8010b1c <__sfp>
 8010cdc:	1021883a 	mov	r16,r2
 8010ce0:	10002226 	beq	r2,zero,8010d6c <_fopen_r+0xd0>
 8010ce4:	d9800017 	ldw	r6,0(sp)
 8010ce8:	01c06d84 	movi	r7,438
 8010cec:	980b883a 	mov	r5,r19
 8010cf0:	9009883a 	mov	r4,r18
 8010cf4:	80124f00 	call	80124f0 <_open_r>
 8010cf8:	10001916 	blt	r2,zero,8010d60 <_fopen_r+0xc4>
 8010cfc:	8080038d 	sth	r2,14(r16)
 8010d00:	00820074 	movhi	r2,2049
 8010d04:	1089e504 	addi	r2,r2,10132
 8010d08:	80800815 	stw	r2,32(r16)
 8010d0c:	00820074 	movhi	r2,2049
 8010d10:	1089fc04 	addi	r2,r2,10224
 8010d14:	80800915 	stw	r2,36(r16)
 8010d18:	00820074 	movhi	r2,2049
 8010d1c:	108a1b04 	addi	r2,r2,10348
 8010d20:	80800a15 	stw	r2,40(r16)
 8010d24:	00820074 	movhi	r2,2049
 8010d28:	108a3204 	addi	r2,r2,10440
 8010d2c:	8440030d 	sth	r17,12(r16)
 8010d30:	84000715 	stw	r16,28(r16)
 8010d34:	80800b15 	stw	r2,44(r16)
 8010d38:	8c40400c 	andi	r17,r17,256
 8010d3c:	88000d1e 	bne	r17,zero,8010d74 <_fopen_r+0xd8>
 8010d40:	8005883a 	mov	r2,r16
 8010d44:	dfc00517 	ldw	ra,20(sp)
 8010d48:	dcc00417 	ldw	r19,16(sp)
 8010d4c:	dc800317 	ldw	r18,12(sp)
 8010d50:	dc400217 	ldw	r17,8(sp)
 8010d54:	dc000117 	ldw	r16,4(sp)
 8010d58:	dec00604 	addi	sp,sp,24
 8010d5c:	f800283a 	ret
 8010d60:	8010c5c0 	call	8010c5c <__sfp_lock_acquire>
 8010d64:	8000030d 	sth	zero,12(r16)
 8010d68:	8010c600 	call	8010c60 <__sfp_lock_release>
 8010d6c:	0005883a 	mov	r2,zero
 8010d70:	003ff406 	br	8010d44 <_gp+0xfffebd3c>
 8010d74:	01c00084 	movi	r7,2
 8010d78:	000d883a 	mov	r6,zero
 8010d7c:	800b883a 	mov	r5,r16
 8010d80:	9009883a 	mov	r4,r18
 8010d84:	80111dc0 	call	80111dc <_fseek_r>
 8010d88:	8005883a 	mov	r2,r16
 8010d8c:	003fed06 	br	8010d44 <_gp+0xfffebd3c>

08010d90 <fopen>:
 8010d90:	008200b4 	movhi	r2,2050
 8010d94:	10b40304 	addi	r2,r2,-12276
 8010d98:	280d883a 	mov	r6,r5
 8010d9c:	200b883a 	mov	r5,r4
 8010da0:	11000017 	ldw	r4,0(r2)
 8010da4:	8010c9c1 	jmpi	8010c9c <_fopen_r>

08010da8 <_malloc_trim_r>:
 8010da8:	defffb04 	addi	sp,sp,-20
 8010dac:	dcc00315 	stw	r19,12(sp)
 8010db0:	04c200b4 	movhi	r19,2050
 8010db4:	dc800215 	stw	r18,8(sp)
 8010db8:	dc400115 	stw	r17,4(sp)
 8010dbc:	dc000015 	stw	r16,0(sp)
 8010dc0:	dfc00415 	stw	ra,16(sp)
 8010dc4:	2821883a 	mov	r16,r5
 8010dc8:	9cee6904 	addi	r19,r19,-18012
 8010dcc:	2025883a 	mov	r18,r4
 8010dd0:	80142200 	call	8014220 <__malloc_lock>
 8010dd4:	98800217 	ldw	r2,8(r19)
 8010dd8:	14400117 	ldw	r17,4(r2)
 8010ddc:	00bfff04 	movi	r2,-4
 8010de0:	88a2703a 	and	r17,r17,r2
 8010de4:	8c21c83a 	sub	r16,r17,r16
 8010de8:	8403fbc4 	addi	r16,r16,4079
 8010dec:	8020d33a 	srli	r16,r16,12
 8010df0:	0083ffc4 	movi	r2,4095
 8010df4:	843fffc4 	addi	r16,r16,-1
 8010df8:	8020933a 	slli	r16,r16,12
 8010dfc:	1400060e 	bge	r2,r16,8010e18 <_malloc_trim_r+0x70>
 8010e00:	000b883a 	mov	r5,zero
 8010e04:	9009883a 	mov	r4,r18
 8010e08:	80127400 	call	8012740 <_sbrk_r>
 8010e0c:	98c00217 	ldw	r3,8(r19)
 8010e10:	1c47883a 	add	r3,r3,r17
 8010e14:	10c00a26 	beq	r2,r3,8010e40 <_malloc_trim_r+0x98>
 8010e18:	9009883a 	mov	r4,r18
 8010e1c:	80142440 	call	8014244 <__malloc_unlock>
 8010e20:	0005883a 	mov	r2,zero
 8010e24:	dfc00417 	ldw	ra,16(sp)
 8010e28:	dcc00317 	ldw	r19,12(sp)
 8010e2c:	dc800217 	ldw	r18,8(sp)
 8010e30:	dc400117 	ldw	r17,4(sp)
 8010e34:	dc000017 	ldw	r16,0(sp)
 8010e38:	dec00504 	addi	sp,sp,20
 8010e3c:	f800283a 	ret
 8010e40:	040bc83a 	sub	r5,zero,r16
 8010e44:	9009883a 	mov	r4,r18
 8010e48:	80127400 	call	8012740 <_sbrk_r>
 8010e4c:	00ffffc4 	movi	r3,-1
 8010e50:	10c00d26 	beq	r2,r3,8010e88 <_malloc_trim_r+0xe0>
 8010e54:	00c200b4 	movhi	r3,2050
 8010e58:	18fafe04 	addi	r3,r3,-5128
 8010e5c:	18800017 	ldw	r2,0(r3)
 8010e60:	99000217 	ldw	r4,8(r19)
 8010e64:	8c23c83a 	sub	r17,r17,r16
 8010e68:	8c400054 	ori	r17,r17,1
 8010e6c:	1421c83a 	sub	r16,r2,r16
 8010e70:	24400115 	stw	r17,4(r4)
 8010e74:	9009883a 	mov	r4,r18
 8010e78:	1c000015 	stw	r16,0(r3)
 8010e7c:	80142440 	call	8014244 <__malloc_unlock>
 8010e80:	00800044 	movi	r2,1
 8010e84:	003fe706 	br	8010e24 <_gp+0xfffebe1c>
 8010e88:	000b883a 	mov	r5,zero
 8010e8c:	9009883a 	mov	r4,r18
 8010e90:	80127400 	call	8012740 <_sbrk_r>
 8010e94:	99000217 	ldw	r4,8(r19)
 8010e98:	014003c4 	movi	r5,15
 8010e9c:	1107c83a 	sub	r3,r2,r4
 8010ea0:	28ffdd0e 	bge	r5,r3,8010e18 <_gp+0xfffebe10>
 8010ea4:	014200b4 	movhi	r5,2050
 8010ea8:	29740404 	addi	r5,r5,-12272
 8010eac:	29400017 	ldw	r5,0(r5)
 8010eb0:	18c00054 	ori	r3,r3,1
 8010eb4:	20c00115 	stw	r3,4(r4)
 8010eb8:	00c200b4 	movhi	r3,2050
 8010ebc:	1145c83a 	sub	r2,r2,r5
 8010ec0:	18fafe04 	addi	r3,r3,-5128
 8010ec4:	18800015 	stw	r2,0(r3)
 8010ec8:	003fd306 	br	8010e18 <_gp+0xfffebe10>

08010ecc <_free_r>:
 8010ecc:	28004126 	beq	r5,zero,8010fd4 <_free_r+0x108>
 8010ed0:	defffd04 	addi	sp,sp,-12
 8010ed4:	dc400115 	stw	r17,4(sp)
 8010ed8:	dc000015 	stw	r16,0(sp)
 8010edc:	2023883a 	mov	r17,r4
 8010ee0:	2821883a 	mov	r16,r5
 8010ee4:	dfc00215 	stw	ra,8(sp)
 8010ee8:	80142200 	call	8014220 <__malloc_lock>
 8010eec:	81ffff17 	ldw	r7,-4(r16)
 8010ef0:	00bfff84 	movi	r2,-2
 8010ef4:	010200b4 	movhi	r4,2050
 8010ef8:	81bffe04 	addi	r6,r16,-8
 8010efc:	3884703a 	and	r2,r7,r2
 8010f00:	212e6904 	addi	r4,r4,-18012
 8010f04:	308b883a 	add	r5,r6,r2
 8010f08:	2a400117 	ldw	r9,4(r5)
 8010f0c:	22000217 	ldw	r8,8(r4)
 8010f10:	00ffff04 	movi	r3,-4
 8010f14:	48c6703a 	and	r3,r9,r3
 8010f18:	2a005726 	beq	r5,r8,8011078 <_free_r+0x1ac>
 8010f1c:	28c00115 	stw	r3,4(r5)
 8010f20:	39c0004c 	andi	r7,r7,1
 8010f24:	3800091e 	bne	r7,zero,8010f4c <_free_r+0x80>
 8010f28:	823ffe17 	ldw	r8,-8(r16)
 8010f2c:	22400204 	addi	r9,r4,8
 8010f30:	320dc83a 	sub	r6,r6,r8
 8010f34:	31c00217 	ldw	r7,8(r6)
 8010f38:	1205883a 	add	r2,r2,r8
 8010f3c:	3a406526 	beq	r7,r9,80110d4 <_free_r+0x208>
 8010f40:	32000317 	ldw	r8,12(r6)
 8010f44:	3a000315 	stw	r8,12(r7)
 8010f48:	41c00215 	stw	r7,8(r8)
 8010f4c:	28cf883a 	add	r7,r5,r3
 8010f50:	39c00117 	ldw	r7,4(r7)
 8010f54:	39c0004c 	andi	r7,r7,1
 8010f58:	38003a26 	beq	r7,zero,8011044 <_free_r+0x178>
 8010f5c:	10c00054 	ori	r3,r2,1
 8010f60:	30c00115 	stw	r3,4(r6)
 8010f64:	3087883a 	add	r3,r6,r2
 8010f68:	18800015 	stw	r2,0(r3)
 8010f6c:	00c07fc4 	movi	r3,511
 8010f70:	18801936 	bltu	r3,r2,8010fd8 <_free_r+0x10c>
 8010f74:	1004d0fa 	srli	r2,r2,3
 8010f78:	01c00044 	movi	r7,1
 8010f7c:	21400117 	ldw	r5,4(r4)
 8010f80:	10c00044 	addi	r3,r2,1
 8010f84:	18c7883a 	add	r3,r3,r3
 8010f88:	1005d0ba 	srai	r2,r2,2
 8010f8c:	18c7883a 	add	r3,r3,r3
 8010f90:	18c7883a 	add	r3,r3,r3
 8010f94:	1907883a 	add	r3,r3,r4
 8010f98:	3884983a 	sll	r2,r7,r2
 8010f9c:	19c00017 	ldw	r7,0(r3)
 8010fa0:	1a3ffe04 	addi	r8,r3,-8
 8010fa4:	1144b03a 	or	r2,r2,r5
 8010fa8:	32000315 	stw	r8,12(r6)
 8010fac:	31c00215 	stw	r7,8(r6)
 8010fb0:	20800115 	stw	r2,4(r4)
 8010fb4:	19800015 	stw	r6,0(r3)
 8010fb8:	39800315 	stw	r6,12(r7)
 8010fbc:	8809883a 	mov	r4,r17
 8010fc0:	dfc00217 	ldw	ra,8(sp)
 8010fc4:	dc400117 	ldw	r17,4(sp)
 8010fc8:	dc000017 	ldw	r16,0(sp)
 8010fcc:	dec00304 	addi	sp,sp,12
 8010fd0:	80142441 	jmpi	8014244 <__malloc_unlock>
 8010fd4:	f800283a 	ret
 8010fd8:	100ad27a 	srli	r5,r2,9
 8010fdc:	00c00104 	movi	r3,4
 8010fe0:	19404a36 	bltu	r3,r5,801110c <_free_r+0x240>
 8010fe4:	100ad1ba 	srli	r5,r2,6
 8010fe8:	28c00e44 	addi	r3,r5,57
 8010fec:	18c7883a 	add	r3,r3,r3
 8010ff0:	29400e04 	addi	r5,r5,56
 8010ff4:	18c7883a 	add	r3,r3,r3
 8010ff8:	18c7883a 	add	r3,r3,r3
 8010ffc:	1909883a 	add	r4,r3,r4
 8011000:	20c00017 	ldw	r3,0(r4)
 8011004:	01c200b4 	movhi	r7,2050
 8011008:	213ffe04 	addi	r4,r4,-8
 801100c:	39ee6904 	addi	r7,r7,-18012
 8011010:	20c04426 	beq	r4,r3,8011124 <_free_r+0x258>
 8011014:	01ffff04 	movi	r7,-4
 8011018:	19400117 	ldw	r5,4(r3)
 801101c:	29ca703a 	and	r5,r5,r7
 8011020:	1140022e 	bgeu	r2,r5,801102c <_free_r+0x160>
 8011024:	18c00217 	ldw	r3,8(r3)
 8011028:	20fffb1e 	bne	r4,r3,8011018 <_gp+0xfffec010>
 801102c:	19000317 	ldw	r4,12(r3)
 8011030:	31000315 	stw	r4,12(r6)
 8011034:	30c00215 	stw	r3,8(r6)
 8011038:	21800215 	stw	r6,8(r4)
 801103c:	19800315 	stw	r6,12(r3)
 8011040:	003fde06 	br	8010fbc <_gp+0xfffebfb4>
 8011044:	29c00217 	ldw	r7,8(r5)
 8011048:	10c5883a 	add	r2,r2,r3
 801104c:	00c200b4 	movhi	r3,2050
 8011050:	18ee6b04 	addi	r3,r3,-18004
 8011054:	38c03b26 	beq	r7,r3,8011144 <_free_r+0x278>
 8011058:	2a000317 	ldw	r8,12(r5)
 801105c:	11400054 	ori	r5,r2,1
 8011060:	3087883a 	add	r3,r6,r2
 8011064:	3a000315 	stw	r8,12(r7)
 8011068:	41c00215 	stw	r7,8(r8)
 801106c:	31400115 	stw	r5,4(r6)
 8011070:	18800015 	stw	r2,0(r3)
 8011074:	003fbd06 	br	8010f6c <_gp+0xfffebf64>
 8011078:	39c0004c 	andi	r7,r7,1
 801107c:	10c5883a 	add	r2,r2,r3
 8011080:	3800071e 	bne	r7,zero,80110a0 <_free_r+0x1d4>
 8011084:	81fffe17 	ldw	r7,-8(r16)
 8011088:	31cdc83a 	sub	r6,r6,r7
 801108c:	30c00317 	ldw	r3,12(r6)
 8011090:	31400217 	ldw	r5,8(r6)
 8011094:	11c5883a 	add	r2,r2,r7
 8011098:	28c00315 	stw	r3,12(r5)
 801109c:	19400215 	stw	r5,8(r3)
 80110a0:	10c00054 	ori	r3,r2,1
 80110a4:	30c00115 	stw	r3,4(r6)
 80110a8:	00c200b4 	movhi	r3,2050
 80110ac:	18f40504 	addi	r3,r3,-12268
 80110b0:	18c00017 	ldw	r3,0(r3)
 80110b4:	21800215 	stw	r6,8(r4)
 80110b8:	10ffc036 	bltu	r2,r3,8010fbc <_gp+0xfffebfb4>
 80110bc:	008200b4 	movhi	r2,2050
 80110c0:	10bae904 	addi	r2,r2,-5212
 80110c4:	11400017 	ldw	r5,0(r2)
 80110c8:	8809883a 	mov	r4,r17
 80110cc:	8010da80 	call	8010da8 <_malloc_trim_r>
 80110d0:	003fba06 	br	8010fbc <_gp+0xfffebfb4>
 80110d4:	28c9883a 	add	r4,r5,r3
 80110d8:	21000117 	ldw	r4,4(r4)
 80110dc:	2100004c 	andi	r4,r4,1
 80110e0:	2000391e 	bne	r4,zero,80111c8 <_free_r+0x2fc>
 80110e4:	29c00217 	ldw	r7,8(r5)
 80110e8:	29000317 	ldw	r4,12(r5)
 80110ec:	1885883a 	add	r2,r3,r2
 80110f0:	10c00054 	ori	r3,r2,1
 80110f4:	39000315 	stw	r4,12(r7)
 80110f8:	21c00215 	stw	r7,8(r4)
 80110fc:	30c00115 	stw	r3,4(r6)
 8011100:	308d883a 	add	r6,r6,r2
 8011104:	30800015 	stw	r2,0(r6)
 8011108:	003fac06 	br	8010fbc <_gp+0xfffebfb4>
 801110c:	00c00504 	movi	r3,20
 8011110:	19401536 	bltu	r3,r5,8011168 <_free_r+0x29c>
 8011114:	28c01704 	addi	r3,r5,92
 8011118:	18c7883a 	add	r3,r3,r3
 801111c:	294016c4 	addi	r5,r5,91
 8011120:	003fb406 	br	8010ff4 <_gp+0xfffebfec>
 8011124:	280bd0ba 	srai	r5,r5,2
 8011128:	00c00044 	movi	r3,1
 801112c:	38800117 	ldw	r2,4(r7)
 8011130:	194a983a 	sll	r5,r3,r5
 8011134:	2007883a 	mov	r3,r4
 8011138:	2884b03a 	or	r2,r5,r2
 801113c:	38800115 	stw	r2,4(r7)
 8011140:	003fbb06 	br	8011030 <_gp+0xfffec028>
 8011144:	21800515 	stw	r6,20(r4)
 8011148:	21800415 	stw	r6,16(r4)
 801114c:	10c00054 	ori	r3,r2,1
 8011150:	31c00315 	stw	r7,12(r6)
 8011154:	31c00215 	stw	r7,8(r6)
 8011158:	30c00115 	stw	r3,4(r6)
 801115c:	308d883a 	add	r6,r6,r2
 8011160:	30800015 	stw	r2,0(r6)
 8011164:	003f9506 	br	8010fbc <_gp+0xfffebfb4>
 8011168:	00c01504 	movi	r3,84
 801116c:	19400536 	bltu	r3,r5,8011184 <_free_r+0x2b8>
 8011170:	100ad33a 	srli	r5,r2,12
 8011174:	28c01bc4 	addi	r3,r5,111
 8011178:	18c7883a 	add	r3,r3,r3
 801117c:	29401b84 	addi	r5,r5,110
 8011180:	003f9c06 	br	8010ff4 <_gp+0xfffebfec>
 8011184:	00c05504 	movi	r3,340
 8011188:	19400536 	bltu	r3,r5,80111a0 <_free_r+0x2d4>
 801118c:	100ad3fa 	srli	r5,r2,15
 8011190:	28c01e04 	addi	r3,r5,120
 8011194:	18c7883a 	add	r3,r3,r3
 8011198:	29401dc4 	addi	r5,r5,119
 801119c:	003f9506 	br	8010ff4 <_gp+0xfffebfec>
 80111a0:	00c15504 	movi	r3,1364
 80111a4:	19400536 	bltu	r3,r5,80111bc <_free_r+0x2f0>
 80111a8:	100ad4ba 	srli	r5,r2,18
 80111ac:	28c01f44 	addi	r3,r5,125
 80111b0:	18c7883a 	add	r3,r3,r3
 80111b4:	29401f04 	addi	r5,r5,124
 80111b8:	003f8e06 	br	8010ff4 <_gp+0xfffebfec>
 80111bc:	00c03f84 	movi	r3,254
 80111c0:	01401f84 	movi	r5,126
 80111c4:	003f8b06 	br	8010ff4 <_gp+0xfffebfec>
 80111c8:	10c00054 	ori	r3,r2,1
 80111cc:	30c00115 	stw	r3,4(r6)
 80111d0:	308d883a 	add	r6,r6,r2
 80111d4:	30800015 	stw	r2,0(r6)
 80111d8:	003f7806 	br	8010fbc <_gp+0xfffebfb4>

080111dc <_fseek_r>:
 80111dc:	80111fc1 	jmpi	80111fc <_fseeko_r>

080111e0 <fseek>:
 80111e0:	008200b4 	movhi	r2,2050
 80111e4:	10b40304 	addi	r2,r2,-12276
 80111e8:	300f883a 	mov	r7,r6
 80111ec:	280d883a 	mov	r6,r5
 80111f0:	200b883a 	mov	r5,r4
 80111f4:	11000017 	ldw	r4,0(r2)
 80111f8:	80111fc1 	jmpi	80111fc <_fseeko_r>

080111fc <_fseeko_r>:
 80111fc:	deffe804 	addi	sp,sp,-96
 8011200:	dd401415 	stw	r21,80(sp)
 8011204:	dc801115 	stw	r18,68(sp)
 8011208:	dc401015 	stw	r17,64(sp)
 801120c:	dc000f15 	stw	r16,60(sp)
 8011210:	dfc01715 	stw	ra,92(sp)
 8011214:	ddc01615 	stw	r23,88(sp)
 8011218:	dd801515 	stw	r22,84(sp)
 801121c:	dd001315 	stw	r20,76(sp)
 8011220:	dcc01215 	stw	r19,72(sp)
 8011224:	2023883a 	mov	r17,r4
 8011228:	2821883a 	mov	r16,r5
 801122c:	302b883a 	mov	r21,r6
 8011230:	3825883a 	mov	r18,r7
 8011234:	20000226 	beq	r4,zero,8011240 <_fseeko_r+0x44>
 8011238:	20800e17 	ldw	r2,56(r4)
 801123c:	10005a26 	beq	r2,zero,80113a8 <_fseeko_r+0x1ac>
 8011240:	8080030b 	ldhu	r2,12(r16)
 8011244:	00c04204 	movi	r3,264
 8011248:	1080420c 	andi	r2,r2,264
 801124c:	10c05b26 	beq	r2,r3,80113bc <_fseeko_r+0x1c0>
 8011250:	85000a17 	ldw	r20,40(r16)
 8011254:	a000f626 	beq	r20,zero,8011630 <_fseeko_r+0x434>
 8011258:	00800044 	movi	r2,1
 801125c:	90803e26 	beq	r18,r2,8011358 <_fseeko_r+0x15c>
 8011260:	00800084 	movi	r2,2
 8011264:	90801026 	beq	r18,r2,80112a8 <_fseeko_r+0xac>
 8011268:	90000f26 	beq	r18,zero,80112a8 <_fseeko_r+0xac>
 801126c:	00800584 	movi	r2,22
 8011270:	88800015 	stw	r2,0(r17)
 8011274:	04ffffc4 	movi	r19,-1
 8011278:	9805883a 	mov	r2,r19
 801127c:	dfc01717 	ldw	ra,92(sp)
 8011280:	ddc01617 	ldw	r23,88(sp)
 8011284:	dd801517 	ldw	r22,84(sp)
 8011288:	dd401417 	ldw	r21,80(sp)
 801128c:	dd001317 	ldw	r20,76(sp)
 8011290:	dcc01217 	ldw	r19,72(sp)
 8011294:	dc801117 	ldw	r18,68(sp)
 8011298:	dc401017 	ldw	r17,64(sp)
 801129c:	dc000f17 	ldw	r16,60(sp)
 80112a0:	dec01804 	addi	sp,sp,96
 80112a4:	f800283a 	ret
 80112a8:	80800417 	ldw	r2,16(r16)
 80112ac:	002f883a 	mov	r23,zero
 80112b0:	0027883a 	mov	r19,zero
 80112b4:	1000cb26 	beq	r2,zero,80115e4 <_fseeko_r+0x3e8>
 80112b8:	8080030b 	ldhu	r2,12(r16)
 80112bc:	10c2068c 	andi	r3,r2,2074
 80112c0:	1800071e 	bne	r3,zero,80112e0 <_fseeko_r+0xe4>
 80112c4:	10c1000c 	andi	r3,r2,1024
 80112c8:	1800451e 	bne	r3,zero,80113e0 <_fseeko_r+0x1e4>
 80112cc:	00c20074 	movhi	r3,2049
 80112d0:	18ca1b04 	addi	r3,r3,10348
 80112d4:	a0c0b726 	beq	r20,r3,80115b4 <_fseeko_r+0x3b8>
 80112d8:	10820014 	ori	r2,r2,2048
 80112dc:	8080030d 	sth	r2,12(r16)
 80112e0:	800b883a 	mov	r5,r16
 80112e4:	8809883a 	mov	r4,r17
 80112e8:	80108600 	call	8010860 <_fflush_r>
 80112ec:	1027883a 	mov	r19,r2
 80112f0:	103fe01e 	bne	r2,zero,8011274 <_gp+0xfffec26c>
 80112f4:	81400717 	ldw	r5,28(r16)
 80112f8:	900f883a 	mov	r7,r18
 80112fc:	a80d883a 	mov	r6,r21
 8011300:	8809883a 	mov	r4,r17
 8011304:	a03ee83a 	callr	r20
 8011308:	00ffffc4 	movi	r3,-1
 801130c:	10ffd926 	beq	r2,r3,8011274 <_gp+0xfffec26c>
 8011310:	81400c17 	ldw	r5,48(r16)
 8011314:	28000526 	beq	r5,zero,801132c <_fseeko_r+0x130>
 8011318:	80801004 	addi	r2,r16,64
 801131c:	28800226 	beq	r5,r2,8011328 <_fseeko_r+0x12c>
 8011320:	8809883a 	mov	r4,r17
 8011324:	8010ecc0 	call	8010ecc <_free_r>
 8011328:	80000c15 	stw	zero,48(r16)
 801132c:	8080030b 	ldhu	r2,12(r16)
 8011330:	80c00417 	ldw	r3,16(r16)
 8011334:	80000115 	stw	zero,4(r16)
 8011338:	10bdf7cc 	andi	r2,r2,63455
 801133c:	80c00015 	stw	r3,0(r16)
 8011340:	8080030d 	sth	r2,12(r16)
 8011344:	01800204 	movi	r6,8
 8011348:	000b883a 	mov	r5,zero
 801134c:	81001704 	addi	r4,r16,92
 8011350:	80123c80 	call	80123c8 <memset>
 8011354:	003fc806 	br	8011278 <_gp+0xfffec270>
 8011358:	800b883a 	mov	r5,r16
 801135c:	8809883a 	mov	r4,r17
 8011360:	80108600 	call	8010860 <_fflush_r>
 8011364:	8080030b 	ldhu	r2,12(r16)
 8011368:	10c4000c 	andi	r3,r2,4096
 801136c:	18008726 	beq	r3,zero,801158c <_fseeko_r+0x390>
 8011370:	84c01417 	ldw	r19,80(r16)
 8011374:	10c0010c 	andi	r3,r2,4
 8011378:	1800431e 	bne	r3,zero,8011488 <_fseeko_r+0x28c>
 801137c:	1080020c 	andi	r2,r2,8
 8011380:	10008026 	beq	r2,zero,8011584 <_fseeko_r+0x388>
 8011384:	80c00017 	ldw	r3,0(r16)
 8011388:	80800417 	ldw	r2,16(r16)
 801138c:	18000226 	beq	r3,zero,8011398 <_fseeko_r+0x19c>
 8011390:	1887c83a 	sub	r3,r3,r2
 8011394:	98e7883a 	add	r19,r19,r3
 8011398:	aceb883a 	add	r21,r21,r19
 801139c:	05c00044 	movi	r23,1
 80113a0:	0025883a 	mov	r18,zero
 80113a4:	003fc306 	br	80112b4 <_gp+0xfffec2ac>
 80113a8:	8010c4c0 	call	8010c4c <__sinit>
 80113ac:	8080030b 	ldhu	r2,12(r16)
 80113b0:	00c04204 	movi	r3,264
 80113b4:	1080420c 	andi	r2,r2,264
 80113b8:	10ffa51e 	bne	r2,r3,8011250 <_gp+0xfffec248>
 80113bc:	800b883a 	mov	r5,r16
 80113c0:	8809883a 	mov	r4,r17
 80113c4:	80108600 	call	8010860 <_fflush_r>
 80113c8:	003fa106 	br	8011250 <_gp+0xfffec248>
 80113cc:	8080030b 	ldhu	r2,12(r16)
 80113d0:	00c10004 	movi	r3,1024
 80113d4:	80c01315 	stw	r3,76(r16)
 80113d8:	10c4b03a 	or	r2,r2,r3
 80113dc:	8080030d 	sth	r2,12(r16)
 80113e0:	9000311e 	bne	r18,zero,80114a8 <_fseeko_r+0x2ac>
 80113e4:	a82d883a 	mov	r22,r21
 80113e8:	b800371e 	bne	r23,zero,80114c8 <_fseeko_r+0x2cc>
 80113ec:	8080030b 	ldhu	r2,12(r16)
 80113f0:	1084000c 	andi	r2,r2,4096
 80113f4:	10007f26 	beq	r2,zero,80115f4 <_fseeko_r+0x3f8>
 80113f8:	80801417 	ldw	r2,80(r16)
 80113fc:	81800117 	ldw	r6,4(r16)
 8011400:	81400c17 	ldw	r5,48(r16)
 8011404:	11a7c83a 	sub	r19,r2,r6
 8011408:	28008226 	beq	r5,zero,8011614 <_fseeko_r+0x418>
 801140c:	81c00f17 	ldw	r7,60(r16)
 8011410:	99e7c83a 	sub	r19,r19,r7
 8011414:	81000e17 	ldw	r4,56(r16)
 8011418:	80800417 	ldw	r2,16(r16)
 801141c:	99a7883a 	add	r19,r19,r6
 8011420:	2087c83a 	sub	r3,r4,r2
 8011424:	98e7c83a 	sub	r19,r19,r3
 8011428:	38c7883a 	add	r3,r7,r3
 801142c:	b4c02b16 	blt	r22,r19,80114dc <_fseeko_r+0x2e0>
 8011430:	98c9883a 	add	r4,r19,r3
 8011434:	b100292e 	bgeu	r22,r4,80114dc <_fseeko_r+0x2e0>
 8011438:	b4e7c83a 	sub	r19,r22,r19
 801143c:	14c5883a 	add	r2,r2,r19
 8011440:	1ce7c83a 	sub	r19,r3,r19
 8011444:	80800015 	stw	r2,0(r16)
 8011448:	84c00115 	stw	r19,4(r16)
 801144c:	28000526 	beq	r5,zero,8011464 <_fseeko_r+0x268>
 8011450:	80801004 	addi	r2,r16,64
 8011454:	28800226 	beq	r5,r2,8011460 <_fseeko_r+0x264>
 8011458:	8809883a 	mov	r4,r17
 801145c:	8010ecc0 	call	8010ecc <_free_r>
 8011460:	80000c15 	stw	zero,48(r16)
 8011464:	8080030b 	ldhu	r2,12(r16)
 8011468:	01800204 	movi	r6,8
 801146c:	000b883a 	mov	r5,zero
 8011470:	10bff7cc 	andi	r2,r2,65503
 8011474:	8080030d 	sth	r2,12(r16)
 8011478:	81001704 	addi	r4,r16,92
 801147c:	80123c80 	call	80123c8 <memset>
 8011480:	0027883a 	mov	r19,zero
 8011484:	003f7c06 	br	8011278 <_gp+0xfffec270>
 8011488:	80c00117 	ldw	r3,4(r16)
 801148c:	80800c17 	ldw	r2,48(r16)
 8011490:	98e7c83a 	sub	r19,r19,r3
 8011494:	10003b26 	beq	r2,zero,8011584 <_fseeko_r+0x388>
 8011498:	80c00f17 	ldw	r3,60(r16)
 801149c:	80800417 	ldw	r2,16(r16)
 80114a0:	98e7c83a 	sub	r19,r19,r3
 80114a4:	003fbc06 	br	8011398 <_gp+0xfffec390>
 80114a8:	8140038f 	ldh	r5,14(r16)
 80114ac:	d80d883a 	mov	r6,sp
 80114b0:	8809883a 	mov	r4,r17
 80114b4:	801165c0 	call	801165c <_fstat_r>
 80114b8:	103f891e 	bne	r2,zero,80112e0 <_gp+0xfffec2d8>
 80114bc:	dd800417 	ldw	r22,16(sp)
 80114c0:	adad883a 	add	r22,r21,r22
 80114c4:	b83fc926 	beq	r23,zero,80113ec <_gp+0xfffec3e4>
 80114c8:	81400c17 	ldw	r5,48(r16)
 80114cc:	81800117 	ldw	r6,4(r16)
 80114d0:	28005026 	beq	r5,zero,8011614 <_fseeko_r+0x418>
 80114d4:	81c00f17 	ldw	r7,60(r16)
 80114d8:	003fce06 	br	8011414 <_gp+0xfffec40c>
 80114dc:	84c01317 	ldw	r19,76(r16)
 80114e0:	81400717 	ldw	r5,28(r16)
 80114e4:	000f883a 	mov	r7,zero
 80114e8:	04e7c83a 	sub	r19,zero,r19
 80114ec:	9da6703a 	and	r19,r19,r22
 80114f0:	980d883a 	mov	r6,r19
 80114f4:	8809883a 	mov	r4,r17
 80114f8:	a03ee83a 	callr	r20
 80114fc:	00ffffc4 	movi	r3,-1
 8011500:	10ff7726 	beq	r2,r3,80112e0 <_gp+0xfffec2d8>
 8011504:	80800417 	ldw	r2,16(r16)
 8011508:	81400c17 	ldw	r5,48(r16)
 801150c:	80000115 	stw	zero,4(r16)
 8011510:	80800015 	stw	r2,0(r16)
 8011514:	28000526 	beq	r5,zero,801152c <_fseeko_r+0x330>
 8011518:	80801004 	addi	r2,r16,64
 801151c:	28800226 	beq	r5,r2,8011528 <_fseeko_r+0x32c>
 8011520:	8809883a 	mov	r4,r17
 8011524:	8010ecc0 	call	8010ecc <_free_r>
 8011528:	80000c15 	stw	zero,48(r16)
 801152c:	8080030b 	ldhu	r2,12(r16)
 8011530:	b4e7c83a 	sub	r19,r22,r19
 8011534:	10bff7cc 	andi	r2,r2,65503
 8011538:	8080030d 	sth	r2,12(r16)
 801153c:	98000b26 	beq	r19,zero,801156c <_fseeko_r+0x370>
 8011540:	800b883a 	mov	r5,r16
 8011544:	8809883a 	mov	r4,r17
 8011548:	801256c0 	call	801256c <__srefill_r>
 801154c:	103f641e 	bne	r2,zero,80112e0 <_gp+0xfffec2d8>
 8011550:	80800117 	ldw	r2,4(r16)
 8011554:	14ff6236 	bltu	r2,r19,80112e0 <_gp+0xfffec2d8>
 8011558:	80c00017 	ldw	r3,0(r16)
 801155c:	14c5c83a 	sub	r2,r2,r19
 8011560:	80800115 	stw	r2,4(r16)
 8011564:	1ce7883a 	add	r19,r3,r19
 8011568:	84c00015 	stw	r19,0(r16)
 801156c:	01800204 	movi	r6,8
 8011570:	000b883a 	mov	r5,zero
 8011574:	81001704 	addi	r4,r16,92
 8011578:	80123c80 	call	80123c8 <memset>
 801157c:	0027883a 	mov	r19,zero
 8011580:	003f3d06 	br	8011278 <_gp+0xfffec270>
 8011584:	80800417 	ldw	r2,16(r16)
 8011588:	003f8306 	br	8011398 <_gp+0xfffec390>
 801158c:	81400717 	ldw	r5,28(r16)
 8011590:	900f883a 	mov	r7,r18
 8011594:	000d883a 	mov	r6,zero
 8011598:	8809883a 	mov	r4,r17
 801159c:	a03ee83a 	callr	r20
 80115a0:	1027883a 	mov	r19,r2
 80115a4:	00bfffc4 	movi	r2,-1
 80115a8:	98bf3226 	beq	r19,r2,8011274 <_gp+0xfffec26c>
 80115ac:	8080030b 	ldhu	r2,12(r16)
 80115b0:	003f7006 	br	8011374 <_gp+0xfffec36c>
 80115b4:	8140038f 	ldh	r5,14(r16)
 80115b8:	283f4716 	blt	r5,zero,80112d8 <_gp+0xfffec2d0>
 80115bc:	d80d883a 	mov	r6,sp
 80115c0:	8809883a 	mov	r4,r17
 80115c4:	801165c0 	call	801165c <_fstat_r>
 80115c8:	1000041e 	bne	r2,zero,80115dc <_fseeko_r+0x3e0>
 80115cc:	d8800117 	ldw	r2,4(sp)
 80115d0:	00e00014 	movui	r3,32768
 80115d4:	10bc000c 	andi	r2,r2,61440
 80115d8:	10ff7c26 	beq	r2,r3,80113cc <_gp+0xfffec3c4>
 80115dc:	8080030b 	ldhu	r2,12(r16)
 80115e0:	003f3d06 	br	80112d8 <_gp+0xfffec2d0>
 80115e4:	800b883a 	mov	r5,r16
 80115e8:	8809883a 	mov	r4,r17
 80115ec:	80118b80 	call	80118b8 <__smakebuf_r>
 80115f0:	003f3106 	br	80112b8 <_gp+0xfffec2b0>
 80115f4:	81400717 	ldw	r5,28(r16)
 80115f8:	01c00044 	movi	r7,1
 80115fc:	000d883a 	mov	r6,zero
 8011600:	8809883a 	mov	r4,r17
 8011604:	a03ee83a 	callr	r20
 8011608:	00ffffc4 	movi	r3,-1
 801160c:	10ff7b1e 	bne	r2,r3,80113fc <_gp+0xfffec3f4>
 8011610:	003f3306 	br	80112e0 <_gp+0xfffec2d8>
 8011614:	80c00017 	ldw	r3,0(r16)
 8011618:	80800417 	ldw	r2,16(r16)
 801161c:	000b883a 	mov	r5,zero
 8011620:	1887c83a 	sub	r3,r3,r2
 8011624:	98e7c83a 	sub	r19,r19,r3
 8011628:	30c7883a 	add	r3,r6,r3
 801162c:	003f7f06 	br	801142c <_gp+0xfffec424>
 8011630:	00800744 	movi	r2,29
 8011634:	88800015 	stw	r2,0(r17)
 8011638:	04ffffc4 	movi	r19,-1
 801163c:	003f0e06 	br	8011278 <_gp+0xfffec270>

08011640 <fseeko>:
 8011640:	008200b4 	movhi	r2,2050
 8011644:	10b40304 	addi	r2,r2,-12276
 8011648:	300f883a 	mov	r7,r6
 801164c:	280d883a 	mov	r6,r5
 8011650:	200b883a 	mov	r5,r4
 8011654:	11000017 	ldw	r4,0(r2)
 8011658:	80111fc1 	jmpi	80111fc <_fseeko_r>

0801165c <_fstat_r>:
 801165c:	defffd04 	addi	sp,sp,-12
 8011660:	2805883a 	mov	r2,r5
 8011664:	dc000015 	stw	r16,0(sp)
 8011668:	040200b4 	movhi	r16,2050
 801166c:	dc400115 	stw	r17,4(sp)
 8011670:	843ae604 	addi	r16,r16,-5224
 8011674:	2023883a 	mov	r17,r4
 8011678:	300b883a 	mov	r5,r6
 801167c:	1009883a 	mov	r4,r2
 8011680:	dfc00215 	stw	ra,8(sp)
 8011684:	80000015 	stw	zero,0(r16)
 8011688:	8013e100 	call	8013e10 <fstat>
 801168c:	00ffffc4 	movi	r3,-1
 8011690:	10c00526 	beq	r2,r3,80116a8 <_fstat_r+0x4c>
 8011694:	dfc00217 	ldw	ra,8(sp)
 8011698:	dc400117 	ldw	r17,4(sp)
 801169c:	dc000017 	ldw	r16,0(sp)
 80116a0:	dec00304 	addi	sp,sp,12
 80116a4:	f800283a 	ret
 80116a8:	80c00017 	ldw	r3,0(r16)
 80116ac:	183ff926 	beq	r3,zero,8011694 <_gp+0xfffec68c>
 80116b0:	88c00015 	stw	r3,0(r17)
 80116b4:	003ff706 	br	8011694 <_gp+0xfffec68c>

080116b8 <_fwalk>:
 80116b8:	defff704 	addi	sp,sp,-36
 80116bc:	dd000415 	stw	r20,16(sp)
 80116c0:	dfc00815 	stw	ra,32(sp)
 80116c4:	ddc00715 	stw	r23,28(sp)
 80116c8:	dd800615 	stw	r22,24(sp)
 80116cc:	dd400515 	stw	r21,20(sp)
 80116d0:	dcc00315 	stw	r19,12(sp)
 80116d4:	dc800215 	stw	r18,8(sp)
 80116d8:	dc400115 	stw	r17,4(sp)
 80116dc:	dc000015 	stw	r16,0(sp)
 80116e0:	2500b804 	addi	r20,r4,736
 80116e4:	a0002326 	beq	r20,zero,8011774 <_fwalk+0xbc>
 80116e8:	282b883a 	mov	r21,r5
 80116ec:	002f883a 	mov	r23,zero
 80116f0:	05800044 	movi	r22,1
 80116f4:	04ffffc4 	movi	r19,-1
 80116f8:	a4400117 	ldw	r17,4(r20)
 80116fc:	a4800217 	ldw	r18,8(r20)
 8011700:	8c7fffc4 	addi	r17,r17,-1
 8011704:	88000d16 	blt	r17,zero,801173c <_fwalk+0x84>
 8011708:	94000304 	addi	r16,r18,12
 801170c:	94800384 	addi	r18,r18,14
 8011710:	8080000b 	ldhu	r2,0(r16)
 8011714:	8c7fffc4 	addi	r17,r17,-1
 8011718:	813ffd04 	addi	r4,r16,-12
 801171c:	b080042e 	bgeu	r22,r2,8011730 <_fwalk+0x78>
 8011720:	9080000f 	ldh	r2,0(r18)
 8011724:	14c00226 	beq	r2,r19,8011730 <_fwalk+0x78>
 8011728:	a83ee83a 	callr	r21
 801172c:	b8aeb03a 	or	r23,r23,r2
 8011730:	84001a04 	addi	r16,r16,104
 8011734:	94801a04 	addi	r18,r18,104
 8011738:	8cfff51e 	bne	r17,r19,8011710 <_gp+0xfffec708>
 801173c:	a5000017 	ldw	r20,0(r20)
 8011740:	a03fed1e 	bne	r20,zero,80116f8 <_gp+0xfffec6f0>
 8011744:	b805883a 	mov	r2,r23
 8011748:	dfc00817 	ldw	ra,32(sp)
 801174c:	ddc00717 	ldw	r23,28(sp)
 8011750:	dd800617 	ldw	r22,24(sp)
 8011754:	dd400517 	ldw	r21,20(sp)
 8011758:	dd000417 	ldw	r20,16(sp)
 801175c:	dcc00317 	ldw	r19,12(sp)
 8011760:	dc800217 	ldw	r18,8(sp)
 8011764:	dc400117 	ldw	r17,4(sp)
 8011768:	dc000017 	ldw	r16,0(sp)
 801176c:	dec00904 	addi	sp,sp,36
 8011770:	f800283a 	ret
 8011774:	002f883a 	mov	r23,zero
 8011778:	003ff206 	br	8011744 <_gp+0xfffec73c>

0801177c <_fwalk_reent>:
 801177c:	defff704 	addi	sp,sp,-36
 8011780:	dd000415 	stw	r20,16(sp)
 8011784:	dfc00815 	stw	ra,32(sp)
 8011788:	ddc00715 	stw	r23,28(sp)
 801178c:	dd800615 	stw	r22,24(sp)
 8011790:	dd400515 	stw	r21,20(sp)
 8011794:	dcc00315 	stw	r19,12(sp)
 8011798:	dc800215 	stw	r18,8(sp)
 801179c:	dc400115 	stw	r17,4(sp)
 80117a0:	dc000015 	stw	r16,0(sp)
 80117a4:	2500b804 	addi	r20,r4,736
 80117a8:	a0002326 	beq	r20,zero,8011838 <_fwalk_reent+0xbc>
 80117ac:	282b883a 	mov	r21,r5
 80117b0:	2027883a 	mov	r19,r4
 80117b4:	002f883a 	mov	r23,zero
 80117b8:	05800044 	movi	r22,1
 80117bc:	04bfffc4 	movi	r18,-1
 80117c0:	a4400117 	ldw	r17,4(r20)
 80117c4:	a4000217 	ldw	r16,8(r20)
 80117c8:	8c7fffc4 	addi	r17,r17,-1
 80117cc:	88000c16 	blt	r17,zero,8011800 <_fwalk_reent+0x84>
 80117d0:	84000304 	addi	r16,r16,12
 80117d4:	8080000b 	ldhu	r2,0(r16)
 80117d8:	8c7fffc4 	addi	r17,r17,-1
 80117dc:	817ffd04 	addi	r5,r16,-12
 80117e0:	b080052e 	bgeu	r22,r2,80117f8 <_fwalk_reent+0x7c>
 80117e4:	8080008f 	ldh	r2,2(r16)
 80117e8:	9809883a 	mov	r4,r19
 80117ec:	14800226 	beq	r2,r18,80117f8 <_fwalk_reent+0x7c>
 80117f0:	a83ee83a 	callr	r21
 80117f4:	b8aeb03a 	or	r23,r23,r2
 80117f8:	84001a04 	addi	r16,r16,104
 80117fc:	8cbff51e 	bne	r17,r18,80117d4 <_gp+0xfffec7cc>
 8011800:	a5000017 	ldw	r20,0(r20)
 8011804:	a03fee1e 	bne	r20,zero,80117c0 <_gp+0xfffec7b8>
 8011808:	b805883a 	mov	r2,r23
 801180c:	dfc00817 	ldw	ra,32(sp)
 8011810:	ddc00717 	ldw	r23,28(sp)
 8011814:	dd800617 	ldw	r22,24(sp)
 8011818:	dd400517 	ldw	r21,20(sp)
 801181c:	dd000417 	ldw	r20,16(sp)
 8011820:	dcc00317 	ldw	r19,12(sp)
 8011824:	dc800217 	ldw	r18,8(sp)
 8011828:	dc400117 	ldw	r17,4(sp)
 801182c:	dc000017 	ldw	r16,0(sp)
 8011830:	dec00904 	addi	sp,sp,36
 8011834:	f800283a 	ret
 8011838:	002f883a 	mov	r23,zero
 801183c:	003ff206 	br	8011808 <_gp+0xfffec800>

08011840 <__getline>:
 8011840:	300f883a 	mov	r7,r6
 8011844:	01800284 	movi	r6,10
 8011848:	801303c1 	jmpi	801303c <__getdelim>

0801184c <__itoa>:
 801184c:	30bfff84 	addi	r2,r6,-2
 8011850:	00c00884 	movi	r3,34
 8011854:	18801436 	bltu	r3,r2,80118a8 <__itoa+0x5c>
 8011858:	defffe04 	addi	sp,sp,-8
 801185c:	dfc00115 	stw	ra,4(sp)
 8011860:	dc000015 	stw	r16,0(sp)
 8011864:	00800284 	movi	r2,10
 8011868:	30800926 	beq	r6,r2,8011890 <__itoa+0x44>
 801186c:	0005883a 	mov	r2,zero
 8011870:	2821883a 	mov	r16,r5
 8011874:	288b883a 	add	r5,r5,r2
 8011878:	8012c000 	call	8012c00 <__utoa>
 801187c:	8005883a 	mov	r2,r16
 8011880:	dfc00117 	ldw	ra,4(sp)
 8011884:	dc000017 	ldw	r16,0(sp)
 8011888:	dec00204 	addi	sp,sp,8
 801188c:	f800283a 	ret
 8011890:	203ff60e 	bge	r4,zero,801186c <_gp+0xfffec864>
 8011894:	00800b44 	movi	r2,45
 8011898:	28800005 	stb	r2,0(r5)
 801189c:	0109c83a 	sub	r4,zero,r4
 80118a0:	00800044 	movi	r2,1
 80118a4:	003ff206 	br	8011870 <_gp+0xfffec868>
 80118a8:	28000005 	stb	zero,0(r5)
 80118ac:	0005883a 	mov	r2,zero
 80118b0:	f800283a 	ret

080118b4 <itoa>:
 80118b4:	801184c1 	jmpi	801184c <__itoa>

080118b8 <__smakebuf_r>:
 80118b8:	2880030b 	ldhu	r2,12(r5)
 80118bc:	10c0008c 	andi	r3,r2,2
 80118c0:	1800411e 	bne	r3,zero,80119c8 <__smakebuf_r+0x110>
 80118c4:	deffec04 	addi	sp,sp,-80
 80118c8:	dc000f15 	stw	r16,60(sp)
 80118cc:	2821883a 	mov	r16,r5
 80118d0:	2940038f 	ldh	r5,14(r5)
 80118d4:	dc401015 	stw	r17,64(sp)
 80118d8:	dfc01315 	stw	ra,76(sp)
 80118dc:	dcc01215 	stw	r19,72(sp)
 80118e0:	dc801115 	stw	r18,68(sp)
 80118e4:	2023883a 	mov	r17,r4
 80118e8:	28001c16 	blt	r5,zero,801195c <__smakebuf_r+0xa4>
 80118ec:	d80d883a 	mov	r6,sp
 80118f0:	801165c0 	call	801165c <_fstat_r>
 80118f4:	10001816 	blt	r2,zero,8011958 <__smakebuf_r+0xa0>
 80118f8:	d8800117 	ldw	r2,4(sp)
 80118fc:	00e00014 	movui	r3,32768
 8011900:	10bc000c 	andi	r2,r2,61440
 8011904:	14c80020 	cmpeqi	r19,r2,8192
 8011908:	10c03726 	beq	r2,r3,80119e8 <__smakebuf_r+0x130>
 801190c:	80c0030b 	ldhu	r3,12(r16)
 8011910:	18c20014 	ori	r3,r3,2048
 8011914:	80c0030d 	sth	r3,12(r16)
 8011918:	00c80004 	movi	r3,8192
 801191c:	10c0521e 	bne	r2,r3,8011a68 <__smakebuf_r+0x1b0>
 8011920:	8140038f 	ldh	r5,14(r16)
 8011924:	8809883a 	mov	r4,r17
 8011928:	80131a00 	call	80131a0 <_isatty_r>
 801192c:	10004c26 	beq	r2,zero,8011a60 <__smakebuf_r+0x1a8>
 8011930:	8080030b 	ldhu	r2,12(r16)
 8011934:	80c010c4 	addi	r3,r16,67
 8011938:	80c00015 	stw	r3,0(r16)
 801193c:	10800054 	ori	r2,r2,1
 8011940:	8080030d 	sth	r2,12(r16)
 8011944:	00800044 	movi	r2,1
 8011948:	80c00415 	stw	r3,16(r16)
 801194c:	80800515 	stw	r2,20(r16)
 8011950:	04810004 	movi	r18,1024
 8011954:	00000706 	br	8011974 <__smakebuf_r+0xbc>
 8011958:	8080030b 	ldhu	r2,12(r16)
 801195c:	10c0200c 	andi	r3,r2,128
 8011960:	18001f1e 	bne	r3,zero,80119e0 <__smakebuf_r+0x128>
 8011964:	04810004 	movi	r18,1024
 8011968:	10820014 	ori	r2,r2,2048
 801196c:	8080030d 	sth	r2,12(r16)
 8011970:	0027883a 	mov	r19,zero
 8011974:	900b883a 	mov	r5,r18
 8011978:	8809883a 	mov	r4,r17
 801197c:	8011a740 	call	8011a74 <_malloc_r>
 8011980:	10002c26 	beq	r2,zero,8011a34 <__smakebuf_r+0x17c>
 8011984:	80c0030b 	ldhu	r3,12(r16)
 8011988:	01020074 	movhi	r4,2049
 801198c:	21023d04 	addi	r4,r4,2292
 8011990:	89000f15 	stw	r4,60(r17)
 8011994:	18c02014 	ori	r3,r3,128
 8011998:	80c0030d 	sth	r3,12(r16)
 801199c:	80800015 	stw	r2,0(r16)
 80119a0:	80800415 	stw	r2,16(r16)
 80119a4:	84800515 	stw	r18,20(r16)
 80119a8:	98001a1e 	bne	r19,zero,8011a14 <__smakebuf_r+0x15c>
 80119ac:	dfc01317 	ldw	ra,76(sp)
 80119b0:	dcc01217 	ldw	r19,72(sp)
 80119b4:	dc801117 	ldw	r18,68(sp)
 80119b8:	dc401017 	ldw	r17,64(sp)
 80119bc:	dc000f17 	ldw	r16,60(sp)
 80119c0:	dec01404 	addi	sp,sp,80
 80119c4:	f800283a 	ret
 80119c8:	288010c4 	addi	r2,r5,67
 80119cc:	28800015 	stw	r2,0(r5)
 80119d0:	28800415 	stw	r2,16(r5)
 80119d4:	00800044 	movi	r2,1
 80119d8:	28800515 	stw	r2,20(r5)
 80119dc:	f800283a 	ret
 80119e0:	04801004 	movi	r18,64
 80119e4:	003fe006 	br	8011968 <_gp+0xfffec960>
 80119e8:	81000a17 	ldw	r4,40(r16)
 80119ec:	00c20074 	movhi	r3,2049
 80119f0:	18ca1b04 	addi	r3,r3,10348
 80119f4:	20ffc51e 	bne	r4,r3,801190c <_gp+0xfffec904>
 80119f8:	8080030b 	ldhu	r2,12(r16)
 80119fc:	04810004 	movi	r18,1024
 8011a00:	84801315 	stw	r18,76(r16)
 8011a04:	1484b03a 	or	r2,r2,r18
 8011a08:	8080030d 	sth	r2,12(r16)
 8011a0c:	0027883a 	mov	r19,zero
 8011a10:	003fd806 	br	8011974 <_gp+0xfffec96c>
 8011a14:	8140038f 	ldh	r5,14(r16)
 8011a18:	8809883a 	mov	r4,r17
 8011a1c:	80131a00 	call	80131a0 <_isatty_r>
 8011a20:	103fe226 	beq	r2,zero,80119ac <_gp+0xfffec9a4>
 8011a24:	8080030b 	ldhu	r2,12(r16)
 8011a28:	10800054 	ori	r2,r2,1
 8011a2c:	8080030d 	sth	r2,12(r16)
 8011a30:	003fde06 	br	80119ac <_gp+0xfffec9a4>
 8011a34:	8080030b 	ldhu	r2,12(r16)
 8011a38:	10c0800c 	andi	r3,r2,512
 8011a3c:	183fdb1e 	bne	r3,zero,80119ac <_gp+0xfffec9a4>
 8011a40:	10800094 	ori	r2,r2,2
 8011a44:	80c010c4 	addi	r3,r16,67
 8011a48:	8080030d 	sth	r2,12(r16)
 8011a4c:	00800044 	movi	r2,1
 8011a50:	80c00015 	stw	r3,0(r16)
 8011a54:	80c00415 	stw	r3,16(r16)
 8011a58:	80800515 	stw	r2,20(r16)
 8011a5c:	003fd306 	br	80119ac <_gp+0xfffec9a4>
 8011a60:	04810004 	movi	r18,1024
 8011a64:	003fc306 	br	8011974 <_gp+0xfffec96c>
 8011a68:	0027883a 	mov	r19,zero
 8011a6c:	04810004 	movi	r18,1024
 8011a70:	003fc006 	br	8011974 <_gp+0xfffec96c>

08011a74 <_malloc_r>:
 8011a74:	defff504 	addi	sp,sp,-44
 8011a78:	dc800315 	stw	r18,12(sp)
 8011a7c:	dfc00a15 	stw	ra,40(sp)
 8011a80:	df000915 	stw	fp,36(sp)
 8011a84:	ddc00815 	stw	r23,32(sp)
 8011a88:	dd800715 	stw	r22,28(sp)
 8011a8c:	dd400615 	stw	r21,24(sp)
 8011a90:	dd000515 	stw	r20,20(sp)
 8011a94:	dcc00415 	stw	r19,16(sp)
 8011a98:	dc400215 	stw	r17,8(sp)
 8011a9c:	dc000115 	stw	r16,4(sp)
 8011aa0:	288002c4 	addi	r2,r5,11
 8011aa4:	00c00584 	movi	r3,22
 8011aa8:	2025883a 	mov	r18,r4
 8011aac:	18807f2e 	bgeu	r3,r2,8011cac <_malloc_r+0x238>
 8011ab0:	047ffe04 	movi	r17,-8
 8011ab4:	1462703a 	and	r17,r2,r17
 8011ab8:	8800a316 	blt	r17,zero,8011d48 <_malloc_r+0x2d4>
 8011abc:	8940a236 	bltu	r17,r5,8011d48 <_malloc_r+0x2d4>
 8011ac0:	80142200 	call	8014220 <__malloc_lock>
 8011ac4:	00807dc4 	movi	r2,503
 8011ac8:	1441e92e 	bgeu	r2,r17,8012270 <_malloc_r+0x7fc>
 8011acc:	8804d27a 	srli	r2,r17,9
 8011ad0:	1000a126 	beq	r2,zero,8011d58 <_malloc_r+0x2e4>
 8011ad4:	00c00104 	movi	r3,4
 8011ad8:	18811e36 	bltu	r3,r2,8011f54 <_malloc_r+0x4e0>
 8011adc:	8804d1ba 	srli	r2,r17,6
 8011ae0:	12000e44 	addi	r8,r2,57
 8011ae4:	11c00e04 	addi	r7,r2,56
 8011ae8:	4209883a 	add	r4,r8,r8
 8011aec:	04c200b4 	movhi	r19,2050
 8011af0:	2109883a 	add	r4,r4,r4
 8011af4:	9cee6904 	addi	r19,r19,-18012
 8011af8:	2109883a 	add	r4,r4,r4
 8011afc:	9909883a 	add	r4,r19,r4
 8011b00:	24000117 	ldw	r16,4(r4)
 8011b04:	213ffe04 	addi	r4,r4,-8
 8011b08:	24009726 	beq	r4,r16,8011d68 <_malloc_r+0x2f4>
 8011b0c:	80800117 	ldw	r2,4(r16)
 8011b10:	01bfff04 	movi	r6,-4
 8011b14:	014003c4 	movi	r5,15
 8011b18:	1184703a 	and	r2,r2,r6
 8011b1c:	1447c83a 	sub	r3,r2,r17
 8011b20:	28c00716 	blt	r5,r3,8011b40 <_malloc_r+0xcc>
 8011b24:	1800920e 	bge	r3,zero,8011d70 <_malloc_r+0x2fc>
 8011b28:	84000317 	ldw	r16,12(r16)
 8011b2c:	24008e26 	beq	r4,r16,8011d68 <_malloc_r+0x2f4>
 8011b30:	80800117 	ldw	r2,4(r16)
 8011b34:	1184703a 	and	r2,r2,r6
 8011b38:	1447c83a 	sub	r3,r2,r17
 8011b3c:	28fff90e 	bge	r5,r3,8011b24 <_gp+0xfffecb1c>
 8011b40:	3809883a 	mov	r4,r7
 8011b44:	018200b4 	movhi	r6,2050
 8011b48:	9c000417 	ldw	r16,16(r19)
 8011b4c:	31ae6904 	addi	r6,r6,-18012
 8011b50:	32000204 	addi	r8,r6,8
 8011b54:	82013426 	beq	r16,r8,8012028 <_malloc_r+0x5b4>
 8011b58:	80c00117 	ldw	r3,4(r16)
 8011b5c:	00bfff04 	movi	r2,-4
 8011b60:	188e703a 	and	r7,r3,r2
 8011b64:	3c45c83a 	sub	r2,r7,r17
 8011b68:	00c003c4 	movi	r3,15
 8011b6c:	18811f16 	blt	r3,r2,8011fec <_malloc_r+0x578>
 8011b70:	32000515 	stw	r8,20(r6)
 8011b74:	32000415 	stw	r8,16(r6)
 8011b78:	10007f0e 	bge	r2,zero,8011d78 <_malloc_r+0x304>
 8011b7c:	00807fc4 	movi	r2,511
 8011b80:	11c0fd36 	bltu	r2,r7,8011f78 <_malloc_r+0x504>
 8011b84:	3806d0fa 	srli	r3,r7,3
 8011b88:	01c00044 	movi	r7,1
 8011b8c:	30800117 	ldw	r2,4(r6)
 8011b90:	19400044 	addi	r5,r3,1
 8011b94:	294b883a 	add	r5,r5,r5
 8011b98:	1807d0ba 	srai	r3,r3,2
 8011b9c:	294b883a 	add	r5,r5,r5
 8011ba0:	294b883a 	add	r5,r5,r5
 8011ba4:	298b883a 	add	r5,r5,r6
 8011ba8:	38c6983a 	sll	r3,r7,r3
 8011bac:	29c00017 	ldw	r7,0(r5)
 8011bb0:	2a7ffe04 	addi	r9,r5,-8
 8011bb4:	1886b03a 	or	r3,r3,r2
 8011bb8:	82400315 	stw	r9,12(r16)
 8011bbc:	81c00215 	stw	r7,8(r16)
 8011bc0:	30c00115 	stw	r3,4(r6)
 8011bc4:	2c000015 	stw	r16,0(r5)
 8011bc8:	3c000315 	stw	r16,12(r7)
 8011bcc:	2005d0ba 	srai	r2,r4,2
 8011bd0:	01400044 	movi	r5,1
 8011bd4:	288a983a 	sll	r5,r5,r2
 8011bd8:	19406f36 	bltu	r3,r5,8011d98 <_malloc_r+0x324>
 8011bdc:	28c4703a 	and	r2,r5,r3
 8011be0:	10000a1e 	bne	r2,zero,8011c0c <_malloc_r+0x198>
 8011be4:	00bfff04 	movi	r2,-4
 8011be8:	294b883a 	add	r5,r5,r5
 8011bec:	2088703a 	and	r4,r4,r2
 8011bf0:	28c4703a 	and	r2,r5,r3
 8011bf4:	21000104 	addi	r4,r4,4
 8011bf8:	1000041e 	bne	r2,zero,8011c0c <_malloc_r+0x198>
 8011bfc:	294b883a 	add	r5,r5,r5
 8011c00:	28c4703a 	and	r2,r5,r3
 8011c04:	21000104 	addi	r4,r4,4
 8011c08:	103ffc26 	beq	r2,zero,8011bfc <_gp+0xfffecbf4>
 8011c0c:	02bfff04 	movi	r10,-4
 8011c10:	024003c4 	movi	r9,15
 8011c14:	21800044 	addi	r6,r4,1
 8011c18:	318d883a 	add	r6,r6,r6
 8011c1c:	318d883a 	add	r6,r6,r6
 8011c20:	318d883a 	add	r6,r6,r6
 8011c24:	998d883a 	add	r6,r19,r6
 8011c28:	333ffe04 	addi	r12,r6,-8
 8011c2c:	2017883a 	mov	r11,r4
 8011c30:	31800104 	addi	r6,r6,4
 8011c34:	34000017 	ldw	r16,0(r6)
 8011c38:	31fffd04 	addi	r7,r6,-12
 8011c3c:	81c0041e 	bne	r16,r7,8011c50 <_malloc_r+0x1dc>
 8011c40:	0000fb06 	br	8012030 <_malloc_r+0x5bc>
 8011c44:	1801030e 	bge	r3,zero,8012054 <_malloc_r+0x5e0>
 8011c48:	84000317 	ldw	r16,12(r16)
 8011c4c:	81c0f826 	beq	r16,r7,8012030 <_malloc_r+0x5bc>
 8011c50:	80800117 	ldw	r2,4(r16)
 8011c54:	1284703a 	and	r2,r2,r10
 8011c58:	1447c83a 	sub	r3,r2,r17
 8011c5c:	48fff90e 	bge	r9,r3,8011c44 <_gp+0xfffecc3c>
 8011c60:	80800317 	ldw	r2,12(r16)
 8011c64:	81000217 	ldw	r4,8(r16)
 8011c68:	89400054 	ori	r5,r17,1
 8011c6c:	81400115 	stw	r5,4(r16)
 8011c70:	20800315 	stw	r2,12(r4)
 8011c74:	11000215 	stw	r4,8(r2)
 8011c78:	8463883a 	add	r17,r16,r17
 8011c7c:	9c400515 	stw	r17,20(r19)
 8011c80:	9c400415 	stw	r17,16(r19)
 8011c84:	18800054 	ori	r2,r3,1
 8011c88:	88800115 	stw	r2,4(r17)
 8011c8c:	8a000315 	stw	r8,12(r17)
 8011c90:	8a000215 	stw	r8,8(r17)
 8011c94:	88e3883a 	add	r17,r17,r3
 8011c98:	88c00015 	stw	r3,0(r17)
 8011c9c:	9009883a 	mov	r4,r18
 8011ca0:	80142440 	call	8014244 <__malloc_unlock>
 8011ca4:	80800204 	addi	r2,r16,8
 8011ca8:	00001b06 	br	8011d18 <_malloc_r+0x2a4>
 8011cac:	04400404 	movi	r17,16
 8011cb0:	89402536 	bltu	r17,r5,8011d48 <_malloc_r+0x2d4>
 8011cb4:	80142200 	call	8014220 <__malloc_lock>
 8011cb8:	00800184 	movi	r2,6
 8011cbc:	01000084 	movi	r4,2
 8011cc0:	04c200b4 	movhi	r19,2050
 8011cc4:	1085883a 	add	r2,r2,r2
 8011cc8:	9cee6904 	addi	r19,r19,-18012
 8011ccc:	1085883a 	add	r2,r2,r2
 8011cd0:	9885883a 	add	r2,r19,r2
 8011cd4:	14000117 	ldw	r16,4(r2)
 8011cd8:	10fffe04 	addi	r3,r2,-8
 8011cdc:	80c0d926 	beq	r16,r3,8012044 <_malloc_r+0x5d0>
 8011ce0:	80c00117 	ldw	r3,4(r16)
 8011ce4:	81000317 	ldw	r4,12(r16)
 8011ce8:	00bfff04 	movi	r2,-4
 8011cec:	1884703a 	and	r2,r3,r2
 8011cf0:	81400217 	ldw	r5,8(r16)
 8011cf4:	8085883a 	add	r2,r16,r2
 8011cf8:	10c00117 	ldw	r3,4(r2)
 8011cfc:	29000315 	stw	r4,12(r5)
 8011d00:	21400215 	stw	r5,8(r4)
 8011d04:	18c00054 	ori	r3,r3,1
 8011d08:	10c00115 	stw	r3,4(r2)
 8011d0c:	9009883a 	mov	r4,r18
 8011d10:	80142440 	call	8014244 <__malloc_unlock>
 8011d14:	80800204 	addi	r2,r16,8
 8011d18:	dfc00a17 	ldw	ra,40(sp)
 8011d1c:	df000917 	ldw	fp,36(sp)
 8011d20:	ddc00817 	ldw	r23,32(sp)
 8011d24:	dd800717 	ldw	r22,28(sp)
 8011d28:	dd400617 	ldw	r21,24(sp)
 8011d2c:	dd000517 	ldw	r20,20(sp)
 8011d30:	dcc00417 	ldw	r19,16(sp)
 8011d34:	dc800317 	ldw	r18,12(sp)
 8011d38:	dc400217 	ldw	r17,8(sp)
 8011d3c:	dc000117 	ldw	r16,4(sp)
 8011d40:	dec00b04 	addi	sp,sp,44
 8011d44:	f800283a 	ret
 8011d48:	00800304 	movi	r2,12
 8011d4c:	90800015 	stw	r2,0(r18)
 8011d50:	0005883a 	mov	r2,zero
 8011d54:	003ff006 	br	8011d18 <_gp+0xfffecd10>
 8011d58:	01002004 	movi	r4,128
 8011d5c:	02001004 	movi	r8,64
 8011d60:	01c00fc4 	movi	r7,63
 8011d64:	003f6106 	br	8011aec <_gp+0xfffecae4>
 8011d68:	4009883a 	mov	r4,r8
 8011d6c:	003f7506 	br	8011b44 <_gp+0xfffecb3c>
 8011d70:	81000317 	ldw	r4,12(r16)
 8011d74:	003fde06 	br	8011cf0 <_gp+0xfffecce8>
 8011d78:	81c5883a 	add	r2,r16,r7
 8011d7c:	11400117 	ldw	r5,4(r2)
 8011d80:	9009883a 	mov	r4,r18
 8011d84:	29400054 	ori	r5,r5,1
 8011d88:	11400115 	stw	r5,4(r2)
 8011d8c:	80142440 	call	8014244 <__malloc_unlock>
 8011d90:	80800204 	addi	r2,r16,8
 8011d94:	003fe006 	br	8011d18 <_gp+0xfffecd10>
 8011d98:	9c000217 	ldw	r16,8(r19)
 8011d9c:	00bfff04 	movi	r2,-4
 8011da0:	85800117 	ldw	r22,4(r16)
 8011da4:	b0ac703a 	and	r22,r22,r2
 8011da8:	b4400336 	bltu	r22,r17,8011db8 <_malloc_r+0x344>
 8011dac:	b445c83a 	sub	r2,r22,r17
 8011db0:	00c003c4 	movi	r3,15
 8011db4:	18805d16 	blt	r3,r2,8011f2c <_malloc_r+0x4b8>
 8011db8:	05c200b4 	movhi	r23,2050
 8011dbc:	008200b4 	movhi	r2,2050
 8011dc0:	10bae904 	addi	r2,r2,-5212
 8011dc4:	bdf40404 	addi	r23,r23,-12272
 8011dc8:	15400017 	ldw	r21,0(r2)
 8011dcc:	b8c00017 	ldw	r3,0(r23)
 8011dd0:	00bfffc4 	movi	r2,-1
 8011dd4:	858d883a 	add	r6,r16,r22
 8011dd8:	8d6b883a 	add	r21,r17,r21
 8011ddc:	1880ea26 	beq	r3,r2,8012188 <_malloc_r+0x714>
 8011de0:	ad4403c4 	addi	r21,r21,4111
 8011de4:	00bc0004 	movi	r2,-4096
 8011de8:	a8aa703a 	and	r21,r21,r2
 8011dec:	a80b883a 	mov	r5,r21
 8011df0:	9009883a 	mov	r4,r18
 8011df4:	d9800015 	stw	r6,0(sp)
 8011df8:	80127400 	call	8012740 <_sbrk_r>
 8011dfc:	1029883a 	mov	r20,r2
 8011e00:	00bfffc4 	movi	r2,-1
 8011e04:	d9800017 	ldw	r6,0(sp)
 8011e08:	a080e826 	beq	r20,r2,80121ac <_malloc_r+0x738>
 8011e0c:	a180a636 	bltu	r20,r6,80120a8 <_malloc_r+0x634>
 8011e10:	070200b4 	movhi	fp,2050
 8011e14:	e73afe04 	addi	fp,fp,-5128
 8011e18:	e0800017 	ldw	r2,0(fp)
 8011e1c:	a887883a 	add	r3,r21,r2
 8011e20:	e0c00015 	stw	r3,0(fp)
 8011e24:	3500e626 	beq	r6,r20,80121c0 <_malloc_r+0x74c>
 8011e28:	b9000017 	ldw	r4,0(r23)
 8011e2c:	00bfffc4 	movi	r2,-1
 8011e30:	2080ee26 	beq	r4,r2,80121ec <_malloc_r+0x778>
 8011e34:	a185c83a 	sub	r2,r20,r6
 8011e38:	10c5883a 	add	r2,r2,r3
 8011e3c:	e0800015 	stw	r2,0(fp)
 8011e40:	a0c001cc 	andi	r3,r20,7
 8011e44:	1800bc26 	beq	r3,zero,8012138 <_malloc_r+0x6c4>
 8011e48:	a0e9c83a 	sub	r20,r20,r3
 8011e4c:	00840204 	movi	r2,4104
 8011e50:	a5000204 	addi	r20,r20,8
 8011e54:	10c7c83a 	sub	r3,r2,r3
 8011e58:	a545883a 	add	r2,r20,r21
 8011e5c:	1083ffcc 	andi	r2,r2,4095
 8011e60:	18abc83a 	sub	r21,r3,r2
 8011e64:	a80b883a 	mov	r5,r21
 8011e68:	9009883a 	mov	r4,r18
 8011e6c:	80127400 	call	8012740 <_sbrk_r>
 8011e70:	00ffffc4 	movi	r3,-1
 8011e74:	10c0e126 	beq	r2,r3,80121fc <_malloc_r+0x788>
 8011e78:	1505c83a 	sub	r2,r2,r20
 8011e7c:	1545883a 	add	r2,r2,r21
 8011e80:	10800054 	ori	r2,r2,1
 8011e84:	e0c00017 	ldw	r3,0(fp)
 8011e88:	9d000215 	stw	r20,8(r19)
 8011e8c:	a0800115 	stw	r2,4(r20)
 8011e90:	a8c7883a 	add	r3,r21,r3
 8011e94:	e0c00015 	stw	r3,0(fp)
 8011e98:	84c00e26 	beq	r16,r19,8011ed4 <_malloc_r+0x460>
 8011e9c:	018003c4 	movi	r6,15
 8011ea0:	3580a72e 	bgeu	r6,r22,8012140 <_malloc_r+0x6cc>
 8011ea4:	81400117 	ldw	r5,4(r16)
 8011ea8:	013ffe04 	movi	r4,-8
 8011eac:	b0bffd04 	addi	r2,r22,-12
 8011eb0:	1104703a 	and	r2,r2,r4
 8011eb4:	2900004c 	andi	r4,r5,1
 8011eb8:	2088b03a 	or	r4,r4,r2
 8011ebc:	81000115 	stw	r4,4(r16)
 8011ec0:	01400144 	movi	r5,5
 8011ec4:	8089883a 	add	r4,r16,r2
 8011ec8:	21400115 	stw	r5,4(r4)
 8011ecc:	21400215 	stw	r5,8(r4)
 8011ed0:	3080cd36 	bltu	r6,r2,8012208 <_malloc_r+0x794>
 8011ed4:	008200b4 	movhi	r2,2050
 8011ed8:	10bae804 	addi	r2,r2,-5216
 8011edc:	11000017 	ldw	r4,0(r2)
 8011ee0:	20c0012e 	bgeu	r4,r3,8011ee8 <_malloc_r+0x474>
 8011ee4:	10c00015 	stw	r3,0(r2)
 8011ee8:	008200b4 	movhi	r2,2050
 8011eec:	10bae704 	addi	r2,r2,-5220
 8011ef0:	11000017 	ldw	r4,0(r2)
 8011ef4:	9c000217 	ldw	r16,8(r19)
 8011ef8:	20c0012e 	bgeu	r4,r3,8011f00 <_malloc_r+0x48c>
 8011efc:	10c00015 	stw	r3,0(r2)
 8011f00:	80c00117 	ldw	r3,4(r16)
 8011f04:	00bfff04 	movi	r2,-4
 8011f08:	1886703a 	and	r3,r3,r2
 8011f0c:	1c45c83a 	sub	r2,r3,r17
 8011f10:	1c400236 	bltu	r3,r17,8011f1c <_malloc_r+0x4a8>
 8011f14:	00c003c4 	movi	r3,15
 8011f18:	18800416 	blt	r3,r2,8011f2c <_malloc_r+0x4b8>
 8011f1c:	9009883a 	mov	r4,r18
 8011f20:	80142440 	call	8014244 <__malloc_unlock>
 8011f24:	0005883a 	mov	r2,zero
 8011f28:	003f7b06 	br	8011d18 <_gp+0xfffecd10>
 8011f2c:	88c00054 	ori	r3,r17,1
 8011f30:	80c00115 	stw	r3,4(r16)
 8011f34:	8463883a 	add	r17,r16,r17
 8011f38:	10800054 	ori	r2,r2,1
 8011f3c:	9c400215 	stw	r17,8(r19)
 8011f40:	88800115 	stw	r2,4(r17)
 8011f44:	9009883a 	mov	r4,r18
 8011f48:	80142440 	call	8014244 <__malloc_unlock>
 8011f4c:	80800204 	addi	r2,r16,8
 8011f50:	003f7106 	br	8011d18 <_gp+0xfffecd10>
 8011f54:	00c00504 	movi	r3,20
 8011f58:	18804a2e 	bgeu	r3,r2,8012084 <_malloc_r+0x610>
 8011f5c:	00c01504 	movi	r3,84
 8011f60:	18806e36 	bltu	r3,r2,801211c <_malloc_r+0x6a8>
 8011f64:	8804d33a 	srli	r2,r17,12
 8011f68:	12001bc4 	addi	r8,r2,111
 8011f6c:	11c01b84 	addi	r7,r2,110
 8011f70:	4209883a 	add	r4,r8,r8
 8011f74:	003edd06 	br	8011aec <_gp+0xfffecae4>
 8011f78:	3804d27a 	srli	r2,r7,9
 8011f7c:	00c00104 	movi	r3,4
 8011f80:	1880442e 	bgeu	r3,r2,8012094 <_malloc_r+0x620>
 8011f84:	00c00504 	movi	r3,20
 8011f88:	18808136 	bltu	r3,r2,8012190 <_malloc_r+0x71c>
 8011f8c:	11401704 	addi	r5,r2,92
 8011f90:	10c016c4 	addi	r3,r2,91
 8011f94:	294b883a 	add	r5,r5,r5
 8011f98:	294b883a 	add	r5,r5,r5
 8011f9c:	294b883a 	add	r5,r5,r5
 8011fa0:	994b883a 	add	r5,r19,r5
 8011fa4:	28800017 	ldw	r2,0(r5)
 8011fa8:	018200b4 	movhi	r6,2050
 8011fac:	297ffe04 	addi	r5,r5,-8
 8011fb0:	31ae6904 	addi	r6,r6,-18012
 8011fb4:	28806526 	beq	r5,r2,801214c <_malloc_r+0x6d8>
 8011fb8:	01bfff04 	movi	r6,-4
 8011fbc:	10c00117 	ldw	r3,4(r2)
 8011fc0:	1986703a 	and	r3,r3,r6
 8011fc4:	38c0022e 	bgeu	r7,r3,8011fd0 <_malloc_r+0x55c>
 8011fc8:	10800217 	ldw	r2,8(r2)
 8011fcc:	28bffb1e 	bne	r5,r2,8011fbc <_gp+0xfffecfb4>
 8011fd0:	11400317 	ldw	r5,12(r2)
 8011fd4:	98c00117 	ldw	r3,4(r19)
 8011fd8:	81400315 	stw	r5,12(r16)
 8011fdc:	80800215 	stw	r2,8(r16)
 8011fe0:	2c000215 	stw	r16,8(r5)
 8011fe4:	14000315 	stw	r16,12(r2)
 8011fe8:	003ef806 	br	8011bcc <_gp+0xfffecbc4>
 8011fec:	88c00054 	ori	r3,r17,1
 8011ff0:	80c00115 	stw	r3,4(r16)
 8011ff4:	8463883a 	add	r17,r16,r17
 8011ff8:	34400515 	stw	r17,20(r6)
 8011ffc:	34400415 	stw	r17,16(r6)
 8012000:	10c00054 	ori	r3,r2,1
 8012004:	8a000315 	stw	r8,12(r17)
 8012008:	8a000215 	stw	r8,8(r17)
 801200c:	88c00115 	stw	r3,4(r17)
 8012010:	88a3883a 	add	r17,r17,r2
 8012014:	88800015 	stw	r2,0(r17)
 8012018:	9009883a 	mov	r4,r18
 801201c:	80142440 	call	8014244 <__malloc_unlock>
 8012020:	80800204 	addi	r2,r16,8
 8012024:	003f3c06 	br	8011d18 <_gp+0xfffecd10>
 8012028:	30c00117 	ldw	r3,4(r6)
 801202c:	003ee706 	br	8011bcc <_gp+0xfffecbc4>
 8012030:	5ac00044 	addi	r11,r11,1
 8012034:	588000cc 	andi	r2,r11,3
 8012038:	31800204 	addi	r6,r6,8
 801203c:	103efd1e 	bne	r2,zero,8011c34 <_gp+0xfffecc2c>
 8012040:	00002406 	br	80120d4 <_malloc_r+0x660>
 8012044:	14000317 	ldw	r16,12(r2)
 8012048:	143f251e 	bne	r2,r16,8011ce0 <_gp+0xfffeccd8>
 801204c:	21000084 	addi	r4,r4,2
 8012050:	003ebc06 	br	8011b44 <_gp+0xfffecb3c>
 8012054:	8085883a 	add	r2,r16,r2
 8012058:	10c00117 	ldw	r3,4(r2)
 801205c:	81000317 	ldw	r4,12(r16)
 8012060:	81400217 	ldw	r5,8(r16)
 8012064:	18c00054 	ori	r3,r3,1
 8012068:	10c00115 	stw	r3,4(r2)
 801206c:	29000315 	stw	r4,12(r5)
 8012070:	21400215 	stw	r5,8(r4)
 8012074:	9009883a 	mov	r4,r18
 8012078:	80142440 	call	8014244 <__malloc_unlock>
 801207c:	80800204 	addi	r2,r16,8
 8012080:	003f2506 	br	8011d18 <_gp+0xfffecd10>
 8012084:	12001704 	addi	r8,r2,92
 8012088:	11c016c4 	addi	r7,r2,91
 801208c:	4209883a 	add	r4,r8,r8
 8012090:	003e9606 	br	8011aec <_gp+0xfffecae4>
 8012094:	3804d1ba 	srli	r2,r7,6
 8012098:	11400e44 	addi	r5,r2,57
 801209c:	10c00e04 	addi	r3,r2,56
 80120a0:	294b883a 	add	r5,r5,r5
 80120a4:	003fbc06 	br	8011f98 <_gp+0xfffecf90>
 80120a8:	84ff5926 	beq	r16,r19,8011e10 <_gp+0xfffece08>
 80120ac:	008200b4 	movhi	r2,2050
 80120b0:	10ae6904 	addi	r2,r2,-18012
 80120b4:	14000217 	ldw	r16,8(r2)
 80120b8:	00bfff04 	movi	r2,-4
 80120bc:	80c00117 	ldw	r3,4(r16)
 80120c0:	1886703a 	and	r3,r3,r2
 80120c4:	003f9106 	br	8011f0c <_gp+0xfffecf04>
 80120c8:	60800217 	ldw	r2,8(r12)
 80120cc:	213fffc4 	addi	r4,r4,-1
 80120d0:	1300651e 	bne	r2,r12,8012268 <_malloc_r+0x7f4>
 80120d4:	208000cc 	andi	r2,r4,3
 80120d8:	633ffe04 	addi	r12,r12,-8
 80120dc:	103ffa1e 	bne	r2,zero,80120c8 <_gp+0xfffed0c0>
 80120e0:	98800117 	ldw	r2,4(r19)
 80120e4:	0146303a 	nor	r3,zero,r5
 80120e8:	1884703a 	and	r2,r3,r2
 80120ec:	98800115 	stw	r2,4(r19)
 80120f0:	294b883a 	add	r5,r5,r5
 80120f4:	117f2836 	bltu	r2,r5,8011d98 <_gp+0xfffecd90>
 80120f8:	283f2726 	beq	r5,zero,8011d98 <_gp+0xfffecd90>
 80120fc:	2886703a 	and	r3,r5,r2
 8012100:	5809883a 	mov	r4,r11
 8012104:	183ec31e 	bne	r3,zero,8011c14 <_gp+0xfffecc0c>
 8012108:	294b883a 	add	r5,r5,r5
 801210c:	2886703a 	and	r3,r5,r2
 8012110:	21000104 	addi	r4,r4,4
 8012114:	183ffc26 	beq	r3,zero,8012108 <_gp+0xfffed100>
 8012118:	003ebe06 	br	8011c14 <_gp+0xfffecc0c>
 801211c:	00c05504 	movi	r3,340
 8012120:	18801236 	bltu	r3,r2,801216c <_malloc_r+0x6f8>
 8012124:	8804d3fa 	srli	r2,r17,15
 8012128:	12001e04 	addi	r8,r2,120
 801212c:	11c01dc4 	addi	r7,r2,119
 8012130:	4209883a 	add	r4,r8,r8
 8012134:	003e6d06 	br	8011aec <_gp+0xfffecae4>
 8012138:	00c40004 	movi	r3,4096
 801213c:	003f4606 	br	8011e58 <_gp+0xfffece50>
 8012140:	00800044 	movi	r2,1
 8012144:	a0800115 	stw	r2,4(r20)
 8012148:	003f7406 	br	8011f1c <_gp+0xfffecf14>
 801214c:	1805d0ba 	srai	r2,r3,2
 8012150:	01c00044 	movi	r7,1
 8012154:	30c00117 	ldw	r3,4(r6)
 8012158:	388e983a 	sll	r7,r7,r2
 801215c:	2805883a 	mov	r2,r5
 8012160:	38c6b03a 	or	r3,r7,r3
 8012164:	30c00115 	stw	r3,4(r6)
 8012168:	003f9b06 	br	8011fd8 <_gp+0xfffecfd0>
 801216c:	00c15504 	movi	r3,1364
 8012170:	18801a36 	bltu	r3,r2,80121dc <_malloc_r+0x768>
 8012174:	8804d4ba 	srli	r2,r17,18
 8012178:	12001f44 	addi	r8,r2,125
 801217c:	11c01f04 	addi	r7,r2,124
 8012180:	4209883a 	add	r4,r8,r8
 8012184:	003e5906 	br	8011aec <_gp+0xfffecae4>
 8012188:	ad400404 	addi	r21,r21,16
 801218c:	003f1706 	br	8011dec <_gp+0xfffecde4>
 8012190:	00c01504 	movi	r3,84
 8012194:	18802336 	bltu	r3,r2,8012224 <_malloc_r+0x7b0>
 8012198:	3804d33a 	srli	r2,r7,12
 801219c:	11401bc4 	addi	r5,r2,111
 80121a0:	10c01b84 	addi	r3,r2,110
 80121a4:	294b883a 	add	r5,r5,r5
 80121a8:	003f7b06 	br	8011f98 <_gp+0xfffecf90>
 80121ac:	9c000217 	ldw	r16,8(r19)
 80121b0:	00bfff04 	movi	r2,-4
 80121b4:	80c00117 	ldw	r3,4(r16)
 80121b8:	1886703a 	and	r3,r3,r2
 80121bc:	003f5306 	br	8011f0c <_gp+0xfffecf04>
 80121c0:	3083ffcc 	andi	r2,r6,4095
 80121c4:	103f181e 	bne	r2,zero,8011e28 <_gp+0xfffece20>
 80121c8:	99000217 	ldw	r4,8(r19)
 80121cc:	b545883a 	add	r2,r22,r21
 80121d0:	10800054 	ori	r2,r2,1
 80121d4:	20800115 	stw	r2,4(r4)
 80121d8:	003f3e06 	br	8011ed4 <_gp+0xfffececc>
 80121dc:	01003f84 	movi	r4,254
 80121e0:	02001fc4 	movi	r8,127
 80121e4:	01c01f84 	movi	r7,126
 80121e8:	003e4006 	br	8011aec <_gp+0xfffecae4>
 80121ec:	008200b4 	movhi	r2,2050
 80121f0:	10b40404 	addi	r2,r2,-12272
 80121f4:	15000015 	stw	r20,0(r2)
 80121f8:	003f1106 	br	8011e40 <_gp+0xfffece38>
 80121fc:	00800044 	movi	r2,1
 8012200:	002b883a 	mov	r21,zero
 8012204:	003f1f06 	br	8011e84 <_gp+0xfffece7c>
 8012208:	81400204 	addi	r5,r16,8
 801220c:	9009883a 	mov	r4,r18
 8012210:	8010ecc0 	call	8010ecc <_free_r>
 8012214:	008200b4 	movhi	r2,2050
 8012218:	10bafe04 	addi	r2,r2,-5128
 801221c:	10c00017 	ldw	r3,0(r2)
 8012220:	003f2c06 	br	8011ed4 <_gp+0xfffececc>
 8012224:	00c05504 	movi	r3,340
 8012228:	18800536 	bltu	r3,r2,8012240 <_malloc_r+0x7cc>
 801222c:	3804d3fa 	srli	r2,r7,15
 8012230:	11401e04 	addi	r5,r2,120
 8012234:	10c01dc4 	addi	r3,r2,119
 8012238:	294b883a 	add	r5,r5,r5
 801223c:	003f5606 	br	8011f98 <_gp+0xfffecf90>
 8012240:	00c15504 	movi	r3,1364
 8012244:	18800536 	bltu	r3,r2,801225c <_malloc_r+0x7e8>
 8012248:	3804d4ba 	srli	r2,r7,18
 801224c:	11401f44 	addi	r5,r2,125
 8012250:	10c01f04 	addi	r3,r2,124
 8012254:	294b883a 	add	r5,r5,r5
 8012258:	003f4f06 	br	8011f98 <_gp+0xfffecf90>
 801225c:	01403f84 	movi	r5,254
 8012260:	00c01f84 	movi	r3,126
 8012264:	003f4c06 	br	8011f98 <_gp+0xfffecf90>
 8012268:	98800117 	ldw	r2,4(r19)
 801226c:	003fa006 	br	80120f0 <_gp+0xfffed0e8>
 8012270:	8808d0fa 	srli	r4,r17,3
 8012274:	20800044 	addi	r2,r4,1
 8012278:	1085883a 	add	r2,r2,r2
 801227c:	003e9006 	br	8011cc0 <_gp+0xfffeccb8>

08012280 <memcpy>:
 8012280:	defffd04 	addi	sp,sp,-12
 8012284:	dfc00215 	stw	ra,8(sp)
 8012288:	dc400115 	stw	r17,4(sp)
 801228c:	dc000015 	stw	r16,0(sp)
 8012290:	00c003c4 	movi	r3,15
 8012294:	2005883a 	mov	r2,r4
 8012298:	1980452e 	bgeu	r3,r6,80123b0 <memcpy+0x130>
 801229c:	2906b03a 	or	r3,r5,r4
 80122a0:	18c000cc 	andi	r3,r3,3
 80122a4:	1800441e 	bne	r3,zero,80123b8 <memcpy+0x138>
 80122a8:	347ffc04 	addi	r17,r6,-16
 80122ac:	8822d13a 	srli	r17,r17,4
 80122b0:	28c00104 	addi	r3,r5,4
 80122b4:	23400104 	addi	r13,r4,4
 80122b8:	8820913a 	slli	r16,r17,4
 80122bc:	2b000204 	addi	r12,r5,8
 80122c0:	22c00204 	addi	r11,r4,8
 80122c4:	84000504 	addi	r16,r16,20
 80122c8:	2a800304 	addi	r10,r5,12
 80122cc:	22400304 	addi	r9,r4,12
 80122d0:	2c21883a 	add	r16,r5,r16
 80122d4:	2811883a 	mov	r8,r5
 80122d8:	200f883a 	mov	r7,r4
 80122dc:	41000017 	ldw	r4,0(r8)
 80122e0:	1fc00017 	ldw	ra,0(r3)
 80122e4:	63c00017 	ldw	r15,0(r12)
 80122e8:	39000015 	stw	r4,0(r7)
 80122ec:	53800017 	ldw	r14,0(r10)
 80122f0:	6fc00015 	stw	ra,0(r13)
 80122f4:	5bc00015 	stw	r15,0(r11)
 80122f8:	4b800015 	stw	r14,0(r9)
 80122fc:	18c00404 	addi	r3,r3,16
 8012300:	39c00404 	addi	r7,r7,16
 8012304:	42000404 	addi	r8,r8,16
 8012308:	6b400404 	addi	r13,r13,16
 801230c:	63000404 	addi	r12,r12,16
 8012310:	5ac00404 	addi	r11,r11,16
 8012314:	52800404 	addi	r10,r10,16
 8012318:	4a400404 	addi	r9,r9,16
 801231c:	1c3fef1e 	bne	r3,r16,80122dc <_gp+0xfffed2d4>
 8012320:	89c00044 	addi	r7,r17,1
 8012324:	380e913a 	slli	r7,r7,4
 8012328:	310003cc 	andi	r4,r6,15
 801232c:	02c000c4 	movi	r11,3
 8012330:	11c7883a 	add	r3,r2,r7
 8012334:	29cb883a 	add	r5,r5,r7
 8012338:	5900212e 	bgeu	r11,r4,80123c0 <memcpy+0x140>
 801233c:	1813883a 	mov	r9,r3
 8012340:	2811883a 	mov	r8,r5
 8012344:	200f883a 	mov	r7,r4
 8012348:	42800017 	ldw	r10,0(r8)
 801234c:	4a400104 	addi	r9,r9,4
 8012350:	39ffff04 	addi	r7,r7,-4
 8012354:	4abfff15 	stw	r10,-4(r9)
 8012358:	42000104 	addi	r8,r8,4
 801235c:	59fffa36 	bltu	r11,r7,8012348 <_gp+0xfffed340>
 8012360:	213fff04 	addi	r4,r4,-4
 8012364:	2008d0ba 	srli	r4,r4,2
 8012368:	318000cc 	andi	r6,r6,3
 801236c:	21000044 	addi	r4,r4,1
 8012370:	2109883a 	add	r4,r4,r4
 8012374:	2109883a 	add	r4,r4,r4
 8012378:	1907883a 	add	r3,r3,r4
 801237c:	290b883a 	add	r5,r5,r4
 8012380:	30000626 	beq	r6,zero,801239c <memcpy+0x11c>
 8012384:	198d883a 	add	r6,r3,r6
 8012388:	29c00003 	ldbu	r7,0(r5)
 801238c:	18c00044 	addi	r3,r3,1
 8012390:	29400044 	addi	r5,r5,1
 8012394:	19ffffc5 	stb	r7,-1(r3)
 8012398:	19bffb1e 	bne	r3,r6,8012388 <_gp+0xfffed380>
 801239c:	dfc00217 	ldw	ra,8(sp)
 80123a0:	dc400117 	ldw	r17,4(sp)
 80123a4:	dc000017 	ldw	r16,0(sp)
 80123a8:	dec00304 	addi	sp,sp,12
 80123ac:	f800283a 	ret
 80123b0:	2007883a 	mov	r3,r4
 80123b4:	003ff206 	br	8012380 <_gp+0xfffed378>
 80123b8:	2007883a 	mov	r3,r4
 80123bc:	003ff106 	br	8012384 <_gp+0xfffed37c>
 80123c0:	200d883a 	mov	r6,r4
 80123c4:	003fee06 	br	8012380 <_gp+0xfffed378>

080123c8 <memset>:
 80123c8:	20c000cc 	andi	r3,r4,3
 80123cc:	2005883a 	mov	r2,r4
 80123d0:	18004426 	beq	r3,zero,80124e4 <memset+0x11c>
 80123d4:	31ffffc4 	addi	r7,r6,-1
 80123d8:	30004026 	beq	r6,zero,80124dc <memset+0x114>
 80123dc:	2813883a 	mov	r9,r5
 80123e0:	200d883a 	mov	r6,r4
 80123e4:	2007883a 	mov	r3,r4
 80123e8:	00000406 	br	80123fc <memset+0x34>
 80123ec:	3a3fffc4 	addi	r8,r7,-1
 80123f0:	31800044 	addi	r6,r6,1
 80123f4:	38003926 	beq	r7,zero,80124dc <memset+0x114>
 80123f8:	400f883a 	mov	r7,r8
 80123fc:	18c00044 	addi	r3,r3,1
 8012400:	32400005 	stb	r9,0(r6)
 8012404:	1a0000cc 	andi	r8,r3,3
 8012408:	403ff81e 	bne	r8,zero,80123ec <_gp+0xfffed3e4>
 801240c:	010000c4 	movi	r4,3
 8012410:	21c02d2e 	bgeu	r4,r7,80124c8 <memset+0x100>
 8012414:	29003fcc 	andi	r4,r5,255
 8012418:	200c923a 	slli	r6,r4,8
 801241c:	3108b03a 	or	r4,r6,r4
 8012420:	200c943a 	slli	r6,r4,16
 8012424:	218cb03a 	or	r6,r4,r6
 8012428:	010003c4 	movi	r4,15
 801242c:	21c0182e 	bgeu	r4,r7,8012490 <memset+0xc8>
 8012430:	3b3ffc04 	addi	r12,r7,-16
 8012434:	6018d13a 	srli	r12,r12,4
 8012438:	1a000104 	addi	r8,r3,4
 801243c:	1ac00204 	addi	r11,r3,8
 8012440:	6008913a 	slli	r4,r12,4
 8012444:	1a800304 	addi	r10,r3,12
 8012448:	1813883a 	mov	r9,r3
 801244c:	21000504 	addi	r4,r4,20
 8012450:	1909883a 	add	r4,r3,r4
 8012454:	49800015 	stw	r6,0(r9)
 8012458:	41800015 	stw	r6,0(r8)
 801245c:	59800015 	stw	r6,0(r11)
 8012460:	51800015 	stw	r6,0(r10)
 8012464:	42000404 	addi	r8,r8,16
 8012468:	4a400404 	addi	r9,r9,16
 801246c:	5ac00404 	addi	r11,r11,16
 8012470:	52800404 	addi	r10,r10,16
 8012474:	413ff71e 	bne	r8,r4,8012454 <_gp+0xfffed44c>
 8012478:	63000044 	addi	r12,r12,1
 801247c:	6018913a 	slli	r12,r12,4
 8012480:	39c003cc 	andi	r7,r7,15
 8012484:	010000c4 	movi	r4,3
 8012488:	1b07883a 	add	r3,r3,r12
 801248c:	21c00e2e 	bgeu	r4,r7,80124c8 <memset+0x100>
 8012490:	1813883a 	mov	r9,r3
 8012494:	3811883a 	mov	r8,r7
 8012498:	010000c4 	movi	r4,3
 801249c:	49800015 	stw	r6,0(r9)
 80124a0:	423fff04 	addi	r8,r8,-4
 80124a4:	4a400104 	addi	r9,r9,4
 80124a8:	223ffc36 	bltu	r4,r8,801249c <_gp+0xfffed494>
 80124ac:	393fff04 	addi	r4,r7,-4
 80124b0:	2008d0ba 	srli	r4,r4,2
 80124b4:	39c000cc 	andi	r7,r7,3
 80124b8:	21000044 	addi	r4,r4,1
 80124bc:	2109883a 	add	r4,r4,r4
 80124c0:	2109883a 	add	r4,r4,r4
 80124c4:	1907883a 	add	r3,r3,r4
 80124c8:	38000526 	beq	r7,zero,80124e0 <memset+0x118>
 80124cc:	19cf883a 	add	r7,r3,r7
 80124d0:	19400005 	stb	r5,0(r3)
 80124d4:	18c00044 	addi	r3,r3,1
 80124d8:	38fffd1e 	bne	r7,r3,80124d0 <_gp+0xfffed4c8>
 80124dc:	f800283a 	ret
 80124e0:	f800283a 	ret
 80124e4:	2007883a 	mov	r3,r4
 80124e8:	300f883a 	mov	r7,r6
 80124ec:	003fc706 	br	801240c <_gp+0xfffed404>

080124f0 <_open_r>:
 80124f0:	defffd04 	addi	sp,sp,-12
 80124f4:	2805883a 	mov	r2,r5
 80124f8:	dc000015 	stw	r16,0(sp)
 80124fc:	040200b4 	movhi	r16,2050
 8012500:	dc400115 	stw	r17,4(sp)
 8012504:	300b883a 	mov	r5,r6
 8012508:	843ae604 	addi	r16,r16,-5224
 801250c:	2023883a 	mov	r17,r4
 8012510:	380d883a 	mov	r6,r7
 8012514:	1009883a 	mov	r4,r2
 8012518:	dfc00215 	stw	ra,8(sp)
 801251c:	80000015 	stw	zero,0(r16)
 8012520:	80143900 	call	8014390 <open>
 8012524:	00ffffc4 	movi	r3,-1
 8012528:	10c00526 	beq	r2,r3,8012540 <_open_r+0x50>
 801252c:	dfc00217 	ldw	ra,8(sp)
 8012530:	dc400117 	ldw	r17,4(sp)
 8012534:	dc000017 	ldw	r16,0(sp)
 8012538:	dec00304 	addi	sp,sp,12
 801253c:	f800283a 	ret
 8012540:	80c00017 	ldw	r3,0(r16)
 8012544:	183ff926 	beq	r3,zero,801252c <_gp+0xfffed524>
 8012548:	88c00015 	stw	r3,0(r17)
 801254c:	003ff706 	br	801252c <_gp+0xfffed524>

08012550 <lflush>:
 8012550:	2080030b 	ldhu	r2,12(r4)
 8012554:	00c00244 	movi	r3,9
 8012558:	1080024c 	andi	r2,r2,9
 801255c:	10c00226 	beq	r2,r3,8012568 <lflush+0x18>
 8012560:	0005883a 	mov	r2,zero
 8012564:	f800283a 	ret
 8012568:	80108bc1 	jmpi	80108bc <fflush>

0801256c <__srefill_r>:
 801256c:	defffc04 	addi	sp,sp,-16
 8012570:	dc400115 	stw	r17,4(sp)
 8012574:	dc000015 	stw	r16,0(sp)
 8012578:	dfc00315 	stw	ra,12(sp)
 801257c:	dc800215 	stw	r18,8(sp)
 8012580:	2023883a 	mov	r17,r4
 8012584:	2821883a 	mov	r16,r5
 8012588:	20000226 	beq	r4,zero,8012594 <__srefill_r+0x28>
 801258c:	20800e17 	ldw	r2,56(r4)
 8012590:	10003c26 	beq	r2,zero,8012684 <__srefill_r+0x118>
 8012594:	80c0030b 	ldhu	r3,12(r16)
 8012598:	1908000c 	andi	r4,r3,8192
 801259c:	1805883a 	mov	r2,r3
 80125a0:	2000071e 	bne	r4,zero,80125c0 <__srefill_r+0x54>
 80125a4:	81001917 	ldw	r4,100(r16)
 80125a8:	18880014 	ori	r2,r3,8192
 80125ac:	00f7ffc4 	movi	r3,-8193
 80125b0:	20c8703a 	and	r4,r4,r3
 80125b4:	8080030d 	sth	r2,12(r16)
 80125b8:	1007883a 	mov	r3,r2
 80125bc:	81001915 	stw	r4,100(r16)
 80125c0:	80000115 	stw	zero,4(r16)
 80125c4:	1100080c 	andi	r4,r2,32
 80125c8:	2000571e 	bne	r4,zero,8012728 <__srefill_r+0x1bc>
 80125cc:	1100010c 	andi	r4,r2,4
 80125d0:	20001f26 	beq	r4,zero,8012650 <__srefill_r+0xe4>
 80125d4:	81400c17 	ldw	r5,48(r16)
 80125d8:	28000826 	beq	r5,zero,80125fc <__srefill_r+0x90>
 80125dc:	80801004 	addi	r2,r16,64
 80125e0:	28800226 	beq	r5,r2,80125ec <__srefill_r+0x80>
 80125e4:	8809883a 	mov	r4,r17
 80125e8:	8010ecc0 	call	8010ecc <_free_r>
 80125ec:	80800f17 	ldw	r2,60(r16)
 80125f0:	80000c15 	stw	zero,48(r16)
 80125f4:	80800115 	stw	r2,4(r16)
 80125f8:	1000391e 	bne	r2,zero,80126e0 <__srefill_r+0x174>
 80125fc:	80800417 	ldw	r2,16(r16)
 8012600:	10004b26 	beq	r2,zero,8012730 <__srefill_r+0x1c4>
 8012604:	8480030b 	ldhu	r18,12(r16)
 8012608:	908000cc 	andi	r2,r18,3
 801260c:	10001f1e 	bne	r2,zero,801268c <__srefill_r+0x120>
 8012610:	81800417 	ldw	r6,16(r16)
 8012614:	80800817 	ldw	r2,32(r16)
 8012618:	81c00517 	ldw	r7,20(r16)
 801261c:	81400717 	ldw	r5,28(r16)
 8012620:	81800015 	stw	r6,0(r16)
 8012624:	8809883a 	mov	r4,r17
 8012628:	103ee83a 	callr	r2
 801262c:	80800115 	stw	r2,4(r16)
 8012630:	00800e0e 	bge	zero,r2,801266c <__srefill_r+0x100>
 8012634:	0005883a 	mov	r2,zero
 8012638:	dfc00317 	ldw	ra,12(sp)
 801263c:	dc800217 	ldw	r18,8(sp)
 8012640:	dc400117 	ldw	r17,4(sp)
 8012644:	dc000017 	ldw	r16,0(sp)
 8012648:	dec00404 	addi	sp,sp,16
 801264c:	f800283a 	ret
 8012650:	1100040c 	andi	r4,r2,16
 8012654:	20003026 	beq	r4,zero,8012718 <__srefill_r+0x1ac>
 8012658:	1080020c 	andi	r2,r2,8
 801265c:	1000241e 	bne	r2,zero,80126f0 <__srefill_r+0x184>
 8012660:	18c00114 	ori	r3,r3,4
 8012664:	80c0030d 	sth	r3,12(r16)
 8012668:	003fe406 	br	80125fc <_gp+0xfffed5f4>
 801266c:	80c0030b 	ldhu	r3,12(r16)
 8012670:	1000161e 	bne	r2,zero,80126cc <__srefill_r+0x160>
 8012674:	18c00814 	ori	r3,r3,32
 8012678:	00bfffc4 	movi	r2,-1
 801267c:	80c0030d 	sth	r3,12(r16)
 8012680:	003fed06 	br	8012638 <_gp+0xfffed630>
 8012684:	8010c4c0 	call	8010c4c <__sinit>
 8012688:	003fc206 	br	8012594 <_gp+0xfffed58c>
 801268c:	008200b4 	movhi	r2,2050
 8012690:	10b40204 	addi	r2,r2,-12280
 8012694:	11000017 	ldw	r4,0(r2)
 8012698:	01420074 	movhi	r5,2049
 801269c:	00800044 	movi	r2,1
 80126a0:	29495404 	addi	r5,r5,9552
 80126a4:	8080030d 	sth	r2,12(r16)
 80126a8:	80116b80 	call	80116b8 <_fwalk>
 80126ac:	00800244 	movi	r2,9
 80126b0:	8480030d 	sth	r18,12(r16)
 80126b4:	9480024c 	andi	r18,r18,9
 80126b8:	90bfd51e 	bne	r18,r2,8012610 <_gp+0xfffed608>
 80126bc:	800b883a 	mov	r5,r16
 80126c0:	8809883a 	mov	r4,r17
 80126c4:	80106440 	call	8010644 <__sflush_r>
 80126c8:	003fd106 	br	8012610 <_gp+0xfffed608>
 80126cc:	18c01014 	ori	r3,r3,64
 80126d0:	80000115 	stw	zero,4(r16)
 80126d4:	00bfffc4 	movi	r2,-1
 80126d8:	80c0030d 	sth	r3,12(r16)
 80126dc:	003fd606 	br	8012638 <_gp+0xfffed630>
 80126e0:	80c00e17 	ldw	r3,56(r16)
 80126e4:	0005883a 	mov	r2,zero
 80126e8:	80c00015 	stw	r3,0(r16)
 80126ec:	003fd206 	br	8012638 <_gp+0xfffed630>
 80126f0:	800b883a 	mov	r5,r16
 80126f4:	8809883a 	mov	r4,r17
 80126f8:	80108600 	call	8010860 <_fflush_r>
 80126fc:	10000a1e 	bne	r2,zero,8012728 <__srefill_r+0x1bc>
 8012700:	8080030b 	ldhu	r2,12(r16)
 8012704:	00fffdc4 	movi	r3,-9
 8012708:	80000215 	stw	zero,8(r16)
 801270c:	1886703a 	and	r3,r3,r2
 8012710:	80000615 	stw	zero,24(r16)
 8012714:	003fd206 	br	8012660 <_gp+0xfffed658>
 8012718:	00800244 	movi	r2,9
 801271c:	88800015 	stw	r2,0(r17)
 8012720:	18c01014 	ori	r3,r3,64
 8012724:	80c0030d 	sth	r3,12(r16)
 8012728:	00bfffc4 	movi	r2,-1
 801272c:	003fc206 	br	8012638 <_gp+0xfffed630>
 8012730:	800b883a 	mov	r5,r16
 8012734:	8809883a 	mov	r4,r17
 8012738:	80118b80 	call	80118b8 <__smakebuf_r>
 801273c:	003fb106 	br	8012604 <_gp+0xfffed5fc>

08012740 <_sbrk_r>:
 8012740:	defffd04 	addi	sp,sp,-12
 8012744:	dc000015 	stw	r16,0(sp)
 8012748:	040200b4 	movhi	r16,2050
 801274c:	dc400115 	stw	r17,4(sp)
 8012750:	843ae604 	addi	r16,r16,-5224
 8012754:	2023883a 	mov	r17,r4
 8012758:	2809883a 	mov	r4,r5
 801275c:	dfc00215 	stw	ra,8(sp)
 8012760:	80000015 	stw	zero,0(r16)
 8012764:	80149180 	call	8014918 <sbrk>
 8012768:	00ffffc4 	movi	r3,-1
 801276c:	10c00526 	beq	r2,r3,8012784 <_sbrk_r+0x44>
 8012770:	dfc00217 	ldw	ra,8(sp)
 8012774:	dc400117 	ldw	r17,4(sp)
 8012778:	dc000017 	ldw	r16,0(sp)
 801277c:	dec00304 	addi	sp,sp,12
 8012780:	f800283a 	ret
 8012784:	80c00017 	ldw	r3,0(r16)
 8012788:	183ff926 	beq	r3,zero,8012770 <_gp+0xfffed768>
 801278c:	88c00015 	stw	r3,0(r17)
 8012790:	003ff706 	br	8012770 <_gp+0xfffed768>

08012794 <__sread>:
 8012794:	defffe04 	addi	sp,sp,-8
 8012798:	dc000015 	stw	r16,0(sp)
 801279c:	2821883a 	mov	r16,r5
 80127a0:	2940038f 	ldh	r5,14(r5)
 80127a4:	dfc00115 	stw	ra,4(sp)
 80127a8:	80132540 	call	8013254 <_read_r>
 80127ac:	10000716 	blt	r2,zero,80127cc <__sread+0x38>
 80127b0:	80c01417 	ldw	r3,80(r16)
 80127b4:	1887883a 	add	r3,r3,r2
 80127b8:	80c01415 	stw	r3,80(r16)
 80127bc:	dfc00117 	ldw	ra,4(sp)
 80127c0:	dc000017 	ldw	r16,0(sp)
 80127c4:	dec00204 	addi	sp,sp,8
 80127c8:	f800283a 	ret
 80127cc:	80c0030b 	ldhu	r3,12(r16)
 80127d0:	18fbffcc 	andi	r3,r3,61439
 80127d4:	80c0030d 	sth	r3,12(r16)
 80127d8:	dfc00117 	ldw	ra,4(sp)
 80127dc:	dc000017 	ldw	r16,0(sp)
 80127e0:	dec00204 	addi	sp,sp,8
 80127e4:	f800283a 	ret

080127e8 <__seofread>:
 80127e8:	0005883a 	mov	r2,zero
 80127ec:	f800283a 	ret

080127f0 <__swrite>:
 80127f0:	2880030b 	ldhu	r2,12(r5)
 80127f4:	defffb04 	addi	sp,sp,-20
 80127f8:	dcc00315 	stw	r19,12(sp)
 80127fc:	dc800215 	stw	r18,8(sp)
 8012800:	dc400115 	stw	r17,4(sp)
 8012804:	dc000015 	stw	r16,0(sp)
 8012808:	dfc00415 	stw	ra,16(sp)
 801280c:	10c0400c 	andi	r3,r2,256
 8012810:	2821883a 	mov	r16,r5
 8012814:	2023883a 	mov	r17,r4
 8012818:	3025883a 	mov	r18,r6
 801281c:	3827883a 	mov	r19,r7
 8012820:	18000526 	beq	r3,zero,8012838 <__swrite+0x48>
 8012824:	2940038f 	ldh	r5,14(r5)
 8012828:	01c00084 	movi	r7,2
 801282c:	000d883a 	mov	r6,zero
 8012830:	80131f40 	call	80131f4 <_lseek_r>
 8012834:	8080030b 	ldhu	r2,12(r16)
 8012838:	8140038f 	ldh	r5,14(r16)
 801283c:	10bbffcc 	andi	r2,r2,61439
 8012840:	980f883a 	mov	r7,r19
 8012844:	900d883a 	mov	r6,r18
 8012848:	8809883a 	mov	r4,r17
 801284c:	8080030d 	sth	r2,12(r16)
 8012850:	dfc00417 	ldw	ra,16(sp)
 8012854:	dcc00317 	ldw	r19,12(sp)
 8012858:	dc800217 	ldw	r18,8(sp)
 801285c:	dc400117 	ldw	r17,4(sp)
 8012860:	dc000017 	ldw	r16,0(sp)
 8012864:	dec00504 	addi	sp,sp,20
 8012868:	8012d5c1 	jmpi	8012d5c <_write_r>

0801286c <__sseek>:
 801286c:	defffe04 	addi	sp,sp,-8
 8012870:	dc000015 	stw	r16,0(sp)
 8012874:	2821883a 	mov	r16,r5
 8012878:	2940038f 	ldh	r5,14(r5)
 801287c:	dfc00115 	stw	ra,4(sp)
 8012880:	80131f40 	call	80131f4 <_lseek_r>
 8012884:	00ffffc4 	movi	r3,-1
 8012888:	10c00826 	beq	r2,r3,80128ac <__sseek+0x40>
 801288c:	80c0030b 	ldhu	r3,12(r16)
 8012890:	80801415 	stw	r2,80(r16)
 8012894:	18c40014 	ori	r3,r3,4096
 8012898:	80c0030d 	sth	r3,12(r16)
 801289c:	dfc00117 	ldw	ra,4(sp)
 80128a0:	dc000017 	ldw	r16,0(sp)
 80128a4:	dec00204 	addi	sp,sp,8
 80128a8:	f800283a 	ret
 80128ac:	80c0030b 	ldhu	r3,12(r16)
 80128b0:	18fbffcc 	andi	r3,r3,61439
 80128b4:	80c0030d 	sth	r3,12(r16)
 80128b8:	dfc00117 	ldw	ra,4(sp)
 80128bc:	dc000017 	ldw	r16,0(sp)
 80128c0:	dec00204 	addi	sp,sp,8
 80128c4:	f800283a 	ret

080128c8 <__sclose>:
 80128c8:	2940038f 	ldh	r5,14(r5)
 80128cc:	8012dbc1 	jmpi	8012dbc <_close_r>

080128d0 <strtok>:
 80128d0:	008200b4 	movhi	r2,2050
 80128d4:	10b40304 	addi	r2,r2,-12276
 80128d8:	11800017 	ldw	r6,0(r2)
 80128dc:	01c00044 	movi	r7,1
 80128e0:	31801704 	addi	r6,r6,92
 80128e4:	80128e81 	jmpi	80128e8 <__strtok_r>

080128e8 <__strtok_r>:
 80128e8:	20001f26 	beq	r4,zero,8012968 <__strtok_r+0x80>
 80128ec:	2005883a 	mov	r2,r4
 80128f0:	22400007 	ldb	r9,0(r4)
 80128f4:	2807883a 	mov	r3,r5
 80128f8:	21000044 	addi	r4,r4,1
 80128fc:	00000106 	br	8012904 <__strtok_r+0x1c>
 8012900:	4a001226 	beq	r9,r8,801294c <__strtok_r+0x64>
 8012904:	1a000007 	ldb	r8,0(r3)
 8012908:	18c00044 	addi	r3,r3,1
 801290c:	403ffc1e 	bne	r8,zero,8012900 <_gp+0xfffed8f8>
 8012910:	48001926 	beq	r9,zero,8012978 <__strtok_r+0x90>
 8012914:	22000007 	ldb	r8,0(r4)
 8012918:	2013883a 	mov	r9,r4
 801291c:	21000044 	addi	r4,r4,1
 8012920:	2015883a 	mov	r10,r4
 8012924:	2807883a 	mov	r3,r5
 8012928:	00000106 	br	8012930 <__strtok_r+0x48>
 801292c:	383ff926 	beq	r7,zero,8012914 <_gp+0xfffed90c>
 8012930:	19c00007 	ldb	r7,0(r3)
 8012934:	18c00044 	addi	r3,r3,1
 8012938:	41fffc1e 	bne	r8,r7,801292c <_gp+0xfffed924>
 801293c:	40000726 	beq	r8,zero,801295c <__strtok_r+0x74>
 8012940:	48000005 	stb	zero,0(r9)
 8012944:	32800015 	stw	r10,0(r6)
 8012948:	f800283a 	ret
 801294c:	383fe71e 	bne	r7,zero,80128ec <_gp+0xfffed8e4>
 8012950:	31000015 	stw	r4,0(r6)
 8012954:	10000005 	stb	zero,0(r2)
 8012958:	f800283a 	ret
 801295c:	0015883a 	mov	r10,zero
 8012960:	32800015 	stw	r10,0(r6)
 8012964:	f800283a 	ret
 8012968:	31000017 	ldw	r4,0(r6)
 801296c:	203fdf1e 	bne	r4,zero,80128ec <_gp+0xfffed8e4>
 8012970:	0005883a 	mov	r2,zero
 8012974:	f800283a 	ret
 8012978:	30000015 	stw	zero,0(r6)
 801297c:	0005883a 	mov	r2,zero
 8012980:	f800283a 	ret

08012984 <strtok_r>:
 8012984:	01c00044 	movi	r7,1
 8012988:	80128e81 	jmpi	80128e8 <__strtok_r>

0801298c <_strtol_r>:
 801298c:	008200b4 	movhi	r2,2050
 8012990:	defff204 	addi	sp,sp,-56
 8012994:	10b40604 	addi	r2,r2,-12264
 8012998:	dd800a15 	stw	r22,40(sp)
 801299c:	15800017 	ldw	r22,0(r2)
 80129a0:	df000c15 	stw	fp,48(sp)
 80129a4:	d9000315 	stw	r4,12(sp)
 80129a8:	dfc00d15 	stw	ra,52(sp)
 80129ac:	ddc00b15 	stw	r23,44(sp)
 80129b0:	dd400915 	stw	r21,36(sp)
 80129b4:	dd000815 	stw	r20,32(sp)
 80129b8:	dcc00715 	stw	r19,28(sp)
 80129bc:	dc800615 	stw	r18,24(sp)
 80129c0:	dc400515 	stw	r17,20(sp)
 80129c4:	dc000415 	stw	r16,16(sp)
 80129c8:	d9400215 	stw	r5,8(sp)
 80129cc:	d9800015 	stw	r6,0(sp)
 80129d0:	3839883a 	mov	fp,r7
 80129d4:	2809883a 	mov	r4,r5
 80129d8:	24000003 	ldbu	r16,0(r4)
 80129dc:	24400044 	addi	r17,r4,1
 80129e0:	2007883a 	mov	r3,r4
 80129e4:	b405883a 	add	r2,r22,r16
 80129e8:	10800043 	ldbu	r2,1(r2)
 80129ec:	8809883a 	mov	r4,r17
 80129f0:	1080020c 	andi	r2,r2,8
 80129f4:	103ff81e 	bne	r2,zero,80129d8 <_gp+0xfffed9d0>
 80129f8:	00800b44 	movi	r2,45
 80129fc:	80805526 	beq	r16,r2,8012b54 <_strtol_r+0x1c8>
 8012a00:	00800ac4 	movi	r2,43
 8012a04:	80806026 	beq	r16,r2,8012b88 <_strtol_r+0x1fc>
 8012a08:	0029883a 	mov	r20,zero
 8012a0c:	e0004726 	beq	fp,zero,8012b2c <_strtol_r+0x1a0>
 8012a10:	00800404 	movi	r2,16
 8012a14:	e0806626 	beq	fp,r2,8012bb0 <_strtol_r+0x224>
 8012a18:	e027883a 	mov	r19,fp
 8012a1c:	00a00034 	movhi	r2,32768
 8012a20:	a025003a 	cmpeq	r18,r20,zero
 8012a24:	14a5c83a 	sub	r18,r2,r18
 8012a28:	9009883a 	mov	r4,r18
 8012a2c:	980b883a 	mov	r5,r19
 8012a30:	8013be00 	call	8013be0 <__umodsi3>
 8012a34:	9009883a 	mov	r4,r18
 8012a38:	980b883a 	mov	r5,r19
 8012a3c:	d8800115 	stw	r2,4(sp)
 8012a40:	8013b7c0 	call	8013b7c <__udivsi3>
 8012a44:	b407883a 	add	r3,r22,r16
 8012a48:	18c00043 	ldbu	r3,1(r3)
 8012a4c:	102b883a 	mov	r21,r2
 8012a50:	0009883a 	mov	r4,zero
 8012a54:	1940010c 	andi	r5,r3,4
 8012a58:	0005883a 	mov	r2,zero
 8012a5c:	04800044 	movi	r18,1
 8012a60:	05ffffc4 	movi	r23,-1
 8012a64:	28000f26 	beq	r5,zero,8012aa4 <_strtol_r+0x118>
 8012a68:	843ff404 	addi	r16,r16,-48
 8012a6c:	8700130e 	bge	r16,fp,8012abc <_strtol_r+0x130>
 8012a70:	15c00626 	beq	r2,r23,8012a8c <_strtol_r+0x100>
 8012a74:	a9002936 	bltu	r21,r4,8012b1c <_strtol_r+0x190>
 8012a78:	25402626 	beq	r4,r21,8012b14 <_strtol_r+0x188>
 8012a7c:	980b883a 	mov	r5,r19
 8012a80:	8013c380 	call	8013c38 <__mulsi3>
 8012a84:	8089883a 	add	r4,r16,r2
 8012a88:	00800044 	movi	r2,1
 8012a8c:	8c000003 	ldbu	r16,0(r17)
 8012a90:	8c400044 	addi	r17,r17,1
 8012a94:	b407883a 	add	r3,r22,r16
 8012a98:	18c00043 	ldbu	r3,1(r3)
 8012a9c:	1940010c 	andi	r5,r3,4
 8012aa0:	283ff11e 	bne	r5,zero,8012a68 <_gp+0xfffeda60>
 8012aa4:	18c000cc 	andi	r3,r3,3
 8012aa8:	18000426 	beq	r3,zero,8012abc <_strtol_r+0x130>
 8012aac:	1c801d26 	beq	r3,r18,8012b24 <_strtol_r+0x198>
 8012ab0:	00c015c4 	movi	r3,87
 8012ab4:	80e1c83a 	sub	r16,r16,r3
 8012ab8:	873fed16 	blt	r16,fp,8012a70 <_gp+0xfffeda68>
 8012abc:	00ffffc4 	movi	r3,-1
 8012ac0:	10c02826 	beq	r2,r3,8012b64 <_strtol_r+0x1d8>
 8012ac4:	a0001e1e 	bne	r20,zero,8012b40 <_strtol_r+0x1b4>
 8012ac8:	d8c00017 	ldw	r3,0(sp)
 8012acc:	18004326 	beq	r3,zero,8012bdc <_strtol_r+0x250>
 8012ad0:	10001d1e 	bne	r2,zero,8012b48 <_strtol_r+0x1bc>
 8012ad4:	dd800217 	ldw	r22,8(sp)
 8012ad8:	2005883a 	mov	r2,r4
 8012adc:	d8c00017 	ldw	r3,0(sp)
 8012ae0:	1d800015 	stw	r22,0(r3)
 8012ae4:	dfc00d17 	ldw	ra,52(sp)
 8012ae8:	df000c17 	ldw	fp,48(sp)
 8012aec:	ddc00b17 	ldw	r23,44(sp)
 8012af0:	dd800a17 	ldw	r22,40(sp)
 8012af4:	dd400917 	ldw	r21,36(sp)
 8012af8:	dd000817 	ldw	r20,32(sp)
 8012afc:	dcc00717 	ldw	r19,28(sp)
 8012b00:	dc800617 	ldw	r18,24(sp)
 8012b04:	dc400517 	ldw	r17,20(sp)
 8012b08:	dc000417 	ldw	r16,16(sp)
 8012b0c:	dec00e04 	addi	sp,sp,56
 8012b10:	f800283a 	ret
 8012b14:	d8c00117 	ldw	r3,4(sp)
 8012b18:	1c3fd80e 	bge	r3,r16,8012a7c <_gp+0xfffeda74>
 8012b1c:	00bfffc4 	movi	r2,-1
 8012b20:	003fda06 	br	8012a8c <_gp+0xfffeda84>
 8012b24:	00c00dc4 	movi	r3,55
 8012b28:	003fe206 	br	8012ab4 <_gp+0xfffedaac>
 8012b2c:	00800c04 	movi	r2,48
 8012b30:	80801926 	beq	r16,r2,8012b98 <_strtol_r+0x20c>
 8012b34:	07000284 	movi	fp,10
 8012b38:	e027883a 	mov	r19,fp
 8012b3c:	003fb706 	br	8012a1c <_gp+0xfffeda14>
 8012b40:	0109c83a 	sub	r4,zero,r4
 8012b44:	003fe006 	br	8012ac8 <_gp+0xfffedac0>
 8012b48:	2005883a 	mov	r2,r4
 8012b4c:	8dbfffc4 	addi	r22,r17,-1
 8012b50:	003fe206 	br	8012adc <_gp+0xfffedad4>
 8012b54:	1c400084 	addi	r17,r3,2
 8012b58:	1c000043 	ldbu	r16,1(r3)
 8012b5c:	05000044 	movi	r20,1
 8012b60:	003faa06 	br	8012a0c <_gp+0xfffeda04>
 8012b64:	d9000317 	ldw	r4,12(sp)
 8012b68:	00c00884 	movi	r3,34
 8012b6c:	a005003a 	cmpeq	r2,r20,zero
 8012b70:	20c00015 	stw	r3,0(r4)
 8012b74:	00e00034 	movhi	r3,32768
 8012b78:	1885c83a 	sub	r2,r3,r2
 8012b7c:	d8c00017 	ldw	r3,0(sp)
 8012b80:	183ff21e 	bne	r3,zero,8012b4c <_gp+0xfffedb44>
 8012b84:	003fd706 	br	8012ae4 <_gp+0xfffedadc>
 8012b88:	1c400084 	addi	r17,r3,2
 8012b8c:	1c000043 	ldbu	r16,1(r3)
 8012b90:	0029883a 	mov	r20,zero
 8012b94:	003f9d06 	br	8012a0c <_gp+0xfffeda04>
 8012b98:	88800003 	ldbu	r2,0(r17)
 8012b9c:	00c01604 	movi	r3,88
 8012ba0:	108037cc 	andi	r2,r2,223
 8012ba4:	10c00826 	beq	r2,r3,8012bc8 <_strtol_r+0x23c>
 8012ba8:	07000204 	movi	fp,8
 8012bac:	003f9a06 	br	8012a18 <_gp+0xfffeda10>
 8012bb0:	00800c04 	movi	r2,48
 8012bb4:	80bf981e 	bne	r16,r2,8012a18 <_gp+0xfffeda10>
 8012bb8:	88800003 	ldbu	r2,0(r17)
 8012bbc:	00c01604 	movi	r3,88
 8012bc0:	108037cc 	andi	r2,r2,223
 8012bc4:	10ff941e 	bne	r2,r3,8012a18 <_gp+0xfffeda10>
 8012bc8:	04c00404 	movi	r19,16
 8012bcc:	8c000043 	ldbu	r16,1(r17)
 8012bd0:	9839883a 	mov	fp,r19
 8012bd4:	8c400084 	addi	r17,r17,2
 8012bd8:	003f9006 	br	8012a1c <_gp+0xfffeda14>
 8012bdc:	2005883a 	mov	r2,r4
 8012be0:	003fc006 	br	8012ae4 <_gp+0xfffedadc>

08012be4 <strtol>:
 8012be4:	008200b4 	movhi	r2,2050
 8012be8:	10b40304 	addi	r2,r2,-12276
 8012bec:	300f883a 	mov	r7,r6
 8012bf0:	280d883a 	mov	r6,r5
 8012bf4:	200b883a 	mov	r5,r4
 8012bf8:	11000017 	ldw	r4,0(r2)
 8012bfc:	801298c1 	jmpi	801298c <_strtol_r>

08012c00 <__utoa>:
 8012c00:	008cccb4 	movhi	r2,13106
 8012c04:	defff004 	addi	sp,sp,-64
 8012c08:	108c4c04 	addi	r2,r2,12592
 8012c0c:	d8800015 	stw	r2,0(sp)
 8012c10:	008dcdb4 	movhi	r2,14134
 8012c14:	108d4d04 	addi	r2,r2,13620
 8012c18:	d8800115 	stw	r2,4(sp)
 8012c1c:	00989874 	movhi	r2,25185
 8012c20:	108e4e04 	addi	r2,r2,14648
 8012c24:	d8800215 	stw	r2,8(sp)
 8012c28:	00999974 	movhi	r2,26213
 8012c2c:	109918c4 	addi	r2,r2,25699
 8012c30:	d8800315 	stw	r2,12(sp)
 8012c34:	009a9a74 	movhi	r2,27241
 8012c38:	109a19c4 	addi	r2,r2,26727
 8012c3c:	d8800415 	stw	r2,16(sp)
 8012c40:	009b9b74 	movhi	r2,28269
 8012c44:	109b1ac4 	addi	r2,r2,27755
 8012c48:	d8800515 	stw	r2,20(sp)
 8012c4c:	009c9c74 	movhi	r2,29297
 8012c50:	109c1bc4 	addi	r2,r2,28783
 8012c54:	d8800615 	stw	r2,24(sp)
 8012c58:	009d9d74 	movhi	r2,30325
 8012c5c:	109d1cc4 	addi	r2,r2,29811
 8012c60:	d8800715 	stw	r2,28(sp)
 8012c64:	009e9e74 	movhi	r2,31353
 8012c68:	109e1dc4 	addi	r2,r2,30839
 8012c6c:	dd000e15 	stw	r20,56(sp)
 8012c70:	d8800815 	stw	r2,32(sp)
 8012c74:	dfc00f15 	stw	ra,60(sp)
 8012c78:	dcc00d15 	stw	r19,52(sp)
 8012c7c:	dc800c15 	stw	r18,48(sp)
 8012c80:	dc400b15 	stw	r17,44(sp)
 8012c84:	dc000a15 	stw	r16,40(sp)
 8012c88:	d8000905 	stb	zero,36(sp)
 8012c8c:	30bfff84 	addi	r2,r6,-2
 8012c90:	00c00884 	movi	r3,34
 8012c94:	2829883a 	mov	r20,r5
 8012c98:	18802c36 	bltu	r3,r2,8012d4c <__utoa+0x14c>
 8012c9c:	3027883a 	mov	r19,r6
 8012ca0:	2023883a 	mov	r17,r4
 8012ca4:	2825883a 	mov	r18,r5
 8012ca8:	0021883a 	mov	r16,zero
 8012cac:	00000106 	br	8012cb4 <__utoa+0xb4>
 8012cb0:	1821883a 	mov	r16,r3
 8012cb4:	8809883a 	mov	r4,r17
 8012cb8:	980b883a 	mov	r5,r19
 8012cbc:	8013be00 	call	8013be0 <__umodsi3>
 8012cc0:	d885883a 	add	r2,sp,r2
 8012cc4:	10800003 	ldbu	r2,0(r2)
 8012cc8:	8809883a 	mov	r4,r17
 8012ccc:	980b883a 	mov	r5,r19
 8012cd0:	90800005 	stb	r2,0(r18)
 8012cd4:	8013b7c0 	call	8013b7c <__udivsi3>
 8012cd8:	1023883a 	mov	r17,r2
 8012cdc:	80c00044 	addi	r3,r16,1
 8012ce0:	94800044 	addi	r18,r18,1
 8012ce4:	103ff21e 	bne	r2,zero,8012cb0 <_gp+0xfffedca8>
 8012ce8:	a0c7883a 	add	r3,r20,r3
 8012cec:	18000005 	stb	zero,0(r3)
 8012cf0:	80000d26 	beq	r16,zero,8012d28 <__utoa+0x128>
 8012cf4:	01c00044 	movi	r7,1
 8012cf8:	a409883a 	add	r4,r20,r16
 8012cfc:	a007883a 	mov	r3,r20
 8012d00:	3d0fc83a 	sub	r7,r7,r20
 8012d04:	21800003 	ldbu	r6,0(r4)
 8012d08:	19400003 	ldbu	r5,0(r3)
 8012d0c:	38c5883a 	add	r2,r7,r3
 8012d10:	19800005 	stb	r6,0(r3)
 8012d14:	21400005 	stb	r5,0(r4)
 8012d18:	843fffc4 	addi	r16,r16,-1
 8012d1c:	18c00044 	addi	r3,r3,1
 8012d20:	213fffc4 	addi	r4,r4,-1
 8012d24:	143ff716 	blt	r2,r16,8012d04 <_gp+0xfffedcfc>
 8012d28:	a005883a 	mov	r2,r20
 8012d2c:	dfc00f17 	ldw	ra,60(sp)
 8012d30:	dd000e17 	ldw	r20,56(sp)
 8012d34:	dcc00d17 	ldw	r19,52(sp)
 8012d38:	dc800c17 	ldw	r18,48(sp)
 8012d3c:	dc400b17 	ldw	r17,44(sp)
 8012d40:	dc000a17 	ldw	r16,40(sp)
 8012d44:	dec01004 	addi	sp,sp,64
 8012d48:	f800283a 	ret
 8012d4c:	28000005 	stb	zero,0(r5)
 8012d50:	0005883a 	mov	r2,zero
 8012d54:	003ff506 	br	8012d2c <_gp+0xfffedd24>

08012d58 <utoa>:
 8012d58:	8012c001 	jmpi	8012c00 <__utoa>

08012d5c <_write_r>:
 8012d5c:	defffd04 	addi	sp,sp,-12
 8012d60:	2805883a 	mov	r2,r5
 8012d64:	dc000015 	stw	r16,0(sp)
 8012d68:	040200b4 	movhi	r16,2050
 8012d6c:	dc400115 	stw	r17,4(sp)
 8012d70:	300b883a 	mov	r5,r6
 8012d74:	843ae604 	addi	r16,r16,-5224
 8012d78:	2023883a 	mov	r17,r4
 8012d7c:	380d883a 	mov	r6,r7
 8012d80:	1009883a 	mov	r4,r2
 8012d84:	dfc00215 	stw	ra,8(sp)
 8012d88:	80000015 	stw	zero,0(r16)
 8012d8c:	8014a040 	call	8014a04 <write>
 8012d90:	00ffffc4 	movi	r3,-1
 8012d94:	10c00526 	beq	r2,r3,8012dac <_write_r+0x50>
 8012d98:	dfc00217 	ldw	ra,8(sp)
 8012d9c:	dc400117 	ldw	r17,4(sp)
 8012da0:	dc000017 	ldw	r16,0(sp)
 8012da4:	dec00304 	addi	sp,sp,12
 8012da8:	f800283a 	ret
 8012dac:	80c00017 	ldw	r3,0(r16)
 8012db0:	183ff926 	beq	r3,zero,8012d98 <_gp+0xfffedd90>
 8012db4:	88c00015 	stw	r3,0(r17)
 8012db8:	003ff706 	br	8012d98 <_gp+0xfffedd90>

08012dbc <_close_r>:
 8012dbc:	defffd04 	addi	sp,sp,-12
 8012dc0:	dc000015 	stw	r16,0(sp)
 8012dc4:	040200b4 	movhi	r16,2050
 8012dc8:	dc400115 	stw	r17,4(sp)
 8012dcc:	843ae604 	addi	r16,r16,-5224
 8012dd0:	2023883a 	mov	r17,r4
 8012dd4:	2809883a 	mov	r4,r5
 8012dd8:	dfc00215 	stw	ra,8(sp)
 8012ddc:	80000015 	stw	zero,0(r16)
 8012de0:	8013c9c0 	call	8013c9c <close>
 8012de4:	00ffffc4 	movi	r3,-1
 8012de8:	10c00526 	beq	r2,r3,8012e00 <_close_r+0x44>
 8012dec:	dfc00217 	ldw	ra,8(sp)
 8012df0:	dc400117 	ldw	r17,4(sp)
 8012df4:	dc000017 	ldw	r16,0(sp)
 8012df8:	dec00304 	addi	sp,sp,12
 8012dfc:	f800283a 	ret
 8012e00:	80c00017 	ldw	r3,0(r16)
 8012e04:	183ff926 	beq	r3,zero,8012dec <_gp+0xfffedde4>
 8012e08:	88c00015 	stw	r3,0(r17)
 8012e0c:	003ff706 	br	8012dec <_gp+0xfffedde4>

08012e10 <__call_exitprocs>:
 8012e10:	defff504 	addi	sp,sp,-44
 8012e14:	df000915 	stw	fp,36(sp)
 8012e18:	dd400615 	stw	r21,24(sp)
 8012e1c:	dc800315 	stw	r18,12(sp)
 8012e20:	dfc00a15 	stw	ra,40(sp)
 8012e24:	ddc00815 	stw	r23,32(sp)
 8012e28:	dd800715 	stw	r22,28(sp)
 8012e2c:	dd000515 	stw	r20,20(sp)
 8012e30:	dcc00415 	stw	r19,16(sp)
 8012e34:	dc400215 	stw	r17,8(sp)
 8012e38:	dc000115 	stw	r16,4(sp)
 8012e3c:	d9000015 	stw	r4,0(sp)
 8012e40:	2839883a 	mov	fp,r5
 8012e44:	04800044 	movi	r18,1
 8012e48:	057fffc4 	movi	r21,-1
 8012e4c:	008200b4 	movhi	r2,2050
 8012e50:	10b40204 	addi	r2,r2,-12280
 8012e54:	12000017 	ldw	r8,0(r2)
 8012e58:	45005217 	ldw	r20,328(r8)
 8012e5c:	44c05204 	addi	r19,r8,328
 8012e60:	a0001c26 	beq	r20,zero,8012ed4 <__call_exitprocs+0xc4>
 8012e64:	a0800117 	ldw	r2,4(r20)
 8012e68:	15ffffc4 	addi	r23,r2,-1
 8012e6c:	b8000d16 	blt	r23,zero,8012ea4 <__call_exitprocs+0x94>
 8012e70:	14000044 	addi	r16,r2,1
 8012e74:	8421883a 	add	r16,r16,r16
 8012e78:	8421883a 	add	r16,r16,r16
 8012e7c:	84402004 	addi	r17,r16,128
 8012e80:	a463883a 	add	r17,r20,r17
 8012e84:	a421883a 	add	r16,r20,r16
 8012e88:	e0001e26 	beq	fp,zero,8012f04 <__call_exitprocs+0xf4>
 8012e8c:	80804017 	ldw	r2,256(r16)
 8012e90:	e0801c26 	beq	fp,r2,8012f04 <__call_exitprocs+0xf4>
 8012e94:	bdffffc4 	addi	r23,r23,-1
 8012e98:	843fff04 	addi	r16,r16,-4
 8012e9c:	8c7fff04 	addi	r17,r17,-4
 8012ea0:	bd7ff91e 	bne	r23,r21,8012e88 <_gp+0xfffede80>
 8012ea4:	00800034 	movhi	r2,0
 8012ea8:	10800004 	addi	r2,r2,0
 8012eac:	10000926 	beq	r2,zero,8012ed4 <__call_exitprocs+0xc4>
 8012eb0:	a0800117 	ldw	r2,4(r20)
 8012eb4:	1000301e 	bne	r2,zero,8012f78 <__call_exitprocs+0x168>
 8012eb8:	a0800017 	ldw	r2,0(r20)
 8012ebc:	10003226 	beq	r2,zero,8012f88 <__call_exitprocs+0x178>
 8012ec0:	a009883a 	mov	r4,r20
 8012ec4:	98800015 	stw	r2,0(r19)
 8012ec8:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 8012ecc:	9d000017 	ldw	r20,0(r19)
 8012ed0:	a03fe41e 	bne	r20,zero,8012e64 <_gp+0xfffede5c>
 8012ed4:	dfc00a17 	ldw	ra,40(sp)
 8012ed8:	df000917 	ldw	fp,36(sp)
 8012edc:	ddc00817 	ldw	r23,32(sp)
 8012ee0:	dd800717 	ldw	r22,28(sp)
 8012ee4:	dd400617 	ldw	r21,24(sp)
 8012ee8:	dd000517 	ldw	r20,20(sp)
 8012eec:	dcc00417 	ldw	r19,16(sp)
 8012ef0:	dc800317 	ldw	r18,12(sp)
 8012ef4:	dc400217 	ldw	r17,8(sp)
 8012ef8:	dc000117 	ldw	r16,4(sp)
 8012efc:	dec00b04 	addi	sp,sp,44
 8012f00:	f800283a 	ret
 8012f04:	a0800117 	ldw	r2,4(r20)
 8012f08:	80c00017 	ldw	r3,0(r16)
 8012f0c:	10bfffc4 	addi	r2,r2,-1
 8012f10:	15c01426 	beq	r2,r23,8012f64 <__call_exitprocs+0x154>
 8012f14:	80000015 	stw	zero,0(r16)
 8012f18:	183fde26 	beq	r3,zero,8012e94 <_gp+0xfffede8c>
 8012f1c:	95c8983a 	sll	r4,r18,r23
 8012f20:	a0806217 	ldw	r2,392(r20)
 8012f24:	a5800117 	ldw	r22,4(r20)
 8012f28:	2084703a 	and	r2,r4,r2
 8012f2c:	10000b26 	beq	r2,zero,8012f5c <__call_exitprocs+0x14c>
 8012f30:	a0806317 	ldw	r2,396(r20)
 8012f34:	2088703a 	and	r4,r4,r2
 8012f38:	20000c1e 	bne	r4,zero,8012f6c <__call_exitprocs+0x15c>
 8012f3c:	89400017 	ldw	r5,0(r17)
 8012f40:	d9000017 	ldw	r4,0(sp)
 8012f44:	183ee83a 	callr	r3
 8012f48:	a0800117 	ldw	r2,4(r20)
 8012f4c:	15bfbf1e 	bne	r2,r22,8012e4c <_gp+0xfffede44>
 8012f50:	98800017 	ldw	r2,0(r19)
 8012f54:	153fcf26 	beq	r2,r20,8012e94 <_gp+0xfffede8c>
 8012f58:	003fbc06 	br	8012e4c <_gp+0xfffede44>
 8012f5c:	183ee83a 	callr	r3
 8012f60:	003ff906 	br	8012f48 <_gp+0xfffedf40>
 8012f64:	a5c00115 	stw	r23,4(r20)
 8012f68:	003feb06 	br	8012f18 <_gp+0xfffedf10>
 8012f6c:	89000017 	ldw	r4,0(r17)
 8012f70:	183ee83a 	callr	r3
 8012f74:	003ff406 	br	8012f48 <_gp+0xfffedf40>
 8012f78:	a0800017 	ldw	r2,0(r20)
 8012f7c:	a027883a 	mov	r19,r20
 8012f80:	1029883a 	mov	r20,r2
 8012f84:	003fb606 	br	8012e60 <_gp+0xfffede58>
 8012f88:	0005883a 	mov	r2,zero
 8012f8c:	003ffb06 	br	8012f7c <_gp+0xfffedf74>

08012f90 <__sflags>:
 8012f90:	28800007 	ldb	r2,0(r5)
 8012f94:	00c01c84 	movi	r3,114
 8012f98:	10c02426 	beq	r2,r3,801302c <__sflags+0x9c>
 8012f9c:	00c01dc4 	movi	r3,119
 8012fa0:	10c01e26 	beq	r2,r3,801301c <__sflags+0x8c>
 8012fa4:	00c01844 	movi	r3,97
 8012fa8:	10c00426 	beq	r2,r3,8012fbc <__sflags+0x2c>
 8012fac:	00800584 	movi	r2,22
 8012fb0:	20800015 	stw	r2,0(r4)
 8012fb4:	0005883a 	mov	r2,zero
 8012fb8:	f800283a 	ret
 8012fbc:	02c08204 	movi	r11,520
 8012fc0:	01000044 	movi	r4,1
 8012fc4:	00804204 	movi	r2,264
 8012fc8:	01c00ac4 	movi	r7,43
 8012fcc:	02bff8c4 	movi	r10,-29
 8012fd0:	027fff04 	movi	r9,-4
 8012fd4:	02001e04 	movi	r8,120
 8012fd8:	29400044 	addi	r5,r5,1
 8012fdc:	28c00007 	ldb	r3,0(r5)
 8012fe0:	18000626 	beq	r3,zero,8012ffc <__sflags+0x6c>
 8012fe4:	19c00826 	beq	r3,r7,8013008 <__sflags+0x78>
 8012fe8:	1a3ffb1e 	bne	r3,r8,8012fd8 <_gp+0xfffedfd0>
 8012fec:	29400044 	addi	r5,r5,1
 8012ff0:	28c00007 	ldb	r3,0(r5)
 8012ff4:	21020014 	ori	r4,r4,2048
 8012ff8:	183ffa1e 	bne	r3,zero,8012fe4 <_gp+0xfffedfdc>
 8012ffc:	22c8b03a 	or	r4,r4,r11
 8013000:	31000015 	stw	r4,0(r6)
 8013004:	f800283a 	ret
 8013008:	1284703a 	and	r2,r2,r10
 801300c:	2248703a 	and	r4,r4,r9
 8013010:	10800414 	ori	r2,r2,16
 8013014:	21000094 	ori	r4,r4,2
 8013018:	003fef06 	br	8012fd8 <_gp+0xfffedfd0>
 801301c:	02c18004 	movi	r11,1536
 8013020:	01000044 	movi	r4,1
 8013024:	00800204 	movi	r2,8
 8013028:	003fe706 	br	8012fc8 <_gp+0xfffedfc0>
 801302c:	0017883a 	mov	r11,zero
 8013030:	0009883a 	mov	r4,zero
 8013034:	00800104 	movi	r2,4
 8013038:	003fe306 	br	8012fc8 <_gp+0xfffedfc0>

0801303c <__getdelim>:
 801303c:	defff604 	addi	sp,sp,-40
 8013040:	dfc00915 	stw	ra,36(sp)
 8013044:	df000815 	stw	fp,32(sp)
 8013048:	ddc00715 	stw	r23,28(sp)
 801304c:	dd800615 	stw	r22,24(sp)
 8013050:	dd400515 	stw	r21,20(sp)
 8013054:	dd000415 	stw	r20,16(sp)
 8013058:	dcc00315 	stw	r19,12(sp)
 801305c:	dc800215 	stw	r18,8(sp)
 8013060:	dc400115 	stw	r17,4(sp)
 8013064:	dc000015 	stw	r16,0(sp)
 8013068:	38004626 	beq	r7,zero,8013184 <__getdelim+0x148>
 801306c:	202d883a 	mov	r22,r4
 8013070:	20004426 	beq	r4,zero,8013184 <__getdelim+0x148>
 8013074:	282b883a 	mov	r21,r5
 8013078:	28004226 	beq	r5,zero,8013184 <__getdelim+0x148>
 801307c:	24000017 	ldw	r16,0(r4)
 8013080:	3823883a 	mov	r17,r7
 8013084:	3027883a 	mov	r19,r6
 8013088:	80002426 	beq	r16,zero,801311c <__getdelim+0xe0>
 801308c:	28800017 	ldw	r2,0(r5)
 8013090:	00c000c4 	movi	r3,3
 8013094:	1880212e 	bgeu	r3,r2,801311c <__getdelim+0xe0>
 8013098:	008200b4 	movhi	r2,2050
 801309c:	10b40304 	addi	r2,r2,-12276
 80130a0:	11000017 	ldw	r4,0(r2)
 80130a4:	20000226 	beq	r4,zero,80130b0 <__getdelim+0x74>
 80130a8:	20800e17 	ldw	r2,56(r4)
 80130ac:	10003326 	beq	r2,zero,801317c <__getdelim+0x140>
 80130b0:	adc00017 	ldw	r23,0(r21)
 80130b4:	8029883a 	mov	r20,r16
 80130b8:	04bfffc4 	movi	r18,-1
 80130bc:	bdffffc4 	addi	r23,r23,-1
 80130c0:	85ef883a 	add	r23,r16,r23
 80130c4:	00000506 	br	80130dc <__getdelim+0xa0>
 80130c8:	80138680 	call	8013868 <getc_unlocked>
 80130cc:	14801c26 	beq	r2,r18,8013140 <__getdelim+0x104>
 80130d0:	e0800005 	stb	r2,0(fp)
 80130d4:	84000044 	addi	r16,r16,1
 80130d8:	14c01926 	beq	r2,r19,8013140 <__getdelim+0x104>
 80130dc:	8809883a 	mov	r4,r17
 80130e0:	8039883a 	mov	fp,r16
 80130e4:	85fff81e 	bne	r16,r23,80130c8 <_gp+0xfffee0c0>
 80130e8:	adc00017 	ldw	r23,0(r21)
 80130ec:	a009883a 	mov	r4,r20
 80130f0:	8539c83a 	sub	fp,r16,r20
 80130f4:	bdef883a 	add	r23,r23,r23
 80130f8:	b80b883a 	mov	r5,r23
 80130fc:	80132b40 	call	80132b4 <realloc>
 8013100:	1029883a 	mov	r20,r2
 8013104:	10000e26 	beq	r2,zero,8013140 <__getdelim+0x104>
 8013108:	b5000015 	stw	r20,0(r22)
 801310c:	adc00015 	stw	r23,0(r21)
 8013110:	a721883a 	add	r16,r20,fp
 8013114:	bf2fc83a 	sub	r23,r23,fp
 8013118:	003fe806 	br	80130bc <_gp+0xfffee0b4>
 801311c:	04802004 	movi	r18,128
 8013120:	8009883a 	mov	r4,r16
 8013124:	900b883a 	mov	r5,r18
 8013128:	80132b40 	call	80132b4 <realloc>
 801312c:	1021883a 	mov	r16,r2
 8013130:	10001926 	beq	r2,zero,8013198 <__getdelim+0x15c>
 8013134:	b0800015 	stw	r2,0(r22)
 8013138:	ac800015 	stw	r18,0(r21)
 801313c:	003fd606 	br	8013098 <_gp+0xfffee090>
 8013140:	a4001526 	beq	r20,r16,8013198 <__getdelim+0x15c>
 8013144:	80000005 	stb	zero,0(r16)
 8013148:	8505c83a 	sub	r2,r16,r20
 801314c:	dfc00917 	ldw	ra,36(sp)
 8013150:	df000817 	ldw	fp,32(sp)
 8013154:	ddc00717 	ldw	r23,28(sp)
 8013158:	dd800617 	ldw	r22,24(sp)
 801315c:	dd400517 	ldw	r21,20(sp)
 8013160:	dd000417 	ldw	r20,16(sp)
 8013164:	dcc00317 	ldw	r19,12(sp)
 8013168:	dc800217 	ldw	r18,8(sp)
 801316c:	dc400117 	ldw	r17,4(sp)
 8013170:	dc000017 	ldw	r16,0(sp)
 8013174:	dec00a04 	addi	sp,sp,40
 8013178:	f800283a 	ret
 801317c:	8010c4c0 	call	8010c4c <__sinit>
 8013180:	003fcb06 	br	80130b0 <_gp+0xfffee0a8>
 8013184:	80138300 	call	8013830 <__errno>
 8013188:	00c00584 	movi	r3,22
 801318c:	10c00015 	stw	r3,0(r2)
 8013190:	00bfffc4 	movi	r2,-1
 8013194:	003fed06 	br	801314c <_gp+0xfffee144>
 8013198:	00bfffc4 	movi	r2,-1
 801319c:	003feb06 	br	801314c <_gp+0xfffee144>

080131a0 <_isatty_r>:
 80131a0:	defffd04 	addi	sp,sp,-12
 80131a4:	dc000015 	stw	r16,0(sp)
 80131a8:	040200b4 	movhi	r16,2050
 80131ac:	dc400115 	stw	r17,4(sp)
 80131b0:	843ae604 	addi	r16,r16,-5224
 80131b4:	2023883a 	mov	r17,r4
 80131b8:	2809883a 	mov	r4,r5
 80131bc:	dfc00215 	stw	ra,8(sp)
 80131c0:	80000015 	stw	zero,0(r16)
 80131c4:	8013f040 	call	8013f04 <isatty>
 80131c8:	00ffffc4 	movi	r3,-1
 80131cc:	10c00526 	beq	r2,r3,80131e4 <_isatty_r+0x44>
 80131d0:	dfc00217 	ldw	ra,8(sp)
 80131d4:	dc400117 	ldw	r17,4(sp)
 80131d8:	dc000017 	ldw	r16,0(sp)
 80131dc:	dec00304 	addi	sp,sp,12
 80131e0:	f800283a 	ret
 80131e4:	80c00017 	ldw	r3,0(r16)
 80131e8:	183ff926 	beq	r3,zero,80131d0 <_gp+0xfffee1c8>
 80131ec:	88c00015 	stw	r3,0(r17)
 80131f0:	003ff706 	br	80131d0 <_gp+0xfffee1c8>

080131f4 <_lseek_r>:
 80131f4:	defffd04 	addi	sp,sp,-12
 80131f8:	2805883a 	mov	r2,r5
 80131fc:	dc000015 	stw	r16,0(sp)
 8013200:	040200b4 	movhi	r16,2050
 8013204:	dc400115 	stw	r17,4(sp)
 8013208:	300b883a 	mov	r5,r6
 801320c:	843ae604 	addi	r16,r16,-5224
 8013210:	2023883a 	mov	r17,r4
 8013214:	380d883a 	mov	r6,r7
 8013218:	1009883a 	mov	r4,r2
 801321c:	dfc00215 	stw	ra,8(sp)
 8013220:	80000015 	stw	zero,0(r16)
 8013224:	80140d80 	call	80140d8 <lseek>
 8013228:	00ffffc4 	movi	r3,-1
 801322c:	10c00526 	beq	r2,r3,8013244 <_lseek_r+0x50>
 8013230:	dfc00217 	ldw	ra,8(sp)
 8013234:	dc400117 	ldw	r17,4(sp)
 8013238:	dc000017 	ldw	r16,0(sp)
 801323c:	dec00304 	addi	sp,sp,12
 8013240:	f800283a 	ret
 8013244:	80c00017 	ldw	r3,0(r16)
 8013248:	183ff926 	beq	r3,zero,8013230 <_gp+0xfffee228>
 801324c:	88c00015 	stw	r3,0(r17)
 8013250:	003ff706 	br	8013230 <_gp+0xfffee228>

08013254 <_read_r>:
 8013254:	defffd04 	addi	sp,sp,-12
 8013258:	2805883a 	mov	r2,r5
 801325c:	dc000015 	stw	r16,0(sp)
 8013260:	040200b4 	movhi	r16,2050
 8013264:	dc400115 	stw	r17,4(sp)
 8013268:	300b883a 	mov	r5,r6
 801326c:	843ae604 	addi	r16,r16,-5224
 8013270:	2023883a 	mov	r17,r4
 8013274:	380d883a 	mov	r6,r7
 8013278:	1009883a 	mov	r4,r2
 801327c:	dfc00215 	stw	ra,8(sp)
 8013280:	80000015 	stw	zero,0(r16)
 8013284:	80147900 	call	8014790 <read>
 8013288:	00ffffc4 	movi	r3,-1
 801328c:	10c00526 	beq	r2,r3,80132a4 <_read_r+0x50>
 8013290:	dfc00217 	ldw	ra,8(sp)
 8013294:	dc400117 	ldw	r17,4(sp)
 8013298:	dc000017 	ldw	r16,0(sp)
 801329c:	dec00304 	addi	sp,sp,12
 80132a0:	f800283a 	ret
 80132a4:	80c00017 	ldw	r3,0(r16)
 80132a8:	183ff926 	beq	r3,zero,8013290 <_gp+0xfffee288>
 80132ac:	88c00015 	stw	r3,0(r17)
 80132b0:	003ff706 	br	8013290 <_gp+0xfffee288>

080132b4 <realloc>:
 80132b4:	008200b4 	movhi	r2,2050
 80132b8:	10b40304 	addi	r2,r2,-12276
 80132bc:	280d883a 	mov	r6,r5
 80132c0:	200b883a 	mov	r5,r4
 80132c4:	11000017 	ldw	r4,0(r2)
 80132c8:	80132cc1 	jmpi	80132cc <_realloc_r>

080132cc <_realloc_r>:
 80132cc:	defff604 	addi	sp,sp,-40
 80132d0:	dc800215 	stw	r18,8(sp)
 80132d4:	dfc00915 	stw	ra,36(sp)
 80132d8:	df000815 	stw	fp,32(sp)
 80132dc:	ddc00715 	stw	r23,28(sp)
 80132e0:	dd800615 	stw	r22,24(sp)
 80132e4:	dd400515 	stw	r21,20(sp)
 80132e8:	dd000415 	stw	r20,16(sp)
 80132ec:	dcc00315 	stw	r19,12(sp)
 80132f0:	dc400115 	stw	r17,4(sp)
 80132f4:	dc000015 	stw	r16,0(sp)
 80132f8:	3025883a 	mov	r18,r6
 80132fc:	2800b726 	beq	r5,zero,80135dc <_realloc_r+0x310>
 8013300:	282b883a 	mov	r21,r5
 8013304:	2029883a 	mov	r20,r4
 8013308:	80142200 	call	8014220 <__malloc_lock>
 801330c:	a8bfff17 	ldw	r2,-4(r21)
 8013310:	043fff04 	movi	r16,-4
 8013314:	90c002c4 	addi	r3,r18,11
 8013318:	01000584 	movi	r4,22
 801331c:	acfffe04 	addi	r19,r21,-8
 8013320:	1420703a 	and	r16,r2,r16
 8013324:	20c0332e 	bgeu	r4,r3,80133f4 <_realloc_r+0x128>
 8013328:	047ffe04 	movi	r17,-8
 801332c:	1c62703a 	and	r17,r3,r17
 8013330:	8807883a 	mov	r3,r17
 8013334:	88005816 	blt	r17,zero,8013498 <_realloc_r+0x1cc>
 8013338:	8c805736 	bltu	r17,r18,8013498 <_realloc_r+0x1cc>
 801333c:	80c0300e 	bge	r16,r3,8013400 <_realloc_r+0x134>
 8013340:	070200b4 	movhi	fp,2050
 8013344:	e72e6904 	addi	fp,fp,-18012
 8013348:	e1c00217 	ldw	r7,8(fp)
 801334c:	9c09883a 	add	r4,r19,r16
 8013350:	22000117 	ldw	r8,4(r4)
 8013354:	21c06326 	beq	r4,r7,80134e4 <_realloc_r+0x218>
 8013358:	017fff84 	movi	r5,-2
 801335c:	414a703a 	and	r5,r8,r5
 8013360:	214b883a 	add	r5,r4,r5
 8013364:	29800117 	ldw	r6,4(r5)
 8013368:	3180004c 	andi	r6,r6,1
 801336c:	30003f26 	beq	r6,zero,801346c <_realloc_r+0x1a0>
 8013370:	1080004c 	andi	r2,r2,1
 8013374:	10008326 	beq	r2,zero,8013584 <_realloc_r+0x2b8>
 8013378:	900b883a 	mov	r5,r18
 801337c:	a009883a 	mov	r4,r20
 8013380:	8011a740 	call	8011a74 <_malloc_r>
 8013384:	1025883a 	mov	r18,r2
 8013388:	10011e26 	beq	r2,zero,8013804 <_realloc_r+0x538>
 801338c:	a93fff17 	ldw	r4,-4(r21)
 8013390:	10fffe04 	addi	r3,r2,-8
 8013394:	00bfff84 	movi	r2,-2
 8013398:	2084703a 	and	r2,r4,r2
 801339c:	9885883a 	add	r2,r19,r2
 80133a0:	1880ee26 	beq	r3,r2,801375c <_realloc_r+0x490>
 80133a4:	81bfff04 	addi	r6,r16,-4
 80133a8:	00800904 	movi	r2,36
 80133ac:	1180b836 	bltu	r2,r6,8013690 <_realloc_r+0x3c4>
 80133b0:	00c004c4 	movi	r3,19
 80133b4:	19809636 	bltu	r3,r6,8013610 <_realloc_r+0x344>
 80133b8:	9005883a 	mov	r2,r18
 80133bc:	a807883a 	mov	r3,r21
 80133c0:	19000017 	ldw	r4,0(r3)
 80133c4:	11000015 	stw	r4,0(r2)
 80133c8:	19000117 	ldw	r4,4(r3)
 80133cc:	11000115 	stw	r4,4(r2)
 80133d0:	18c00217 	ldw	r3,8(r3)
 80133d4:	10c00215 	stw	r3,8(r2)
 80133d8:	a80b883a 	mov	r5,r21
 80133dc:	a009883a 	mov	r4,r20
 80133e0:	8010ecc0 	call	8010ecc <_free_r>
 80133e4:	a009883a 	mov	r4,r20
 80133e8:	80142440 	call	8014244 <__malloc_unlock>
 80133ec:	9005883a 	mov	r2,r18
 80133f0:	00001206 	br	801343c <_realloc_r+0x170>
 80133f4:	00c00404 	movi	r3,16
 80133f8:	1823883a 	mov	r17,r3
 80133fc:	003fce06 	br	8013338 <_gp+0xfffee330>
 8013400:	a825883a 	mov	r18,r21
 8013404:	8445c83a 	sub	r2,r16,r17
 8013408:	00c003c4 	movi	r3,15
 801340c:	18802636 	bltu	r3,r2,80134a8 <_realloc_r+0x1dc>
 8013410:	99800117 	ldw	r6,4(r19)
 8013414:	9c07883a 	add	r3,r19,r16
 8013418:	3180004c 	andi	r6,r6,1
 801341c:	3420b03a 	or	r16,r6,r16
 8013420:	9c000115 	stw	r16,4(r19)
 8013424:	18800117 	ldw	r2,4(r3)
 8013428:	10800054 	ori	r2,r2,1
 801342c:	18800115 	stw	r2,4(r3)
 8013430:	a009883a 	mov	r4,r20
 8013434:	80142440 	call	8014244 <__malloc_unlock>
 8013438:	9005883a 	mov	r2,r18
 801343c:	dfc00917 	ldw	ra,36(sp)
 8013440:	df000817 	ldw	fp,32(sp)
 8013444:	ddc00717 	ldw	r23,28(sp)
 8013448:	dd800617 	ldw	r22,24(sp)
 801344c:	dd400517 	ldw	r21,20(sp)
 8013450:	dd000417 	ldw	r20,16(sp)
 8013454:	dcc00317 	ldw	r19,12(sp)
 8013458:	dc800217 	ldw	r18,8(sp)
 801345c:	dc400117 	ldw	r17,4(sp)
 8013460:	dc000017 	ldw	r16,0(sp)
 8013464:	dec00a04 	addi	sp,sp,40
 8013468:	f800283a 	ret
 801346c:	017fff04 	movi	r5,-4
 8013470:	414a703a 	and	r5,r8,r5
 8013474:	814d883a 	add	r6,r16,r5
 8013478:	30c01f16 	blt	r6,r3,80134f8 <_realloc_r+0x22c>
 801347c:	20800317 	ldw	r2,12(r4)
 8013480:	20c00217 	ldw	r3,8(r4)
 8013484:	a825883a 	mov	r18,r21
 8013488:	3021883a 	mov	r16,r6
 801348c:	18800315 	stw	r2,12(r3)
 8013490:	10c00215 	stw	r3,8(r2)
 8013494:	003fdb06 	br	8013404 <_gp+0xfffee3fc>
 8013498:	00800304 	movi	r2,12
 801349c:	a0800015 	stw	r2,0(r20)
 80134a0:	0005883a 	mov	r2,zero
 80134a4:	003fe506 	br	801343c <_gp+0xfffee434>
 80134a8:	98c00117 	ldw	r3,4(r19)
 80134ac:	9c4b883a 	add	r5,r19,r17
 80134b0:	11000054 	ori	r4,r2,1
 80134b4:	18c0004c 	andi	r3,r3,1
 80134b8:	1c62b03a 	or	r17,r3,r17
 80134bc:	9c400115 	stw	r17,4(r19)
 80134c0:	29000115 	stw	r4,4(r5)
 80134c4:	2885883a 	add	r2,r5,r2
 80134c8:	10c00117 	ldw	r3,4(r2)
 80134cc:	29400204 	addi	r5,r5,8
 80134d0:	a009883a 	mov	r4,r20
 80134d4:	18c00054 	ori	r3,r3,1
 80134d8:	10c00115 	stw	r3,4(r2)
 80134dc:	8010ecc0 	call	8010ecc <_free_r>
 80134e0:	003fd306 	br	8013430 <_gp+0xfffee428>
 80134e4:	017fff04 	movi	r5,-4
 80134e8:	414a703a 	and	r5,r8,r5
 80134ec:	89800404 	addi	r6,r17,16
 80134f0:	8151883a 	add	r8,r16,r5
 80134f4:	4180590e 	bge	r8,r6,801365c <_realloc_r+0x390>
 80134f8:	1080004c 	andi	r2,r2,1
 80134fc:	103f9e1e 	bne	r2,zero,8013378 <_gp+0xfffee370>
 8013500:	adbffe17 	ldw	r22,-8(r21)
 8013504:	00bfff04 	movi	r2,-4
 8013508:	9dadc83a 	sub	r22,r19,r22
 801350c:	b1800117 	ldw	r6,4(r22)
 8013510:	3084703a 	and	r2,r6,r2
 8013514:	20002026 	beq	r4,zero,8013598 <_realloc_r+0x2cc>
 8013518:	80af883a 	add	r23,r16,r2
 801351c:	b96f883a 	add	r23,r23,r5
 8013520:	21c05f26 	beq	r4,r7,80136a0 <_realloc_r+0x3d4>
 8013524:	b8c01c16 	blt	r23,r3,8013598 <_realloc_r+0x2cc>
 8013528:	20800317 	ldw	r2,12(r4)
 801352c:	20c00217 	ldw	r3,8(r4)
 8013530:	81bfff04 	addi	r6,r16,-4
 8013534:	01000904 	movi	r4,36
 8013538:	18800315 	stw	r2,12(r3)
 801353c:	10c00215 	stw	r3,8(r2)
 8013540:	b0c00217 	ldw	r3,8(r22)
 8013544:	b0800317 	ldw	r2,12(r22)
 8013548:	b4800204 	addi	r18,r22,8
 801354c:	18800315 	stw	r2,12(r3)
 8013550:	10c00215 	stw	r3,8(r2)
 8013554:	21801b36 	bltu	r4,r6,80135c4 <_realloc_r+0x2f8>
 8013558:	008004c4 	movi	r2,19
 801355c:	1180352e 	bgeu	r2,r6,8013634 <_realloc_r+0x368>
 8013560:	a8800017 	ldw	r2,0(r21)
 8013564:	b0800215 	stw	r2,8(r22)
 8013568:	a8800117 	ldw	r2,4(r21)
 801356c:	b0800315 	stw	r2,12(r22)
 8013570:	008006c4 	movi	r2,27
 8013574:	11807f36 	bltu	r2,r6,8013774 <_realloc_r+0x4a8>
 8013578:	b0800404 	addi	r2,r22,16
 801357c:	ad400204 	addi	r21,r21,8
 8013580:	00002d06 	br	8013638 <_realloc_r+0x36c>
 8013584:	adbffe17 	ldw	r22,-8(r21)
 8013588:	00bfff04 	movi	r2,-4
 801358c:	9dadc83a 	sub	r22,r19,r22
 8013590:	b1000117 	ldw	r4,4(r22)
 8013594:	2084703a 	and	r2,r4,r2
 8013598:	b03f7726 	beq	r22,zero,8013378 <_gp+0xfffee370>
 801359c:	80af883a 	add	r23,r16,r2
 80135a0:	b8ff7516 	blt	r23,r3,8013378 <_gp+0xfffee370>
 80135a4:	b0800317 	ldw	r2,12(r22)
 80135a8:	b0c00217 	ldw	r3,8(r22)
 80135ac:	81bfff04 	addi	r6,r16,-4
 80135b0:	01000904 	movi	r4,36
 80135b4:	18800315 	stw	r2,12(r3)
 80135b8:	10c00215 	stw	r3,8(r2)
 80135bc:	b4800204 	addi	r18,r22,8
 80135c0:	21bfe52e 	bgeu	r4,r6,8013558 <_gp+0xfffee550>
 80135c4:	a80b883a 	mov	r5,r21
 80135c8:	9009883a 	mov	r4,r18
 80135cc:	80138a00 	call	80138a0 <memmove>
 80135d0:	b821883a 	mov	r16,r23
 80135d4:	b027883a 	mov	r19,r22
 80135d8:	003f8a06 	br	8013404 <_gp+0xfffee3fc>
 80135dc:	300b883a 	mov	r5,r6
 80135e0:	dfc00917 	ldw	ra,36(sp)
 80135e4:	df000817 	ldw	fp,32(sp)
 80135e8:	ddc00717 	ldw	r23,28(sp)
 80135ec:	dd800617 	ldw	r22,24(sp)
 80135f0:	dd400517 	ldw	r21,20(sp)
 80135f4:	dd000417 	ldw	r20,16(sp)
 80135f8:	dcc00317 	ldw	r19,12(sp)
 80135fc:	dc800217 	ldw	r18,8(sp)
 8013600:	dc400117 	ldw	r17,4(sp)
 8013604:	dc000017 	ldw	r16,0(sp)
 8013608:	dec00a04 	addi	sp,sp,40
 801360c:	8011a741 	jmpi	8011a74 <_malloc_r>
 8013610:	a8c00017 	ldw	r3,0(r21)
 8013614:	90c00015 	stw	r3,0(r18)
 8013618:	a8c00117 	ldw	r3,4(r21)
 801361c:	90c00115 	stw	r3,4(r18)
 8013620:	00c006c4 	movi	r3,27
 8013624:	19804536 	bltu	r3,r6,801373c <_realloc_r+0x470>
 8013628:	90800204 	addi	r2,r18,8
 801362c:	a8c00204 	addi	r3,r21,8
 8013630:	003f6306 	br	80133c0 <_gp+0xfffee3b8>
 8013634:	9005883a 	mov	r2,r18
 8013638:	a8c00017 	ldw	r3,0(r21)
 801363c:	b821883a 	mov	r16,r23
 8013640:	b027883a 	mov	r19,r22
 8013644:	10c00015 	stw	r3,0(r2)
 8013648:	a8c00117 	ldw	r3,4(r21)
 801364c:	10c00115 	stw	r3,4(r2)
 8013650:	a8c00217 	ldw	r3,8(r21)
 8013654:	10c00215 	stw	r3,8(r2)
 8013658:	003f6a06 	br	8013404 <_gp+0xfffee3fc>
 801365c:	9c67883a 	add	r19,r19,r17
 8013660:	4445c83a 	sub	r2,r8,r17
 8013664:	e4c00215 	stw	r19,8(fp)
 8013668:	10800054 	ori	r2,r2,1
 801366c:	98800115 	stw	r2,4(r19)
 8013670:	a8bfff17 	ldw	r2,-4(r21)
 8013674:	a009883a 	mov	r4,r20
 8013678:	1080004c 	andi	r2,r2,1
 801367c:	1462b03a 	or	r17,r2,r17
 8013680:	ac7fff15 	stw	r17,-4(r21)
 8013684:	80142440 	call	8014244 <__malloc_unlock>
 8013688:	a805883a 	mov	r2,r21
 801368c:	003f6b06 	br	801343c <_gp+0xfffee434>
 8013690:	a80b883a 	mov	r5,r21
 8013694:	9009883a 	mov	r4,r18
 8013698:	80138a00 	call	80138a0 <memmove>
 801369c:	003f4e06 	br	80133d8 <_gp+0xfffee3d0>
 80136a0:	89000404 	addi	r4,r17,16
 80136a4:	b93fbc16 	blt	r23,r4,8013598 <_gp+0xfffee590>
 80136a8:	b0800317 	ldw	r2,12(r22)
 80136ac:	b0c00217 	ldw	r3,8(r22)
 80136b0:	81bfff04 	addi	r6,r16,-4
 80136b4:	01000904 	movi	r4,36
 80136b8:	18800315 	stw	r2,12(r3)
 80136bc:	10c00215 	stw	r3,8(r2)
 80136c0:	b4800204 	addi	r18,r22,8
 80136c4:	21804336 	bltu	r4,r6,80137d4 <_realloc_r+0x508>
 80136c8:	008004c4 	movi	r2,19
 80136cc:	11803f2e 	bgeu	r2,r6,80137cc <_realloc_r+0x500>
 80136d0:	a8800017 	ldw	r2,0(r21)
 80136d4:	b0800215 	stw	r2,8(r22)
 80136d8:	a8800117 	ldw	r2,4(r21)
 80136dc:	b0800315 	stw	r2,12(r22)
 80136e0:	008006c4 	movi	r2,27
 80136e4:	11803f36 	bltu	r2,r6,80137e4 <_realloc_r+0x518>
 80136e8:	b0800404 	addi	r2,r22,16
 80136ec:	ad400204 	addi	r21,r21,8
 80136f0:	a8c00017 	ldw	r3,0(r21)
 80136f4:	10c00015 	stw	r3,0(r2)
 80136f8:	a8c00117 	ldw	r3,4(r21)
 80136fc:	10c00115 	stw	r3,4(r2)
 8013700:	a8c00217 	ldw	r3,8(r21)
 8013704:	10c00215 	stw	r3,8(r2)
 8013708:	b447883a 	add	r3,r22,r17
 801370c:	bc45c83a 	sub	r2,r23,r17
 8013710:	e0c00215 	stw	r3,8(fp)
 8013714:	10800054 	ori	r2,r2,1
 8013718:	18800115 	stw	r2,4(r3)
 801371c:	b0800117 	ldw	r2,4(r22)
 8013720:	a009883a 	mov	r4,r20
 8013724:	1080004c 	andi	r2,r2,1
 8013728:	1462b03a 	or	r17,r2,r17
 801372c:	b4400115 	stw	r17,4(r22)
 8013730:	80142440 	call	8014244 <__malloc_unlock>
 8013734:	9005883a 	mov	r2,r18
 8013738:	003f4006 	br	801343c <_gp+0xfffee434>
 801373c:	a8c00217 	ldw	r3,8(r21)
 8013740:	90c00215 	stw	r3,8(r18)
 8013744:	a8c00317 	ldw	r3,12(r21)
 8013748:	90c00315 	stw	r3,12(r18)
 801374c:	30801126 	beq	r6,r2,8013794 <_realloc_r+0x4c8>
 8013750:	90800404 	addi	r2,r18,16
 8013754:	a8c00404 	addi	r3,r21,16
 8013758:	003f1906 	br	80133c0 <_gp+0xfffee3b8>
 801375c:	90ffff17 	ldw	r3,-4(r18)
 8013760:	00bfff04 	movi	r2,-4
 8013764:	a825883a 	mov	r18,r21
 8013768:	1884703a 	and	r2,r3,r2
 801376c:	80a1883a 	add	r16,r16,r2
 8013770:	003f2406 	br	8013404 <_gp+0xfffee3fc>
 8013774:	a8800217 	ldw	r2,8(r21)
 8013778:	b0800415 	stw	r2,16(r22)
 801377c:	a8800317 	ldw	r2,12(r21)
 8013780:	b0800515 	stw	r2,20(r22)
 8013784:	31000a26 	beq	r6,r4,80137b0 <_realloc_r+0x4e4>
 8013788:	b0800604 	addi	r2,r22,24
 801378c:	ad400404 	addi	r21,r21,16
 8013790:	003fa906 	br	8013638 <_gp+0xfffee630>
 8013794:	a9000417 	ldw	r4,16(r21)
 8013798:	90800604 	addi	r2,r18,24
 801379c:	a8c00604 	addi	r3,r21,24
 80137a0:	91000415 	stw	r4,16(r18)
 80137a4:	a9000517 	ldw	r4,20(r21)
 80137a8:	91000515 	stw	r4,20(r18)
 80137ac:	003f0406 	br	80133c0 <_gp+0xfffee3b8>
 80137b0:	a8c00417 	ldw	r3,16(r21)
 80137b4:	ad400604 	addi	r21,r21,24
 80137b8:	b0800804 	addi	r2,r22,32
 80137bc:	b0c00615 	stw	r3,24(r22)
 80137c0:	a8ffff17 	ldw	r3,-4(r21)
 80137c4:	b0c00715 	stw	r3,28(r22)
 80137c8:	003f9b06 	br	8013638 <_gp+0xfffee630>
 80137cc:	9005883a 	mov	r2,r18
 80137d0:	003fc706 	br	80136f0 <_gp+0xfffee6e8>
 80137d4:	a80b883a 	mov	r5,r21
 80137d8:	9009883a 	mov	r4,r18
 80137dc:	80138a00 	call	80138a0 <memmove>
 80137e0:	003fc906 	br	8013708 <_gp+0xfffee700>
 80137e4:	a8800217 	ldw	r2,8(r21)
 80137e8:	b0800415 	stw	r2,16(r22)
 80137ec:	a8800317 	ldw	r2,12(r21)
 80137f0:	b0800515 	stw	r2,20(r22)
 80137f4:	31000726 	beq	r6,r4,8013814 <_realloc_r+0x548>
 80137f8:	b0800604 	addi	r2,r22,24
 80137fc:	ad400404 	addi	r21,r21,16
 8013800:	003fbb06 	br	80136f0 <_gp+0xfffee6e8>
 8013804:	a009883a 	mov	r4,r20
 8013808:	80142440 	call	8014244 <__malloc_unlock>
 801380c:	0005883a 	mov	r2,zero
 8013810:	003f0a06 	br	801343c <_gp+0xfffee434>
 8013814:	a8c00417 	ldw	r3,16(r21)
 8013818:	ad400604 	addi	r21,r21,24
 801381c:	b0800804 	addi	r2,r22,32
 8013820:	b0c00615 	stw	r3,24(r22)
 8013824:	a8ffff17 	ldw	r3,-4(r21)
 8013828:	b0c00715 	stw	r3,28(r22)
 801382c:	003fb006 	br	80136f0 <_gp+0xfffee6e8>

08013830 <__errno>:
 8013830:	008200b4 	movhi	r2,2050
 8013834:	10b40304 	addi	r2,r2,-12276
 8013838:	10800017 	ldw	r2,0(r2)
 801383c:	f800283a 	ret

08013840 <_getc_unlocked_r>:
 8013840:	28800117 	ldw	r2,4(r5)
 8013844:	10bfffc4 	addi	r2,r2,-1
 8013848:	28800115 	stw	r2,4(r5)
 801384c:	10000516 	blt	r2,zero,8013864 <_getc_unlocked_r+0x24>
 8013850:	28800017 	ldw	r2,0(r5)
 8013854:	11000044 	addi	r4,r2,1
 8013858:	29000015 	stw	r4,0(r5)
 801385c:	10800003 	ldbu	r2,0(r2)
 8013860:	f800283a 	ret
 8013864:	80139fc1 	jmpi	80139fc <__srget_r>

08013868 <getc_unlocked>:
 8013868:	20800117 	ldw	r2,4(r4)
 801386c:	10bfffc4 	addi	r2,r2,-1
 8013870:	20800115 	stw	r2,4(r4)
 8013874:	10000516 	blt	r2,zero,801388c <getc_unlocked+0x24>
 8013878:	20800017 	ldw	r2,0(r4)
 801387c:	10c00044 	addi	r3,r2,1
 8013880:	20c00015 	stw	r3,0(r4)
 8013884:	10800003 	ldbu	r2,0(r2)
 8013888:	f800283a 	ret
 801388c:	008200b4 	movhi	r2,2050
 8013890:	10b40304 	addi	r2,r2,-12276
 8013894:	200b883a 	mov	r5,r4
 8013898:	11000017 	ldw	r4,0(r2)
 801389c:	80139fc1 	jmpi	80139fc <__srget_r>

080138a0 <memmove>:
 80138a0:	2005883a 	mov	r2,r4
 80138a4:	29000b2e 	bgeu	r5,r4,80138d4 <memmove+0x34>
 80138a8:	298f883a 	add	r7,r5,r6
 80138ac:	21c0092e 	bgeu	r4,r7,80138d4 <memmove+0x34>
 80138b0:	2187883a 	add	r3,r4,r6
 80138b4:	198bc83a 	sub	r5,r3,r6
 80138b8:	30004826 	beq	r6,zero,80139dc <memmove+0x13c>
 80138bc:	39ffffc4 	addi	r7,r7,-1
 80138c0:	39000003 	ldbu	r4,0(r7)
 80138c4:	18ffffc4 	addi	r3,r3,-1
 80138c8:	19000005 	stb	r4,0(r3)
 80138cc:	28fffb1e 	bne	r5,r3,80138bc <_gp+0xfffee8b4>
 80138d0:	f800283a 	ret
 80138d4:	00c003c4 	movi	r3,15
 80138d8:	1980412e 	bgeu	r3,r6,80139e0 <memmove+0x140>
 80138dc:	2886b03a 	or	r3,r5,r2
 80138e0:	18c000cc 	andi	r3,r3,3
 80138e4:	1800401e 	bne	r3,zero,80139e8 <memmove+0x148>
 80138e8:	33fffc04 	addi	r15,r6,-16
 80138ec:	781ed13a 	srli	r15,r15,4
 80138f0:	28c00104 	addi	r3,r5,4
 80138f4:	13400104 	addi	r13,r2,4
 80138f8:	781c913a 	slli	r14,r15,4
 80138fc:	2b000204 	addi	r12,r5,8
 8013900:	12c00204 	addi	r11,r2,8
 8013904:	73800504 	addi	r14,r14,20
 8013908:	2a800304 	addi	r10,r5,12
 801390c:	12400304 	addi	r9,r2,12
 8013910:	2b9d883a 	add	r14,r5,r14
 8013914:	2811883a 	mov	r8,r5
 8013918:	100f883a 	mov	r7,r2
 801391c:	41000017 	ldw	r4,0(r8)
 8013920:	39c00404 	addi	r7,r7,16
 8013924:	18c00404 	addi	r3,r3,16
 8013928:	393ffc15 	stw	r4,-16(r7)
 801392c:	193ffc17 	ldw	r4,-16(r3)
 8013930:	6b400404 	addi	r13,r13,16
 8013934:	5ac00404 	addi	r11,r11,16
 8013938:	693ffc15 	stw	r4,-16(r13)
 801393c:	61000017 	ldw	r4,0(r12)
 8013940:	4a400404 	addi	r9,r9,16
 8013944:	42000404 	addi	r8,r8,16
 8013948:	593ffc15 	stw	r4,-16(r11)
 801394c:	51000017 	ldw	r4,0(r10)
 8013950:	63000404 	addi	r12,r12,16
 8013954:	52800404 	addi	r10,r10,16
 8013958:	493ffc15 	stw	r4,-16(r9)
 801395c:	1bbfef1e 	bne	r3,r14,801391c <_gp+0xfffee914>
 8013960:	79000044 	addi	r4,r15,1
 8013964:	2008913a 	slli	r4,r4,4
 8013968:	328003cc 	andi	r10,r6,15
 801396c:	02c000c4 	movi	r11,3
 8013970:	1107883a 	add	r3,r2,r4
 8013974:	290b883a 	add	r5,r5,r4
 8013978:	5a801e2e 	bgeu	r11,r10,80139f4 <memmove+0x154>
 801397c:	1813883a 	mov	r9,r3
 8013980:	2811883a 	mov	r8,r5
 8013984:	500f883a 	mov	r7,r10
 8013988:	41000017 	ldw	r4,0(r8)
 801398c:	4a400104 	addi	r9,r9,4
 8013990:	39ffff04 	addi	r7,r7,-4
 8013994:	493fff15 	stw	r4,-4(r9)
 8013998:	42000104 	addi	r8,r8,4
 801399c:	59fffa36 	bltu	r11,r7,8013988 <_gp+0xfffee980>
 80139a0:	513fff04 	addi	r4,r10,-4
 80139a4:	2008d0ba 	srli	r4,r4,2
 80139a8:	318000cc 	andi	r6,r6,3
 80139ac:	21000044 	addi	r4,r4,1
 80139b0:	2109883a 	add	r4,r4,r4
 80139b4:	2109883a 	add	r4,r4,r4
 80139b8:	1907883a 	add	r3,r3,r4
 80139bc:	290b883a 	add	r5,r5,r4
 80139c0:	30000b26 	beq	r6,zero,80139f0 <memmove+0x150>
 80139c4:	198d883a 	add	r6,r3,r6
 80139c8:	29c00003 	ldbu	r7,0(r5)
 80139cc:	18c00044 	addi	r3,r3,1
 80139d0:	29400044 	addi	r5,r5,1
 80139d4:	19ffffc5 	stb	r7,-1(r3)
 80139d8:	19bffb1e 	bne	r3,r6,80139c8 <_gp+0xfffee9c0>
 80139dc:	f800283a 	ret
 80139e0:	1007883a 	mov	r3,r2
 80139e4:	003ff606 	br	80139c0 <_gp+0xfffee9b8>
 80139e8:	1007883a 	mov	r3,r2
 80139ec:	003ff506 	br	80139c4 <_gp+0xfffee9bc>
 80139f0:	f800283a 	ret
 80139f4:	500d883a 	mov	r6,r10
 80139f8:	003ff106 	br	80139c0 <_gp+0xfffee9b8>

080139fc <__srget_r>:
 80139fc:	defffd04 	addi	sp,sp,-12
 8013a00:	dc400115 	stw	r17,4(sp)
 8013a04:	dc000015 	stw	r16,0(sp)
 8013a08:	dfc00215 	stw	ra,8(sp)
 8013a0c:	2023883a 	mov	r17,r4
 8013a10:	2821883a 	mov	r16,r5
 8013a14:	20000226 	beq	r4,zero,8013a20 <__srget_r+0x24>
 8013a18:	20800e17 	ldw	r2,56(r4)
 8013a1c:	10001026 	beq	r2,zero,8013a60 <__srget_r+0x64>
 8013a20:	800b883a 	mov	r5,r16
 8013a24:	8809883a 	mov	r4,r17
 8013a28:	801256c0 	call	801256c <__srefill_r>
 8013a2c:	10000e1e 	bne	r2,zero,8013a68 <__srget_r+0x6c>
 8013a30:	80c00017 	ldw	r3,0(r16)
 8013a34:	80800117 	ldw	r2,4(r16)
 8013a38:	19000044 	addi	r4,r3,1
 8013a3c:	10bfffc4 	addi	r2,r2,-1
 8013a40:	80800115 	stw	r2,4(r16)
 8013a44:	81000015 	stw	r4,0(r16)
 8013a48:	18800003 	ldbu	r2,0(r3)
 8013a4c:	dfc00217 	ldw	ra,8(sp)
 8013a50:	dc400117 	ldw	r17,4(sp)
 8013a54:	dc000017 	ldw	r16,0(sp)
 8013a58:	dec00304 	addi	sp,sp,12
 8013a5c:	f800283a 	ret
 8013a60:	8010c4c0 	call	8010c4c <__sinit>
 8013a64:	003fee06 	br	8013a20 <_gp+0xfffeea18>
 8013a68:	00bfffc4 	movi	r2,-1
 8013a6c:	003ff706 	br	8013a4c <_gp+0xfffeea44>

08013a70 <__srget>:
 8013a70:	008200b4 	movhi	r2,2050
 8013a74:	10b40304 	addi	r2,r2,-12276
 8013a78:	200b883a 	mov	r5,r4
 8013a7c:	11000017 	ldw	r4,0(r2)
 8013a80:	80139fc1 	jmpi	80139fc <__srget_r>

08013a84 <__divsi3>:
 8013a84:	20001b16 	blt	r4,zero,8013af4 <__divsi3+0x70>
 8013a88:	000f883a 	mov	r7,zero
 8013a8c:	28001616 	blt	r5,zero,8013ae8 <__divsi3+0x64>
 8013a90:	200d883a 	mov	r6,r4
 8013a94:	29001a2e 	bgeu	r5,r4,8013b00 <__divsi3+0x7c>
 8013a98:	00800804 	movi	r2,32
 8013a9c:	00c00044 	movi	r3,1
 8013aa0:	00000106 	br	8013aa8 <__divsi3+0x24>
 8013aa4:	10000d26 	beq	r2,zero,8013adc <__divsi3+0x58>
 8013aa8:	294b883a 	add	r5,r5,r5
 8013aac:	10bfffc4 	addi	r2,r2,-1
 8013ab0:	18c7883a 	add	r3,r3,r3
 8013ab4:	293ffb36 	bltu	r5,r4,8013aa4 <_gp+0xfffeea9c>
 8013ab8:	0005883a 	mov	r2,zero
 8013abc:	18000726 	beq	r3,zero,8013adc <__divsi3+0x58>
 8013ac0:	0005883a 	mov	r2,zero
 8013ac4:	31400236 	bltu	r6,r5,8013ad0 <__divsi3+0x4c>
 8013ac8:	314dc83a 	sub	r6,r6,r5
 8013acc:	10c4b03a 	or	r2,r2,r3
 8013ad0:	1806d07a 	srli	r3,r3,1
 8013ad4:	280ad07a 	srli	r5,r5,1
 8013ad8:	183ffa1e 	bne	r3,zero,8013ac4 <_gp+0xfffeeabc>
 8013adc:	38000126 	beq	r7,zero,8013ae4 <__divsi3+0x60>
 8013ae0:	0085c83a 	sub	r2,zero,r2
 8013ae4:	f800283a 	ret
 8013ae8:	014bc83a 	sub	r5,zero,r5
 8013aec:	39c0005c 	xori	r7,r7,1
 8013af0:	003fe706 	br	8013a90 <_gp+0xfffeea88>
 8013af4:	0109c83a 	sub	r4,zero,r4
 8013af8:	01c00044 	movi	r7,1
 8013afc:	003fe306 	br	8013a8c <_gp+0xfffeea84>
 8013b00:	00c00044 	movi	r3,1
 8013b04:	003fee06 	br	8013ac0 <_gp+0xfffeeab8>

08013b08 <__modsi3>:
 8013b08:	20001716 	blt	r4,zero,8013b68 <__modsi3+0x60>
 8013b0c:	000f883a 	mov	r7,zero
 8013b10:	2005883a 	mov	r2,r4
 8013b14:	28001216 	blt	r5,zero,8013b60 <__modsi3+0x58>
 8013b18:	2900162e 	bgeu	r5,r4,8013b74 <__modsi3+0x6c>
 8013b1c:	01800804 	movi	r6,32
 8013b20:	00c00044 	movi	r3,1
 8013b24:	00000106 	br	8013b2c <__modsi3+0x24>
 8013b28:	30000a26 	beq	r6,zero,8013b54 <__modsi3+0x4c>
 8013b2c:	294b883a 	add	r5,r5,r5
 8013b30:	31bfffc4 	addi	r6,r6,-1
 8013b34:	18c7883a 	add	r3,r3,r3
 8013b38:	293ffb36 	bltu	r5,r4,8013b28 <_gp+0xfffeeb20>
 8013b3c:	18000526 	beq	r3,zero,8013b54 <__modsi3+0x4c>
 8013b40:	1806d07a 	srli	r3,r3,1
 8013b44:	11400136 	bltu	r2,r5,8013b4c <__modsi3+0x44>
 8013b48:	1145c83a 	sub	r2,r2,r5
 8013b4c:	280ad07a 	srli	r5,r5,1
 8013b50:	183ffb1e 	bne	r3,zero,8013b40 <_gp+0xfffeeb38>
 8013b54:	38000126 	beq	r7,zero,8013b5c <__modsi3+0x54>
 8013b58:	0085c83a 	sub	r2,zero,r2
 8013b5c:	f800283a 	ret
 8013b60:	014bc83a 	sub	r5,zero,r5
 8013b64:	003fec06 	br	8013b18 <_gp+0xfffeeb10>
 8013b68:	0109c83a 	sub	r4,zero,r4
 8013b6c:	01c00044 	movi	r7,1
 8013b70:	003fe706 	br	8013b10 <_gp+0xfffeeb08>
 8013b74:	00c00044 	movi	r3,1
 8013b78:	003ff106 	br	8013b40 <_gp+0xfffeeb38>

08013b7c <__udivsi3>:
 8013b7c:	200d883a 	mov	r6,r4
 8013b80:	2900152e 	bgeu	r5,r4,8013bd8 <__udivsi3+0x5c>
 8013b84:	28001416 	blt	r5,zero,8013bd8 <__udivsi3+0x5c>
 8013b88:	00800804 	movi	r2,32
 8013b8c:	00c00044 	movi	r3,1
 8013b90:	00000206 	br	8013b9c <__udivsi3+0x20>
 8013b94:	10000e26 	beq	r2,zero,8013bd0 <__udivsi3+0x54>
 8013b98:	28000516 	blt	r5,zero,8013bb0 <__udivsi3+0x34>
 8013b9c:	294b883a 	add	r5,r5,r5
 8013ba0:	10bfffc4 	addi	r2,r2,-1
 8013ba4:	18c7883a 	add	r3,r3,r3
 8013ba8:	293ffa36 	bltu	r5,r4,8013b94 <_gp+0xfffeeb8c>
 8013bac:	18000826 	beq	r3,zero,8013bd0 <__udivsi3+0x54>
 8013bb0:	0005883a 	mov	r2,zero
 8013bb4:	31400236 	bltu	r6,r5,8013bc0 <__udivsi3+0x44>
 8013bb8:	314dc83a 	sub	r6,r6,r5
 8013bbc:	10c4b03a 	or	r2,r2,r3
 8013bc0:	1806d07a 	srli	r3,r3,1
 8013bc4:	280ad07a 	srli	r5,r5,1
 8013bc8:	183ffa1e 	bne	r3,zero,8013bb4 <_gp+0xfffeebac>
 8013bcc:	f800283a 	ret
 8013bd0:	0005883a 	mov	r2,zero
 8013bd4:	f800283a 	ret
 8013bd8:	00c00044 	movi	r3,1
 8013bdc:	003ff406 	br	8013bb0 <_gp+0xfffeeba8>

08013be0 <__umodsi3>:
 8013be0:	2005883a 	mov	r2,r4
 8013be4:	2900122e 	bgeu	r5,r4,8013c30 <__umodsi3+0x50>
 8013be8:	28001116 	blt	r5,zero,8013c30 <__umodsi3+0x50>
 8013bec:	01800804 	movi	r6,32
 8013bf0:	00c00044 	movi	r3,1
 8013bf4:	00000206 	br	8013c00 <__umodsi3+0x20>
 8013bf8:	30000c26 	beq	r6,zero,8013c2c <__umodsi3+0x4c>
 8013bfc:	28000516 	blt	r5,zero,8013c14 <__umodsi3+0x34>
 8013c00:	294b883a 	add	r5,r5,r5
 8013c04:	31bfffc4 	addi	r6,r6,-1
 8013c08:	18c7883a 	add	r3,r3,r3
 8013c0c:	293ffa36 	bltu	r5,r4,8013bf8 <_gp+0xfffeebf0>
 8013c10:	18000626 	beq	r3,zero,8013c2c <__umodsi3+0x4c>
 8013c14:	1806d07a 	srli	r3,r3,1
 8013c18:	11400136 	bltu	r2,r5,8013c20 <__umodsi3+0x40>
 8013c1c:	1145c83a 	sub	r2,r2,r5
 8013c20:	280ad07a 	srli	r5,r5,1
 8013c24:	183ffb1e 	bne	r3,zero,8013c14 <_gp+0xfffeec0c>
 8013c28:	f800283a 	ret
 8013c2c:	f800283a 	ret
 8013c30:	00c00044 	movi	r3,1
 8013c34:	003ff706 	br	8013c14 <_gp+0xfffeec0c>

08013c38 <__mulsi3>:
 8013c38:	0005883a 	mov	r2,zero
 8013c3c:	20000726 	beq	r4,zero,8013c5c <__mulsi3+0x24>
 8013c40:	20c0004c 	andi	r3,r4,1
 8013c44:	2008d07a 	srli	r4,r4,1
 8013c48:	18000126 	beq	r3,zero,8013c50 <__mulsi3+0x18>
 8013c4c:	1145883a 	add	r2,r2,r5
 8013c50:	294b883a 	add	r5,r5,r5
 8013c54:	203ffa1e 	bne	r4,zero,8013c40 <_gp+0xfffeec38>
 8013c58:	f800283a 	ret
 8013c5c:	f800283a 	ret

08013c60 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013c60:	defffe04 	addi	sp,sp,-8
 8013c64:	dfc00115 	stw	ra,4(sp)
 8013c68:	df000015 	stw	fp,0(sp)
 8013c6c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013c70:	d0a00a17 	ldw	r2,-32728(gp)
 8013c74:	10000326 	beq	r2,zero,8013c84 <alt_get_errno+0x24>
 8013c78:	d0a00a17 	ldw	r2,-32728(gp)
 8013c7c:	103ee83a 	callr	r2
 8013c80:	00000106 	br	8013c88 <alt_get_errno+0x28>
 8013c84:	d0a6e404 	addi	r2,gp,-25712
}
 8013c88:	e037883a 	mov	sp,fp
 8013c8c:	dfc00117 	ldw	ra,4(sp)
 8013c90:	df000017 	ldw	fp,0(sp)
 8013c94:	dec00204 	addi	sp,sp,8
 8013c98:	f800283a 	ret

08013c9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8013c9c:	defffb04 	addi	sp,sp,-20
 8013ca0:	dfc00415 	stw	ra,16(sp)
 8013ca4:	df000315 	stw	fp,12(sp)
 8013ca8:	df000304 	addi	fp,sp,12
 8013cac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8013cb0:	e0bfff17 	ldw	r2,-4(fp)
 8013cb4:	10000816 	blt	r2,zero,8013cd8 <close+0x3c>
 8013cb8:	01400304 	movi	r5,12
 8013cbc:	e13fff17 	ldw	r4,-4(fp)
 8013cc0:	8013c380 	call	8013c38 <__mulsi3>
 8013cc4:	1007883a 	mov	r3,r2
 8013cc8:	008200b4 	movhi	r2,2050
 8013ccc:	10af7504 	addi	r2,r2,-16940
 8013cd0:	1885883a 	add	r2,r3,r2
 8013cd4:	00000106 	br	8013cdc <close+0x40>
 8013cd8:	0005883a 	mov	r2,zero
 8013cdc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8013ce0:	e0bffd17 	ldw	r2,-12(fp)
 8013ce4:	10001926 	beq	r2,zero,8013d4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8013ce8:	e0bffd17 	ldw	r2,-12(fp)
 8013cec:	10800017 	ldw	r2,0(r2)
 8013cf0:	10800417 	ldw	r2,16(r2)
 8013cf4:	10000626 	beq	r2,zero,8013d10 <close+0x74>
 8013cf8:	e0bffd17 	ldw	r2,-12(fp)
 8013cfc:	10800017 	ldw	r2,0(r2)
 8013d00:	10800417 	ldw	r2,16(r2)
 8013d04:	e13ffd17 	ldw	r4,-12(fp)
 8013d08:	103ee83a 	callr	r2
 8013d0c:	00000106 	br	8013d14 <close+0x78>
 8013d10:	0005883a 	mov	r2,zero
 8013d14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8013d18:	e13fff17 	ldw	r4,-4(fp)
 8013d1c:	80148940 	call	8014894 <alt_release_fd>
    if (rval < 0)
 8013d20:	e0bffe17 	ldw	r2,-8(fp)
 8013d24:	1000070e 	bge	r2,zero,8013d44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 8013d28:	8013c600 	call	8013c60 <alt_get_errno>
 8013d2c:	1007883a 	mov	r3,r2
 8013d30:	e0bffe17 	ldw	r2,-8(fp)
 8013d34:	0085c83a 	sub	r2,zero,r2
 8013d38:	18800015 	stw	r2,0(r3)
      return -1;
 8013d3c:	00bfffc4 	movi	r2,-1
 8013d40:	00000706 	br	8013d60 <close+0xc4>
    }
    return 0;
 8013d44:	0005883a 	mov	r2,zero
 8013d48:	00000506 	br	8013d60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8013d4c:	8013c600 	call	8013c60 <alt_get_errno>
 8013d50:	1007883a 	mov	r3,r2
 8013d54:	00801444 	movi	r2,81
 8013d58:	18800015 	stw	r2,0(r3)
    return -1;
 8013d5c:	00bfffc4 	movi	r2,-1
  }
}
 8013d60:	e037883a 	mov	sp,fp
 8013d64:	dfc00117 	ldw	ra,4(sp)
 8013d68:	df000017 	ldw	fp,0(sp)
 8013d6c:	dec00204 	addi	sp,sp,8
 8013d70:	f800283a 	ret

08013d74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8013d74:	defffc04 	addi	sp,sp,-16
 8013d78:	df000315 	stw	fp,12(sp)
 8013d7c:	df000304 	addi	fp,sp,12
 8013d80:	e13ffd15 	stw	r4,-12(fp)
 8013d84:	e17ffe15 	stw	r5,-8(fp)
 8013d88:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8013d8c:	e0bfff17 	ldw	r2,-4(fp)
}
 8013d90:	e037883a 	mov	sp,fp
 8013d94:	df000017 	ldw	fp,0(sp)
 8013d98:	dec00104 	addi	sp,sp,4
 8013d9c:	f800283a 	ret

08013da0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8013da0:	defffd04 	addi	sp,sp,-12
 8013da4:	df000215 	stw	fp,8(sp)
 8013da8:	df000204 	addi	fp,sp,8
 8013dac:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8013db0:	0001883a 	nop
 8013db4:	e0bfff17 	ldw	r2,-4(fp)
 8013db8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8013dbc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8013dc0:	10000226 	beq	r2,zero,8013dcc <_exit+0x2c>
    ALT_SIM_FAIL();
 8013dc4:	002af070 	cmpltui	zero,zero,43969
 8013dc8:	00000106 	br	8013dd0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8013dcc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8013dd0:	003fff06 	br	8013dd0 <_gp+0xfffeedc8>

08013dd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013dd4:	defffe04 	addi	sp,sp,-8
 8013dd8:	dfc00115 	stw	ra,4(sp)
 8013ddc:	df000015 	stw	fp,0(sp)
 8013de0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013de4:	d0a00a17 	ldw	r2,-32728(gp)
 8013de8:	10000326 	beq	r2,zero,8013df8 <alt_get_errno+0x24>
 8013dec:	d0a00a17 	ldw	r2,-32728(gp)
 8013df0:	103ee83a 	callr	r2
 8013df4:	00000106 	br	8013dfc <alt_get_errno+0x28>
 8013df8:	d0a6e404 	addi	r2,gp,-25712
}
 8013dfc:	e037883a 	mov	sp,fp
 8013e00:	dfc00117 	ldw	ra,4(sp)
 8013e04:	df000017 	ldw	fp,0(sp)
 8013e08:	dec00204 	addi	sp,sp,8
 8013e0c:	f800283a 	ret

08013e10 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 8013e10:	defffb04 	addi	sp,sp,-20
 8013e14:	dfc00415 	stw	ra,16(sp)
 8013e18:	df000315 	stw	fp,12(sp)
 8013e1c:	df000304 	addi	fp,sp,12
 8013e20:	e13ffe15 	stw	r4,-8(fp)
 8013e24:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013e28:	e0bffe17 	ldw	r2,-8(fp)
 8013e2c:	10000816 	blt	r2,zero,8013e50 <fstat+0x40>
 8013e30:	01400304 	movi	r5,12
 8013e34:	e13ffe17 	ldw	r4,-8(fp)
 8013e38:	8013c380 	call	8013c38 <__mulsi3>
 8013e3c:	1007883a 	mov	r3,r2
 8013e40:	008200b4 	movhi	r2,2050
 8013e44:	10af7504 	addi	r2,r2,-16940
 8013e48:	1885883a 	add	r2,r3,r2
 8013e4c:	00000106 	br	8013e54 <fstat+0x44>
 8013e50:	0005883a 	mov	r2,zero
 8013e54:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 8013e58:	e0bffd17 	ldw	r2,-12(fp)
 8013e5c:	10001026 	beq	r2,zero,8013ea0 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 8013e60:	e0bffd17 	ldw	r2,-12(fp)
 8013e64:	10800017 	ldw	r2,0(r2)
 8013e68:	10800817 	ldw	r2,32(r2)
 8013e6c:	10000726 	beq	r2,zero,8013e8c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 8013e70:	e0bffd17 	ldw	r2,-12(fp)
 8013e74:	10800017 	ldw	r2,0(r2)
 8013e78:	10800817 	ldw	r2,32(r2)
 8013e7c:	e17fff17 	ldw	r5,-4(fp)
 8013e80:	e13ffd17 	ldw	r4,-12(fp)
 8013e84:	103ee83a 	callr	r2
 8013e88:	00000a06 	br	8013eb4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 8013e8c:	e0bfff17 	ldw	r2,-4(fp)
 8013e90:	00c80004 	movi	r3,8192
 8013e94:	10c00115 	stw	r3,4(r2)
      return 0;
 8013e98:	0005883a 	mov	r2,zero
 8013e9c:	00000506 	br	8013eb4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8013ea0:	8013dd40 	call	8013dd4 <alt_get_errno>
 8013ea4:	1007883a 	mov	r3,r2
 8013ea8:	00801444 	movi	r2,81
 8013eac:	18800015 	stw	r2,0(r3)
    return -1;
 8013eb0:	00bfffc4 	movi	r2,-1
  }
}
 8013eb4:	e037883a 	mov	sp,fp
 8013eb8:	dfc00117 	ldw	ra,4(sp)
 8013ebc:	df000017 	ldw	fp,0(sp)
 8013ec0:	dec00204 	addi	sp,sp,8
 8013ec4:	f800283a 	ret

08013ec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8013ec8:	defffe04 	addi	sp,sp,-8
 8013ecc:	dfc00115 	stw	ra,4(sp)
 8013ed0:	df000015 	stw	fp,0(sp)
 8013ed4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8013ed8:	d0a00a17 	ldw	r2,-32728(gp)
 8013edc:	10000326 	beq	r2,zero,8013eec <alt_get_errno+0x24>
 8013ee0:	d0a00a17 	ldw	r2,-32728(gp)
 8013ee4:	103ee83a 	callr	r2
 8013ee8:	00000106 	br	8013ef0 <alt_get_errno+0x28>
 8013eec:	d0a6e404 	addi	r2,gp,-25712
}
 8013ef0:	e037883a 	mov	sp,fp
 8013ef4:	dfc00117 	ldw	ra,4(sp)
 8013ef8:	df000017 	ldw	fp,0(sp)
 8013efc:	dec00204 	addi	sp,sp,8
 8013f00:	f800283a 	ret

08013f04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 8013f04:	deffed04 	addi	sp,sp,-76
 8013f08:	dfc01215 	stw	ra,72(sp)
 8013f0c:	df001115 	stw	fp,68(sp)
 8013f10:	df001104 	addi	fp,sp,68
 8013f14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8013f18:	e0bfff17 	ldw	r2,-4(fp)
 8013f1c:	10000816 	blt	r2,zero,8013f40 <isatty+0x3c>
 8013f20:	01400304 	movi	r5,12
 8013f24:	e13fff17 	ldw	r4,-4(fp)
 8013f28:	8013c380 	call	8013c38 <__mulsi3>
 8013f2c:	1007883a 	mov	r3,r2
 8013f30:	008200b4 	movhi	r2,2050
 8013f34:	10af7504 	addi	r2,r2,-16940
 8013f38:	1885883a 	add	r2,r3,r2
 8013f3c:	00000106 	br	8013f44 <isatty+0x40>
 8013f40:	0005883a 	mov	r2,zero
 8013f44:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 8013f48:	e0bfef17 	ldw	r2,-68(fp)
 8013f4c:	10000e26 	beq	r2,zero,8013f88 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 8013f50:	e0bfef17 	ldw	r2,-68(fp)
 8013f54:	10800017 	ldw	r2,0(r2)
 8013f58:	10800817 	ldw	r2,32(r2)
 8013f5c:	1000021e 	bne	r2,zero,8013f68 <isatty+0x64>
    {
      return 1;
 8013f60:	00800044 	movi	r2,1
 8013f64:	00000d06 	br	8013f9c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 8013f68:	e0bff004 	addi	r2,fp,-64
 8013f6c:	100b883a 	mov	r5,r2
 8013f70:	e13fff17 	ldw	r4,-4(fp)
 8013f74:	8013e100 	call	8013e10 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 8013f78:	e0bff117 	ldw	r2,-60(fp)
 8013f7c:	10880020 	cmpeqi	r2,r2,8192
 8013f80:	10803fcc 	andi	r2,r2,255
 8013f84:	00000506 	br	8013f9c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8013f88:	8013ec80 	call	8013ec8 <alt_get_errno>
 8013f8c:	1007883a 	mov	r3,r2
 8013f90:	00801444 	movi	r2,81
 8013f94:	18800015 	stw	r2,0(r3)
    return 0;
 8013f98:	0005883a 	mov	r2,zero
  }
}
 8013f9c:	e037883a 	mov	sp,fp
 8013fa0:	dfc00117 	ldw	ra,4(sp)
 8013fa4:	df000017 	ldw	fp,0(sp)
 8013fa8:	dec00204 	addi	sp,sp,8
 8013fac:	f800283a 	ret

08013fb0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8013fb0:	defffc04 	addi	sp,sp,-16
 8013fb4:	df000315 	stw	fp,12(sp)
 8013fb8:	df000304 	addi	fp,sp,12
 8013fbc:	e13ffd15 	stw	r4,-12(fp)
 8013fc0:	e17ffe15 	stw	r5,-8(fp)
 8013fc4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8013fc8:	e0fffe17 	ldw	r3,-8(fp)
 8013fcc:	e0bffd17 	ldw	r2,-12(fp)
 8013fd0:	18800c26 	beq	r3,r2,8014004 <alt_load_section+0x54>
  {
    while( to != end )
 8013fd4:	00000806 	br	8013ff8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8013fd8:	e0bffe17 	ldw	r2,-8(fp)
 8013fdc:	10c00104 	addi	r3,r2,4
 8013fe0:	e0fffe15 	stw	r3,-8(fp)
 8013fe4:	e0fffd17 	ldw	r3,-12(fp)
 8013fe8:	19000104 	addi	r4,r3,4
 8013fec:	e13ffd15 	stw	r4,-12(fp)
 8013ff0:	18c00017 	ldw	r3,0(r3)
 8013ff4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8013ff8:	e0fffe17 	ldw	r3,-8(fp)
 8013ffc:	e0bfff17 	ldw	r2,-4(fp)
 8014000:	18bff51e 	bne	r3,r2,8013fd8 <_gp+0xfffeefd0>
    {
      *to++ = *from++;
    }
  }
}
 8014004:	0001883a 	nop
 8014008:	e037883a 	mov	sp,fp
 801400c:	df000017 	ldw	fp,0(sp)
 8014010:	dec00104 	addi	sp,sp,4
 8014014:	f800283a 	ret

08014018 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8014018:	defffe04 	addi	sp,sp,-8
 801401c:	dfc00115 	stw	ra,4(sp)
 8014020:	df000015 	stw	fp,0(sp)
 8014024:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8014028:	018200b4 	movhi	r6,2050
 801402c:	31b42304 	addi	r6,r6,-12148
 8014030:	014200b4 	movhi	r5,2050
 8014034:	296d6004 	addi	r5,r5,-19072
 8014038:	010200b4 	movhi	r4,2050
 801403c:	21342304 	addi	r4,r4,-12148
 8014040:	8013fb00 	call	8013fb0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8014044:	01810034 	movhi	r6,1024
 8014048:	31808c04 	addi	r6,r6,560
 801404c:	01410034 	movhi	r5,1024
 8014050:	29400804 	addi	r5,r5,32
 8014054:	01010034 	movhi	r4,1024
 8014058:	21000804 	addi	r4,r4,32
 801405c:	8013fb00 	call	8013fb0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8014060:	018200b4 	movhi	r6,2050
 8014064:	31ad6004 	addi	r6,r6,-19072
 8014068:	014200b4 	movhi	r5,2050
 801406c:	296bc404 	addi	r5,r5,-20720
 8014070:	010200b4 	movhi	r4,2050
 8014074:	212bc404 	addi	r4,r4,-20720
 8014078:	8013fb00 	call	8013fb0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 801407c:	8019f880 	call	8019f88 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8014080:	801a3640 	call	801a364 <alt_icache_flush_all>
}
 8014084:	0001883a 	nop
 8014088:	e037883a 	mov	sp,fp
 801408c:	dfc00117 	ldw	ra,4(sp)
 8014090:	df000017 	ldw	fp,0(sp)
 8014094:	dec00204 	addi	sp,sp,8
 8014098:	f800283a 	ret

0801409c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801409c:	defffe04 	addi	sp,sp,-8
 80140a0:	dfc00115 	stw	ra,4(sp)
 80140a4:	df000015 	stw	fp,0(sp)
 80140a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80140ac:	d0a00a17 	ldw	r2,-32728(gp)
 80140b0:	10000326 	beq	r2,zero,80140c0 <alt_get_errno+0x24>
 80140b4:	d0a00a17 	ldw	r2,-32728(gp)
 80140b8:	103ee83a 	callr	r2
 80140bc:	00000106 	br	80140c4 <alt_get_errno+0x28>
 80140c0:	d0a6e404 	addi	r2,gp,-25712
}
 80140c4:	e037883a 	mov	sp,fp
 80140c8:	dfc00117 	ldw	ra,4(sp)
 80140cc:	df000017 	ldw	fp,0(sp)
 80140d0:	dec00204 	addi	sp,sp,8
 80140d4:	f800283a 	ret

080140d8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 80140d8:	defff904 	addi	sp,sp,-28
 80140dc:	dfc00615 	stw	ra,24(sp)
 80140e0:	df000515 	stw	fp,20(sp)
 80140e4:	df000504 	addi	fp,sp,20
 80140e8:	e13ffd15 	stw	r4,-12(fp)
 80140ec:	e17ffe15 	stw	r5,-8(fp)
 80140f0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 80140f4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80140f8:	e0bffd17 	ldw	r2,-12(fp)
 80140fc:	10000816 	blt	r2,zero,8014120 <lseek+0x48>
 8014100:	01400304 	movi	r5,12
 8014104:	e13ffd17 	ldw	r4,-12(fp)
 8014108:	8013c380 	call	8013c38 <__mulsi3>
 801410c:	1007883a 	mov	r3,r2
 8014110:	008200b4 	movhi	r2,2050
 8014114:	10af7504 	addi	r2,r2,-16940
 8014118:	1885883a 	add	r2,r3,r2
 801411c:	00000106 	br	8014124 <lseek+0x4c>
 8014120:	0005883a 	mov	r2,zero
 8014124:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 8014128:	e0bffc17 	ldw	r2,-16(fp)
 801412c:	10001026 	beq	r2,zero,8014170 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 8014130:	e0bffc17 	ldw	r2,-16(fp)
 8014134:	10800017 	ldw	r2,0(r2)
 8014138:	10800717 	ldw	r2,28(r2)
 801413c:	10000926 	beq	r2,zero,8014164 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 8014140:	e0bffc17 	ldw	r2,-16(fp)
 8014144:	10800017 	ldw	r2,0(r2)
 8014148:	10800717 	ldw	r2,28(r2)
 801414c:	e1bfff17 	ldw	r6,-4(fp)
 8014150:	e17ffe17 	ldw	r5,-8(fp)
 8014154:	e13ffc17 	ldw	r4,-16(fp)
 8014158:	103ee83a 	callr	r2
 801415c:	e0bffb15 	stw	r2,-20(fp)
 8014160:	00000506 	br	8014178 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 8014164:	00bfde84 	movi	r2,-134
 8014168:	e0bffb15 	stw	r2,-20(fp)
 801416c:	00000206 	br	8014178 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 8014170:	00bfebc4 	movi	r2,-81
 8014174:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 8014178:	e0bffb17 	ldw	r2,-20(fp)
 801417c:	1000070e 	bge	r2,zero,801419c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 8014180:	801409c0 	call	801409c <alt_get_errno>
 8014184:	1007883a 	mov	r3,r2
 8014188:	e0bffb17 	ldw	r2,-20(fp)
 801418c:	0085c83a 	sub	r2,zero,r2
 8014190:	18800015 	stw	r2,0(r3)
    rc = -1;
 8014194:	00bfffc4 	movi	r2,-1
 8014198:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801419c:	e0bffb17 	ldw	r2,-20(fp)
}
 80141a0:	e037883a 	mov	sp,fp
 80141a4:	dfc00117 	ldw	ra,4(sp)
 80141a8:	df000017 	ldw	fp,0(sp)
 80141ac:	dec00204 	addi	sp,sp,8
 80141b0:	f800283a 	ret

080141b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 80141b4:	defffd04 	addi	sp,sp,-12
 80141b8:	dfc00215 	stw	ra,8(sp)
 80141bc:	df000115 	stw	fp,4(sp)
 80141c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 80141c4:	0009883a 	mov	r4,zero
 80141c8:	8014b380 	call	8014b38 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 80141cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 80141d0:	8014b700 	call	8014b70 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 80141d4:	018200b4 	movhi	r6,2050
 80141d8:	31ad4c04 	addi	r6,r6,-19152
 80141dc:	014200b4 	movhi	r5,2050
 80141e0:	296d4c04 	addi	r5,r5,-19152
 80141e4:	010200b4 	movhi	r4,2050
 80141e8:	212d4c04 	addi	r4,r4,-19152
 80141ec:	801a7080 	call	801a708 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 80141f0:	d0a6e817 	ldw	r2,-25696(gp)
 80141f4:	d0e6e917 	ldw	r3,-25692(gp)
 80141f8:	d126ea17 	ldw	r4,-25688(gp)
 80141fc:	200d883a 	mov	r6,r4
 8014200:	180b883a 	mov	r5,r3
 8014204:	1009883a 	mov	r4,r2
 8014208:	801035c0 	call	801035c <main>
 801420c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8014210:	01000044 	movi	r4,1
 8014214:	8013c9c0 	call	8013c9c <close>
  exit (result);
 8014218:	e13fff17 	ldw	r4,-4(fp)
 801421c:	80105080 	call	8010508 <exit>

08014220 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 8014220:	defffe04 	addi	sp,sp,-8
 8014224:	df000115 	stw	fp,4(sp)
 8014228:	df000104 	addi	fp,sp,4
 801422c:	e13fff15 	stw	r4,-4(fp)
}
 8014230:	0001883a 	nop
 8014234:	e037883a 	mov	sp,fp
 8014238:	df000017 	ldw	fp,0(sp)
 801423c:	dec00104 	addi	sp,sp,4
 8014240:	f800283a 	ret

08014244 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 8014244:	defffe04 	addi	sp,sp,-8
 8014248:	df000115 	stw	fp,4(sp)
 801424c:	df000104 	addi	fp,sp,4
 8014250:	e13fff15 	stw	r4,-4(fp)
}
 8014254:	0001883a 	nop
 8014258:	e037883a 	mov	sp,fp
 801425c:	df000017 	ldw	fp,0(sp)
 8014260:	dec00104 	addi	sp,sp,4
 8014264:	f800283a 	ret

08014268 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014268:	defffe04 	addi	sp,sp,-8
 801426c:	dfc00115 	stw	ra,4(sp)
 8014270:	df000015 	stw	fp,0(sp)
 8014274:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014278:	d0a00a17 	ldw	r2,-32728(gp)
 801427c:	10000326 	beq	r2,zero,801428c <alt_get_errno+0x24>
 8014280:	d0a00a17 	ldw	r2,-32728(gp)
 8014284:	103ee83a 	callr	r2
 8014288:	00000106 	br	8014290 <alt_get_errno+0x28>
 801428c:	d0a6e404 	addi	r2,gp,-25712
}
 8014290:	e037883a 	mov	sp,fp
 8014294:	dfc00117 	ldw	ra,4(sp)
 8014298:	df000017 	ldw	fp,0(sp)
 801429c:	dec00204 	addi	sp,sp,8
 80142a0:	f800283a 	ret

080142a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80142a4:	defffb04 	addi	sp,sp,-20
 80142a8:	dfc00415 	stw	ra,16(sp)
 80142ac:	df000315 	stw	fp,12(sp)
 80142b0:	dc000215 	stw	r16,8(sp)
 80142b4:	df000304 	addi	fp,sp,12
 80142b8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80142bc:	e0bffe17 	ldw	r2,-8(fp)
 80142c0:	10800217 	ldw	r2,8(r2)
 80142c4:	10d00034 	orhi	r3,r2,16384
 80142c8:	e0bffe17 	ldw	r2,-8(fp)
 80142cc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80142d0:	e03ffd15 	stw	zero,-12(fp)
 80142d4:	00002306 	br	8014364 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80142d8:	040200b4 	movhi	r16,2050
 80142dc:	842f7504 	addi	r16,r16,-16940
 80142e0:	e0bffd17 	ldw	r2,-12(fp)
 80142e4:	01400304 	movi	r5,12
 80142e8:	1009883a 	mov	r4,r2
 80142ec:	8013c380 	call	8013c38 <__mulsi3>
 80142f0:	8085883a 	add	r2,r16,r2
 80142f4:	10c00017 	ldw	r3,0(r2)
 80142f8:	e0bffe17 	ldw	r2,-8(fp)
 80142fc:	10800017 	ldw	r2,0(r2)
 8014300:	1880151e 	bne	r3,r2,8014358 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014304:	040200b4 	movhi	r16,2050
 8014308:	842f7504 	addi	r16,r16,-16940
 801430c:	e0bffd17 	ldw	r2,-12(fp)
 8014310:	01400304 	movi	r5,12
 8014314:	1009883a 	mov	r4,r2
 8014318:	8013c380 	call	8013c38 <__mulsi3>
 801431c:	8085883a 	add	r2,r16,r2
 8014320:	10800204 	addi	r2,r2,8
 8014324:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8014328:	10000b0e 	bge	r2,zero,8014358 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801432c:	01400304 	movi	r5,12
 8014330:	e13ffd17 	ldw	r4,-12(fp)
 8014334:	8013c380 	call	8013c38 <__mulsi3>
 8014338:	1007883a 	mov	r3,r2
 801433c:	008200b4 	movhi	r2,2050
 8014340:	10af7504 	addi	r2,r2,-16940
 8014344:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8014348:	e0bffe17 	ldw	r2,-8(fp)
 801434c:	18800226 	beq	r3,r2,8014358 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8014350:	00bffcc4 	movi	r2,-13
 8014354:	00000806 	br	8014378 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8014358:	e0bffd17 	ldw	r2,-12(fp)
 801435c:	10800044 	addi	r2,r2,1
 8014360:	e0bffd15 	stw	r2,-12(fp)
 8014364:	d0a00917 	ldw	r2,-32732(gp)
 8014368:	1007883a 	mov	r3,r2
 801436c:	e0bffd17 	ldw	r2,-12(fp)
 8014370:	18bfd92e 	bgeu	r3,r2,80142d8 <_gp+0xfffef2d0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8014374:	0005883a 	mov	r2,zero
}
 8014378:	e6ffff04 	addi	sp,fp,-4
 801437c:	dfc00217 	ldw	ra,8(sp)
 8014380:	df000117 	ldw	fp,4(sp)
 8014384:	dc000017 	ldw	r16,0(sp)
 8014388:	dec00304 	addi	sp,sp,12
 801438c:	f800283a 	ret

08014390 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8014390:	defff604 	addi	sp,sp,-40
 8014394:	dfc00915 	stw	ra,36(sp)
 8014398:	df000815 	stw	fp,32(sp)
 801439c:	df000804 	addi	fp,sp,32
 80143a0:	e13ffd15 	stw	r4,-12(fp)
 80143a4:	e17ffe15 	stw	r5,-8(fp)
 80143a8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80143ac:	00bfffc4 	movi	r2,-1
 80143b0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80143b4:	00bffb44 	movi	r2,-19
 80143b8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80143bc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80143c0:	d1600704 	addi	r5,gp,-32740
 80143c4:	e13ffd17 	ldw	r4,-12(fp)
 80143c8:	801a0880 	call	801a088 <alt_find_dev>
 80143cc:	e0bff815 	stw	r2,-32(fp)
 80143d0:	e0bff817 	ldw	r2,-32(fp)
 80143d4:	1000051e 	bne	r2,zero,80143ec <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80143d8:	e13ffd17 	ldw	r4,-12(fp)
 80143dc:	801a1180 	call	801a118 <alt_find_file>
 80143e0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 80143e4:	00800044 	movi	r2,1
 80143e8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80143ec:	e0bff817 	ldw	r2,-32(fp)
 80143f0:	10002b26 	beq	r2,zero,80144a0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80143f4:	e13ff817 	ldw	r4,-32(fp)
 80143f8:	801a2a00 	call	801a2a0 <alt_get_fd>
 80143fc:	e0bff915 	stw	r2,-28(fp)
 8014400:	e0bff917 	ldw	r2,-28(fp)
 8014404:	1000030e 	bge	r2,zero,8014414 <open+0x84>
    {
      status = index;
 8014408:	e0bff917 	ldw	r2,-28(fp)
 801440c:	e0bffa15 	stw	r2,-24(fp)
 8014410:	00002506 	br	80144a8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 8014414:	01400304 	movi	r5,12
 8014418:	e13ff917 	ldw	r4,-28(fp)
 801441c:	8013c380 	call	8013c38 <__mulsi3>
 8014420:	1007883a 	mov	r3,r2
 8014424:	008200b4 	movhi	r2,2050
 8014428:	10af7504 	addi	r2,r2,-16940
 801442c:	1885883a 	add	r2,r3,r2
 8014430:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8014434:	e0fffe17 	ldw	r3,-8(fp)
 8014438:	00900034 	movhi	r2,16384
 801443c:	10bfffc4 	addi	r2,r2,-1
 8014440:	1886703a 	and	r3,r3,r2
 8014444:	e0bffc17 	ldw	r2,-16(fp)
 8014448:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801444c:	e0bffb17 	ldw	r2,-20(fp)
 8014450:	1000051e 	bne	r2,zero,8014468 <open+0xd8>
 8014454:	e13ffc17 	ldw	r4,-16(fp)
 8014458:	80142a40 	call	80142a4 <alt_file_locked>
 801445c:	e0bffa15 	stw	r2,-24(fp)
 8014460:	e0bffa17 	ldw	r2,-24(fp)
 8014464:	10001016 	blt	r2,zero,80144a8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8014468:	e0bff817 	ldw	r2,-32(fp)
 801446c:	10800317 	ldw	r2,12(r2)
 8014470:	10000826 	beq	r2,zero,8014494 <open+0x104>
 8014474:	e0bff817 	ldw	r2,-32(fp)
 8014478:	10800317 	ldw	r2,12(r2)
 801447c:	e1ffff17 	ldw	r7,-4(fp)
 8014480:	e1bffe17 	ldw	r6,-8(fp)
 8014484:	e17ffd17 	ldw	r5,-12(fp)
 8014488:	e13ffc17 	ldw	r4,-16(fp)
 801448c:	103ee83a 	callr	r2
 8014490:	00000106 	br	8014498 <open+0x108>
 8014494:	0005883a 	mov	r2,zero
 8014498:	e0bffa15 	stw	r2,-24(fp)
 801449c:	00000206 	br	80144a8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80144a0:	00bffb44 	movi	r2,-19
 80144a4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80144a8:	e0bffa17 	ldw	r2,-24(fp)
 80144ac:	1000090e 	bge	r2,zero,80144d4 <open+0x144>
  {
    alt_release_fd (index);  
 80144b0:	e13ff917 	ldw	r4,-28(fp)
 80144b4:	80148940 	call	8014894 <alt_release_fd>
    ALT_ERRNO = -status;
 80144b8:	80142680 	call	8014268 <alt_get_errno>
 80144bc:	1007883a 	mov	r3,r2
 80144c0:	e0bffa17 	ldw	r2,-24(fp)
 80144c4:	0085c83a 	sub	r2,zero,r2
 80144c8:	18800015 	stw	r2,0(r3)
    return -1;
 80144cc:	00bfffc4 	movi	r2,-1
 80144d0:	00000106 	br	80144d8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 80144d4:	e0bff917 	ldw	r2,-28(fp)
}
 80144d8:	e037883a 	mov	sp,fp
 80144dc:	dfc00117 	ldw	ra,4(sp)
 80144e0:	df000017 	ldw	fp,0(sp)
 80144e4:	dec00204 	addi	sp,sp,8
 80144e8:	f800283a 	ret

080144ec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
 80144ec:	defff204 	addi	sp,sp,-56
 80144f0:	dfc00a15 	stw	ra,40(sp)
 80144f4:	df000915 	stw	fp,36(sp)
 80144f8:	df000904 	addi	fp,sp,36
 80144fc:	e13fff15 	stw	r4,-4(fp)
 8014500:	e1400215 	stw	r5,8(fp)
 8014504:	e1800315 	stw	r6,12(fp)
 8014508:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
 801450c:	e0800204 	addi	r2,fp,8
 8014510:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
 8014514:	e0bfff17 	ldw	r2,-4(fp)
 8014518:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
 801451c:	00006f06 	br	80146dc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
 8014520:	e0bff807 	ldb	r2,-32(fp)
 8014524:	10800960 	cmpeqi	r2,r2,37
 8014528:	1000041e 	bne	r2,zero,801453c <alt_printf+0x50>
        {
            alt_putchar(c);
 801452c:	e0bff807 	ldb	r2,-32(fp)
 8014530:	1009883a 	mov	r4,r2
 8014534:	80147180 	call	8014718 <alt_putchar>
 8014538:	00006806 	br	80146dc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
 801453c:	e0bff717 	ldw	r2,-36(fp)
 8014540:	10c00044 	addi	r3,r2,1
 8014544:	e0fff715 	stw	r3,-36(fp)
 8014548:	10800003 	ldbu	r2,0(r2)
 801454c:	e0bff805 	stb	r2,-32(fp)
 8014550:	e0bff807 	ldb	r2,-32(fp)
 8014554:	10006926 	beq	r2,zero,80146fc <alt_printf+0x210>
            {
                if (c == '%')
 8014558:	e0bff807 	ldb	r2,-32(fp)
 801455c:	10800958 	cmpnei	r2,r2,37
 8014560:	1000041e 	bne	r2,zero,8014574 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
 8014564:	e0bff807 	ldb	r2,-32(fp)
 8014568:	1009883a 	mov	r4,r2
 801456c:	80147180 	call	8014718 <alt_putchar>
 8014570:	00005a06 	br	80146dc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
 8014574:	e0bff807 	ldb	r2,-32(fp)
 8014578:	108018d8 	cmpnei	r2,r2,99
 801457c:	1000081e 	bne	r2,zero,80145a0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
 8014580:	e0bffe17 	ldw	r2,-8(fp)
 8014584:	10c00104 	addi	r3,r2,4
 8014588:	e0fffe15 	stw	r3,-8(fp)
 801458c:	10800017 	ldw	r2,0(r2)
 8014590:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
 8014594:	e13ffd17 	ldw	r4,-12(fp)
 8014598:	80147180 	call	8014718 <alt_putchar>
 801459c:	00004f06 	br	80146dc <alt_printf+0x1f0>
                }
                else if (c == 'x')
 80145a0:	e0bff807 	ldb	r2,-32(fp)
 80145a4:	10801e18 	cmpnei	r2,r2,120
 80145a8:	1000341e 	bne	r2,zero,801467c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
 80145ac:	e0bffe17 	ldw	r2,-8(fp)
 80145b0:	10c00104 	addi	r3,r2,4
 80145b4:	e0fffe15 	stw	r3,-8(fp)
 80145b8:	10800017 	ldw	r2,0(r2)
 80145bc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
 80145c0:	e0bffb17 	ldw	r2,-20(fp)
 80145c4:	1000031e 	bne	r2,zero,80145d4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
 80145c8:	01000c04 	movi	r4,48
 80145cc:	80147180 	call	8014718 <alt_putchar>
                        continue;
 80145d0:	00004206 	br	80146dc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
 80145d4:	00800704 	movi	r2,28
 80145d8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
 80145dc:	00000306 	br	80145ec <alt_printf+0x100>
                        digit_shift -= 4;
 80145e0:	e0bff917 	ldw	r2,-28(fp)
 80145e4:	10bfff04 	addi	r2,r2,-4
 80145e8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
 80145ec:	00c003c4 	movi	r3,15
 80145f0:	e0bff917 	ldw	r2,-28(fp)
 80145f4:	1884983a 	sll	r2,r3,r2
 80145f8:	1007883a 	mov	r3,r2
 80145fc:	e0bffb17 	ldw	r2,-20(fp)
 8014600:	1884703a 	and	r2,r3,r2
 8014604:	103ff626 	beq	r2,zero,80145e0 <_gp+0xfffef5d8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8014608:	00001906 	br	8014670 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
 801460c:	00c003c4 	movi	r3,15
 8014610:	e0bff917 	ldw	r2,-28(fp)
 8014614:	1884983a 	sll	r2,r3,r2
 8014618:	1007883a 	mov	r3,r2
 801461c:	e0bffb17 	ldw	r2,-20(fp)
 8014620:	1886703a 	and	r3,r3,r2
 8014624:	e0bff917 	ldw	r2,-28(fp)
 8014628:	1884d83a 	srl	r2,r3,r2
 801462c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
 8014630:	e0bffc17 	ldw	r2,-16(fp)
 8014634:	108002a8 	cmpgeui	r2,r2,10
 8014638:	1000041e 	bne	r2,zero,801464c <alt_printf+0x160>
                            c = '0' + digit;
 801463c:	e0bffc17 	ldw	r2,-16(fp)
 8014640:	10800c04 	addi	r2,r2,48
 8014644:	e0bff805 	stb	r2,-32(fp)
 8014648:	00000306 	br	8014658 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
 801464c:	e0bffc17 	ldw	r2,-16(fp)
 8014650:	108015c4 	addi	r2,r2,87
 8014654:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
 8014658:	e0bff807 	ldb	r2,-32(fp)
 801465c:	1009883a 	mov	r4,r2
 8014660:	80147180 	call	8014718 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
 8014664:	e0bff917 	ldw	r2,-28(fp)
 8014668:	10bfff04 	addi	r2,r2,-4
 801466c:	e0bff915 	stw	r2,-28(fp)
 8014670:	e0bff917 	ldw	r2,-28(fp)
 8014674:	103fe50e 	bge	r2,zero,801460c <_gp+0xfffef604>
 8014678:	00001806 	br	80146dc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
 801467c:	e0bff807 	ldb	r2,-32(fp)
 8014680:	10801cd8 	cmpnei	r2,r2,115
 8014684:	1000151e 	bne	r2,zero,80146dc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
 8014688:	e0bffe17 	ldw	r2,-8(fp)
 801468c:	10c00104 	addi	r3,r2,4
 8014690:	e0fffe15 	stw	r3,-8(fp)
 8014694:	10800017 	ldw	r2,0(r2)
 8014698:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
 801469c:	00000906 	br	80146c4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
 80146a0:	e0bffa17 	ldw	r2,-24(fp)
 80146a4:	10c00044 	addi	r3,r2,1
 80146a8:	e0fffa15 	stw	r3,-24(fp)
 80146ac:	10800003 	ldbu	r2,0(r2)
 80146b0:	10803fcc 	andi	r2,r2,255
 80146b4:	1080201c 	xori	r2,r2,128
 80146b8:	10bfe004 	addi	r2,r2,-128
 80146bc:	1009883a 	mov	r4,r2
 80146c0:	80147180 	call	8014718 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
 80146c4:	e0bffa17 	ldw	r2,-24(fp)
 80146c8:	10800003 	ldbu	r2,0(r2)
 80146cc:	10803fcc 	andi	r2,r2,255
 80146d0:	1080201c 	xori	r2,r2,128
 80146d4:	10bfe004 	addi	r2,r2,-128
 80146d8:	103ff11e 	bne	r2,zero,80146a0 <_gp+0xfffef698>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
 80146dc:	e0bff717 	ldw	r2,-36(fp)
 80146e0:	10c00044 	addi	r3,r2,1
 80146e4:	e0fff715 	stw	r3,-36(fp)
 80146e8:	10800003 	ldbu	r2,0(r2)
 80146ec:	e0bff805 	stb	r2,-32(fp)
 80146f0:	e0bff807 	ldb	r2,-32(fp)
 80146f4:	103f8a1e 	bne	r2,zero,8014520 <_gp+0xfffef518>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 80146f8:	00000106 	br	8014700 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
 80146fc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
 8014700:	0001883a 	nop
 8014704:	e037883a 	mov	sp,fp
 8014708:	dfc00117 	ldw	ra,4(sp)
 801470c:	df000017 	ldw	fp,0(sp)
 8014710:	dec00504 	addi	sp,sp,20
 8014714:	f800283a 	ret

08014718 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
 8014718:	defffd04 	addi	sp,sp,-12
 801471c:	dfc00215 	stw	ra,8(sp)
 8014720:	df000115 	stw	fp,4(sp)
 8014724:	df000104 	addi	fp,sp,4
 8014728:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
 801472c:	d0a00117 	ldw	r2,-32764(gp)
 8014730:	10800217 	ldw	r2,8(r2)
 8014734:	100b883a 	mov	r5,r2
 8014738:	e13fff17 	ldw	r4,-4(fp)
 801473c:	801ab040 	call	801ab04 <putc>
#endif
#endif
}
 8014740:	e037883a 	mov	sp,fp
 8014744:	dfc00117 	ldw	ra,4(sp)
 8014748:	df000017 	ldw	fp,0(sp)
 801474c:	dec00204 	addi	sp,sp,8
 8014750:	f800283a 	ret

08014754 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8014754:	defffe04 	addi	sp,sp,-8
 8014758:	dfc00115 	stw	ra,4(sp)
 801475c:	df000015 	stw	fp,0(sp)
 8014760:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8014764:	d0a00a17 	ldw	r2,-32728(gp)
 8014768:	10000326 	beq	r2,zero,8014778 <alt_get_errno+0x24>
 801476c:	d0a00a17 	ldw	r2,-32728(gp)
 8014770:	103ee83a 	callr	r2
 8014774:	00000106 	br	801477c <alt_get_errno+0x28>
 8014778:	d0a6e404 	addi	r2,gp,-25712
}
 801477c:	e037883a 	mov	sp,fp
 8014780:	dfc00117 	ldw	ra,4(sp)
 8014784:	df000017 	ldw	fp,0(sp)
 8014788:	dec00204 	addi	sp,sp,8
 801478c:	f800283a 	ret

08014790 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 8014790:	defff904 	addi	sp,sp,-28
 8014794:	dfc00615 	stw	ra,24(sp)
 8014798:	df000515 	stw	fp,20(sp)
 801479c:	df000504 	addi	fp,sp,20
 80147a0:	e13ffd15 	stw	r4,-12(fp)
 80147a4:	e17ffe15 	stw	r5,-8(fp)
 80147a8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 80147ac:	e0bffd17 	ldw	r2,-12(fp)
 80147b0:	10000816 	blt	r2,zero,80147d4 <read+0x44>
 80147b4:	01400304 	movi	r5,12
 80147b8:	e13ffd17 	ldw	r4,-12(fp)
 80147bc:	8013c380 	call	8013c38 <__mulsi3>
 80147c0:	1007883a 	mov	r3,r2
 80147c4:	008200b4 	movhi	r2,2050
 80147c8:	10af7504 	addi	r2,r2,-16940
 80147cc:	1885883a 	add	r2,r3,r2
 80147d0:	00000106 	br	80147d8 <read+0x48>
 80147d4:	0005883a 	mov	r2,zero
 80147d8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 80147dc:	e0bffb17 	ldw	r2,-20(fp)
 80147e0:	10002226 	beq	r2,zero,801486c <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 80147e4:	e0bffb17 	ldw	r2,-20(fp)
 80147e8:	10800217 	ldw	r2,8(r2)
 80147ec:	108000cc 	andi	r2,r2,3
 80147f0:	10800060 	cmpeqi	r2,r2,1
 80147f4:	1000181e 	bne	r2,zero,8014858 <read+0xc8>
        (fd->dev->read))
 80147f8:	e0bffb17 	ldw	r2,-20(fp)
 80147fc:	10800017 	ldw	r2,0(r2)
 8014800:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 8014804:	10001426 	beq	r2,zero,8014858 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 8014808:	e0bffb17 	ldw	r2,-20(fp)
 801480c:	10800017 	ldw	r2,0(r2)
 8014810:	10800517 	ldw	r2,20(r2)
 8014814:	e0ffff17 	ldw	r3,-4(fp)
 8014818:	180d883a 	mov	r6,r3
 801481c:	e17ffe17 	ldw	r5,-8(fp)
 8014820:	e13ffb17 	ldw	r4,-20(fp)
 8014824:	103ee83a 	callr	r2
 8014828:	e0bffc15 	stw	r2,-16(fp)
 801482c:	e0bffc17 	ldw	r2,-16(fp)
 8014830:	1000070e 	bge	r2,zero,8014850 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 8014834:	80147540 	call	8014754 <alt_get_errno>
 8014838:	1007883a 	mov	r3,r2
 801483c:	e0bffc17 	ldw	r2,-16(fp)
 8014840:	0085c83a 	sub	r2,zero,r2
 8014844:	18800015 	stw	r2,0(r3)
          return -1;
 8014848:	00bfffc4 	movi	r2,-1
 801484c:	00000c06 	br	8014880 <read+0xf0>
        }
        return rval;
 8014850:	e0bffc17 	ldw	r2,-16(fp)
 8014854:	00000a06 	br	8014880 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 8014858:	80147540 	call	8014754 <alt_get_errno>
 801485c:	1007883a 	mov	r3,r2
 8014860:	00800344 	movi	r2,13
 8014864:	18800015 	stw	r2,0(r3)
 8014868:	00000406 	br	801487c <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801486c:	80147540 	call	8014754 <alt_get_errno>
 8014870:	1007883a 	mov	r3,r2
 8014874:	00801444 	movi	r2,81
 8014878:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801487c:	00bfffc4 	movi	r2,-1
}
 8014880:	e037883a 	mov	sp,fp
 8014884:	dfc00117 	ldw	ra,4(sp)
 8014888:	df000017 	ldw	fp,0(sp)
 801488c:	dec00204 	addi	sp,sp,8
 8014890:	f800283a 	ret

08014894 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8014894:	defffc04 	addi	sp,sp,-16
 8014898:	dfc00315 	stw	ra,12(sp)
 801489c:	df000215 	stw	fp,8(sp)
 80148a0:	dc000115 	stw	r16,4(sp)
 80148a4:	df000204 	addi	fp,sp,8
 80148a8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 80148ac:	e0bffe17 	ldw	r2,-8(fp)
 80148b0:	108000d0 	cmplti	r2,r2,3
 80148b4:	1000111e 	bne	r2,zero,80148fc <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 80148b8:	040200b4 	movhi	r16,2050
 80148bc:	842f7504 	addi	r16,r16,-16940
 80148c0:	e0bffe17 	ldw	r2,-8(fp)
 80148c4:	01400304 	movi	r5,12
 80148c8:	1009883a 	mov	r4,r2
 80148cc:	8013c380 	call	8013c38 <__mulsi3>
 80148d0:	8085883a 	add	r2,r16,r2
 80148d4:	10800204 	addi	r2,r2,8
 80148d8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 80148dc:	040200b4 	movhi	r16,2050
 80148e0:	842f7504 	addi	r16,r16,-16940
 80148e4:	e0bffe17 	ldw	r2,-8(fp)
 80148e8:	01400304 	movi	r5,12
 80148ec:	1009883a 	mov	r4,r2
 80148f0:	8013c380 	call	8013c38 <__mulsi3>
 80148f4:	8085883a 	add	r2,r16,r2
 80148f8:	10000015 	stw	zero,0(r2)
  }
}
 80148fc:	0001883a 	nop
 8014900:	e6ffff04 	addi	sp,fp,-4
 8014904:	dfc00217 	ldw	ra,8(sp)
 8014908:	df000117 	ldw	fp,4(sp)
 801490c:	dc000017 	ldw	r16,0(sp)
 8014910:	dec00304 	addi	sp,sp,12
 8014914:	f800283a 	ret

08014918 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 8014918:	defff904 	addi	sp,sp,-28
 801491c:	df000615 	stw	fp,24(sp)
 8014920:	df000604 	addi	fp,sp,24
 8014924:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014928:	0005303a 	rdctl	r2,status
 801492c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014930:	e0fffe17 	ldw	r3,-8(fp)
 8014934:	00bfff84 	movi	r2,-2
 8014938:	1884703a 	and	r2,r3,r2
 801493c:	1001703a 	wrctl	status,r2
  
  return context;
 8014940:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 8014944:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 8014948:	d0a00b17 	ldw	r2,-32724(gp)
 801494c:	10c000c4 	addi	r3,r2,3
 8014950:	00bfff04 	movi	r2,-4
 8014954:	1884703a 	and	r2,r3,r2
 8014958:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 801495c:	d0e00b17 	ldw	r3,-32724(gp)
 8014960:	e0bfff17 	ldw	r2,-4(fp)
 8014964:	1887883a 	add	r3,r3,r2
 8014968:	008200b4 	movhi	r2,2050
 801496c:	10be8004 	addi	r2,r2,-1536
 8014970:	10c0062e 	bgeu	r2,r3,801498c <sbrk+0x74>
 8014974:	e0bffb17 	ldw	r2,-20(fp)
 8014978:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801497c:	e0bffa17 	ldw	r2,-24(fp)
 8014980:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 8014984:	00bfffc4 	movi	r2,-1
 8014988:	00000b06 	br	80149b8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 801498c:	d0a00b17 	ldw	r2,-32724(gp)
 8014990:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 8014994:	d0e00b17 	ldw	r3,-32724(gp)
 8014998:	e0bfff17 	ldw	r2,-4(fp)
 801499c:	1885883a 	add	r2,r3,r2
 80149a0:	d0a00b15 	stw	r2,-32724(gp)
 80149a4:	e0bffb17 	ldw	r2,-20(fp)
 80149a8:	e0bffc15 	stw	r2,-16(fp)
 80149ac:	e0bffc17 	ldw	r2,-16(fp)
 80149b0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 80149b4:	e0bffd17 	ldw	r2,-12(fp)
} 
 80149b8:	e037883a 	mov	sp,fp
 80149bc:	df000017 	ldw	fp,0(sp)
 80149c0:	dec00104 	addi	sp,sp,4
 80149c4:	f800283a 	ret

080149c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80149c8:	defffe04 	addi	sp,sp,-8
 80149cc:	dfc00115 	stw	ra,4(sp)
 80149d0:	df000015 	stw	fp,0(sp)
 80149d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80149d8:	d0a00a17 	ldw	r2,-32728(gp)
 80149dc:	10000326 	beq	r2,zero,80149ec <alt_get_errno+0x24>
 80149e0:	d0a00a17 	ldw	r2,-32728(gp)
 80149e4:	103ee83a 	callr	r2
 80149e8:	00000106 	br	80149f0 <alt_get_errno+0x28>
 80149ec:	d0a6e404 	addi	r2,gp,-25712
}
 80149f0:	e037883a 	mov	sp,fp
 80149f4:	dfc00117 	ldw	ra,4(sp)
 80149f8:	df000017 	ldw	fp,0(sp)
 80149fc:	dec00204 	addi	sp,sp,8
 8014a00:	f800283a 	ret

08014a04 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8014a04:	defff904 	addi	sp,sp,-28
 8014a08:	dfc00615 	stw	ra,24(sp)
 8014a0c:	df000515 	stw	fp,20(sp)
 8014a10:	df000504 	addi	fp,sp,20
 8014a14:	e13ffd15 	stw	r4,-12(fp)
 8014a18:	e17ffe15 	stw	r5,-8(fp)
 8014a1c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8014a20:	e0bffd17 	ldw	r2,-12(fp)
 8014a24:	10000816 	blt	r2,zero,8014a48 <write+0x44>
 8014a28:	01400304 	movi	r5,12
 8014a2c:	e13ffd17 	ldw	r4,-12(fp)
 8014a30:	8013c380 	call	8013c38 <__mulsi3>
 8014a34:	1007883a 	mov	r3,r2
 8014a38:	008200b4 	movhi	r2,2050
 8014a3c:	10af7504 	addi	r2,r2,-16940
 8014a40:	1885883a 	add	r2,r3,r2
 8014a44:	00000106 	br	8014a4c <write+0x48>
 8014a48:	0005883a 	mov	r2,zero
 8014a4c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8014a50:	e0bffb17 	ldw	r2,-20(fp)
 8014a54:	10002126 	beq	r2,zero,8014adc <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8014a58:	e0bffb17 	ldw	r2,-20(fp)
 8014a5c:	10800217 	ldw	r2,8(r2)
 8014a60:	108000cc 	andi	r2,r2,3
 8014a64:	10001826 	beq	r2,zero,8014ac8 <write+0xc4>
 8014a68:	e0bffb17 	ldw	r2,-20(fp)
 8014a6c:	10800017 	ldw	r2,0(r2)
 8014a70:	10800617 	ldw	r2,24(r2)
 8014a74:	10001426 	beq	r2,zero,8014ac8 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8014a78:	e0bffb17 	ldw	r2,-20(fp)
 8014a7c:	10800017 	ldw	r2,0(r2)
 8014a80:	10800617 	ldw	r2,24(r2)
 8014a84:	e0ffff17 	ldw	r3,-4(fp)
 8014a88:	180d883a 	mov	r6,r3
 8014a8c:	e17ffe17 	ldw	r5,-8(fp)
 8014a90:	e13ffb17 	ldw	r4,-20(fp)
 8014a94:	103ee83a 	callr	r2
 8014a98:	e0bffc15 	stw	r2,-16(fp)
 8014a9c:	e0bffc17 	ldw	r2,-16(fp)
 8014aa0:	1000070e 	bge	r2,zero,8014ac0 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 8014aa4:	80149c80 	call	80149c8 <alt_get_errno>
 8014aa8:	1007883a 	mov	r3,r2
 8014aac:	e0bffc17 	ldw	r2,-16(fp)
 8014ab0:	0085c83a 	sub	r2,zero,r2
 8014ab4:	18800015 	stw	r2,0(r3)
        return -1;
 8014ab8:	00bfffc4 	movi	r2,-1
 8014abc:	00000c06 	br	8014af0 <write+0xec>
      }
      return rval;
 8014ac0:	e0bffc17 	ldw	r2,-16(fp)
 8014ac4:	00000a06 	br	8014af0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8014ac8:	80149c80 	call	80149c8 <alt_get_errno>
 8014acc:	1007883a 	mov	r3,r2
 8014ad0:	00800344 	movi	r2,13
 8014ad4:	18800015 	stw	r2,0(r3)
 8014ad8:	00000406 	br	8014aec <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8014adc:	80149c80 	call	80149c8 <alt_get_errno>
 8014ae0:	1007883a 	mov	r3,r2
 8014ae4:	00801444 	movi	r2,81
 8014ae8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8014aec:	00bfffc4 	movi	r2,-1
}
 8014af0:	e037883a 	mov	sp,fp
 8014af4:	dfc00117 	ldw	ra,4(sp)
 8014af8:	df000017 	ldw	fp,0(sp)
 8014afc:	dec00204 	addi	sp,sp,8
 8014b00:	f800283a 	ret

08014b04 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8014b04:	defffd04 	addi	sp,sp,-12
 8014b08:	dfc00215 	stw	ra,8(sp)
 8014b0c:	df000115 	stw	fp,4(sp)
 8014b10:	df000104 	addi	fp,sp,4
 8014b14:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8014b18:	d1600704 	addi	r5,gp,-32740
 8014b1c:	e13fff17 	ldw	r4,-4(fp)
 8014b20:	8019fe40 	call	8019fe4 <alt_dev_llist_insert>
}
 8014b24:	e037883a 	mov	sp,fp
 8014b28:	dfc00117 	ldw	ra,4(sp)
 8014b2c:	df000017 	ldw	fp,0(sp)
 8014b30:	dec00204 	addi	sp,sp,8
 8014b34:	f800283a 	ret

08014b38 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8014b38:	defffd04 	addi	sp,sp,-12
 8014b3c:	dfc00215 	stw	ra,8(sp)
 8014b40:	df000115 	stw	fp,4(sp)
 8014b44:	df000104 	addi	fp,sp,4
 8014b48:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_NIOS, cpu_nios);
 8014b4c:	801a9280 	call	801a928 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8014b50:	00800044 	movi	r2,1
 8014b54:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8014b58:	0001883a 	nop
 8014b5c:	e037883a 	mov	sp,fp
 8014b60:	dfc00117 	ldw	ra,4(sp)
 8014b64:	df000017 	ldw	fp,0(sp)
 8014b68:	dec00204 	addi	sp,sp,8
 8014b6c:	f800283a 	ret

08014b70 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8014b70:	defffe04 	addi	sp,sp,-8
 8014b74:	dfc00115 	stw	ra,4(sp)
 8014b78:	df000015 	stw	fp,0(sp)
 8014b7c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG, jtag);
 8014b80:	000d883a 	mov	r6,zero
 8014b84:	000b883a 	mov	r5,zero
 8014b88:	010200b4 	movhi	r4,2050
 8014b8c:	212fdf04 	addi	r4,r4,-16516
 8014b90:	80190d40 	call	80190d4 <altera_avalon_jtag_uart_init>
 8014b94:	010200b4 	movhi	r4,2050
 8014b98:	212fd504 	addi	r4,r4,-16556
 8014b9c:	8014b040 	call	8014b04 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8014ba0:	0001883a 	nop
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 8014ba4:	010200b4 	movhi	r4,2050
 8014ba8:	2133ed04 	addi	r4,r4,-12364
 8014bac:	801a2200 	call	801a220 <alt_fs_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 8014bb0:	010200b4 	movhi	r4,2050
 8014bb4:	2133f704 	addi	r4,r4,-12324
 8014bb8:	8014b040 	call	8014b04 <alt_dev_reg>
}
 8014bbc:	0001883a 	nop
 8014bc0:	e037883a 	mov	sp,fp
 8014bc4:	dfc00117 	ldw	ra,4(sp)
 8014bc8:	df000017 	ldw	fp,0(sp)
 8014bcc:	dec00204 	addi	sp,sp,8
 8014bd0:	f800283a 	ret

08014bd4 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 8014bd4:	defffa04 	addi	sp,sp,-24
 8014bd8:	dfc00515 	stw	ra,20(sp)
 8014bdc:	df000415 	stw	fp,16(sp)
 8014be0:	df000404 	addi	fp,sp,16
 8014be4:	e13ffe15 	stw	r4,-8(fp)
 8014be8:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 8014bec:	e03ffc15 	stw	zero,-16(fp)
    
    if (alt_up_sd_card_is_Present())
 8014bf0:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8014bf4:	10001e26 	beq	r2,zero,8014c70 <Write_Sector_Data+0x9c>
    {
        short int reg_state = 0xff;
 8014bf8:	00803fc4 	movi	r2,255
 8014bfc:	e0bffd0d 	sth	r2,-12(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 8014c00:	d0a6f117 	ldw	r2,-25660(gp)
 8014c04:	e13ffe17 	ldw	r4,-8(fp)
 8014c08:	e0ffff17 	ldw	r3,-4(fp)
 8014c0c:	20c7883a 	add	r3,r4,r3
 8014c10:	1806927a 	slli	r3,r3,9
 8014c14:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 8014c18:	d0a6f017 	ldw	r2,-25664(gp)
 8014c1c:	00c00604 	movi	r3,24
 8014c20:	10c0002d 	sthio	r3,0(r2)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 8014c24:	d0a6ed17 	ldw	r2,-25676(gp)
 8014c28:	1080002b 	ldhuio	r2,0(r2)
 8014c2c:	10bfffcc 	andi	r2,r2,65535
 8014c30:	e0bffd0d 	sth	r2,-12(fp)
        } while ((reg_state & 0x04)!=0);
 8014c34:	e0bffd0b 	ldhu	r2,-12(fp)
 8014c38:	10bfffcc 	andi	r2,r2,65535
 8014c3c:	1080010c 	andi	r2,r2,4
 8014c40:	103ff81e 	bne	r2,zero,8014c24 <_gp+0xfffefc1c>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 8014c44:	e0bffd0b 	ldhu	r2,-12(fp)
 8014c48:	10bfffcc 	andi	r2,r2,65535
 8014c4c:	1080040c 	andi	r2,r2,16
 8014c50:	1000071e 	bne	r2,zero,8014c70 <Write_Sector_Data+0x9c>
        {
            result = true;
 8014c54:	00800044 	movi	r2,1
 8014c58:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 8014c5c:	d026f615 	stw	zero,-25640(gp)
            current_sector_index = sector_index+partition_offset;
 8014c60:	e0fffe17 	ldw	r3,-8(fp)
 8014c64:	e0bfff17 	ldw	r2,-4(fp)
 8014c68:	1885883a 	add	r2,r3,r2
 8014c6c:	d0a6f715 	stw	r2,-25636(gp)
        }
    }
    return result;
 8014c70:	e0bffc17 	ldw	r2,-16(fp)
}
 8014c74:	e037883a 	mov	sp,fp
 8014c78:	dfc00117 	ldw	ra,4(sp)
 8014c7c:	df000017 	ldw	fp,0(sp)
 8014c80:	dec00204 	addi	sp,sp,8
 8014c84:	f800283a 	ret

08014c88 <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 8014c88:	defffd04 	addi	sp,sp,-12
 8014c8c:	dfc00215 	stw	ra,8(sp)
 8014c90:	df000115 	stw	fp,4(sp)
 8014c94:	df000104 	addi	fp,sp,4
    bool result = true;
 8014c98:	00800044 	movi	r2,1
 8014c9c:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 8014ca0:	d0a6f617 	ldw	r2,-25640(gp)
 8014ca4:	10000526 	beq	r2,zero,8014cbc <Save_Modified_Sector+0x34>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 8014ca8:	d0a6f717 	ldw	r2,-25636(gp)
 8014cac:	000b883a 	mov	r5,zero
 8014cb0:	1009883a 	mov	r4,r2
 8014cb4:	8014bd40 	call	8014bd4 <Write_Sector_Data>
 8014cb8:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 8014cbc:	e0bfff17 	ldw	r2,-4(fp)
}
 8014cc0:	e037883a 	mov	sp,fp
 8014cc4:	dfc00117 	ldw	ra,4(sp)
 8014cc8:	df000017 	ldw	fp,0(sp)
 8014ccc:	dec00204 	addi	sp,sp,8
 8014cd0:	f800283a 	ret

08014cd4 <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 8014cd4:	defffa04 	addi	sp,sp,-24
 8014cd8:	dfc00515 	stw	ra,20(sp)
 8014cdc:	df000415 	stw	fp,16(sp)
 8014ce0:	df000404 	addi	fp,sp,16
 8014ce4:	e13ffe15 	stw	r4,-8(fp)
 8014ce8:	e17fff15 	stw	r5,-4(fp)
	bool result = false;
 8014cec:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 8014cf0:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8014cf4:	10002726 	beq	r2,zero,8014d94 <Read_Sector_Data+0xc0>
	{
		short int reg_state = 0xff;
 8014cf8:	00803fc4 	movi	r2,255
 8014cfc:	e0bffd0d 	sth	r2,-12(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 8014d00:	d0a6f617 	ldw	r2,-25640(gp)
 8014d04:	10000726 	beq	r2,zero,8014d24 <Read_Sector_Data+0x50>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 8014d08:	d0a6f717 	ldw	r2,-25636(gp)
 8014d0c:	000b883a 	mov	r5,zero
 8014d10:	1009883a 	mov	r4,r2
 8014d14:	8014bd40 	call	8014bd4 <Write_Sector_Data>
 8014d18:	1000021e 	bne	r2,zero,8014d24 <Read_Sector_Data+0x50>
            {
                return false;
 8014d1c:	0005883a 	mov	r2,zero
 8014d20:	00001d06 	br	8014d98 <Read_Sector_Data+0xc4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 8014d24:	d0a6f117 	ldw	r2,-25660(gp)
 8014d28:	e13ffe17 	ldw	r4,-8(fp)
 8014d2c:	e0ffff17 	ldw	r3,-4(fp)
 8014d30:	20c7883a 	add	r3,r4,r3
 8014d34:	1806927a 	slli	r3,r3,9
 8014d38:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 8014d3c:	d0a6f017 	ldw	r2,-25664(gp)
 8014d40:	00c00444 	movi	r3,17
 8014d44:	10c0002d 	sthio	r3,0(r2)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 8014d48:	d0a6ed17 	ldw	r2,-25676(gp)
 8014d4c:	1080002b 	ldhuio	r2,0(r2)
 8014d50:	10bfffcc 	andi	r2,r2,65535
 8014d54:	e0bffd0d 	sth	r2,-12(fp)
		} while ((reg_state & 0x04)!=0);
 8014d58:	e0bffd0b 	ldhu	r2,-12(fp)
 8014d5c:	10bfffcc 	andi	r2,r2,65535
 8014d60:	1080010c 	andi	r2,r2,4
 8014d64:	103ff81e 	bne	r2,zero,8014d48 <_gp+0xfffefd40>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 8014d68:	e0bffd0b 	ldhu	r2,-12(fp)
 8014d6c:	10bfffcc 	andi	r2,r2,65535
 8014d70:	1080040c 	andi	r2,r2,16
 8014d74:	1000071e 	bne	r2,zero,8014d94 <Read_Sector_Data+0xc0>
		{
			result = true;
 8014d78:	00800044 	movi	r2,1
 8014d7c:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 8014d80:	d026f615 	stw	zero,-25640(gp)
            current_sector_index = sector_index+partition_offset;
 8014d84:	e0fffe17 	ldw	r3,-8(fp)
 8014d88:	e0bfff17 	ldw	r2,-4(fp)
 8014d8c:	1885883a 	add	r2,r3,r2
 8014d90:	d0a6f715 	stw	r2,-25636(gp)
		}
	}
	return result;
 8014d94:	e0bffc17 	ldw	r2,-16(fp)
}
 8014d98:	e037883a 	mov	sp,fp
 8014d9c:	dfc00117 	ldw	ra,4(sp)
 8014da0:	df000017 	ldw	fp,0(sp)
 8014da4:	dec00204 	addi	sp,sp,8
 8014da8:	f800283a 	ret

08014dac <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 8014dac:	defffb04 	addi	sp,sp,-20
 8014db0:	dfc00415 	stw	ra,16(sp)
 8014db4:	df000315 	stw	fp,12(sp)
 8014db8:	df000304 	addi	fp,sp,12
 8014dbc:	e13ffe15 	stw	r4,-8(fp)
 8014dc0:	e17fff15 	stw	r5,-4(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 8014dc4:	e0bffe17 	ldw	r2,-8(fp)
 8014dc8:	1004d23a 	srli	r2,r2,8
 8014dcc:	d0e6f317 	ldw	r3,-25652(gp)
 8014dd0:	10c5883a 	add	r2,r2,r3
 8014dd4:	e0bffd15 	stw	r2,-12(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 8014dd8:	008200b4 	movhi	r2,2050
 8014ddc:	10bb0d04 	addi	r2,r2,-5068
 8014de0:	10801117 	ldw	r2,68(r2)
 8014de4:	e0fffd17 	ldw	r3,-12(fp)
 8014de8:	1885883a 	add	r2,r3,r2
 8014dec:	e0bffd15 	stw	r2,-12(fp)
     
    if (sector_index != current_sector_index)
 8014df0:	d0a6f717 	ldw	r2,-25636(gp)
 8014df4:	e0fffd17 	ldw	r3,-12(fp)
 8014df8:	18800726 	beq	r3,r2,8014e18 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 8014dfc:	e0bffd17 	ldw	r2,-12(fp)
 8014e00:	000b883a 	mov	r5,zero
 8014e04:	1009883a 	mov	r4,r2
 8014e08:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8014e0c:	1000021e 	bne	r2,zero,8014e18 <get_cluster_flag+0x6c>
        {
            return false;
 8014e10:	0005883a 	mov	r2,zero
 8014e14:	00000d06 	br	8014e4c <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 8014e18:	e0bffe17 	ldw	r2,-8(fp)
 8014e1c:	10803fcc 	andi	r2,r2,255
 8014e20:	1085883a 	add	r2,r2,r2
 8014e24:	1007883a 	mov	r3,r2
 8014e28:	d0a6f517 	ldw	r2,-25644(gp)
 8014e2c:	10800a17 	ldw	r2,40(r2)
 8014e30:	1885883a 	add	r2,r3,r2
 8014e34:	1080002b 	ldhuio	r2,0(r2)
 8014e38:	10bfffcc 	andi	r2,r2,65535
 8014e3c:	1007883a 	mov	r3,r2
 8014e40:	e0bfff17 	ldw	r2,-4(fp)
 8014e44:	10c0000d 	sth	r3,0(r2)
    return true;
 8014e48:	00800044 	movi	r2,1
}
 8014e4c:	e037883a 	mov	sp,fp
 8014e50:	dfc00117 	ldw	ra,4(sp)
 8014e54:	df000017 	ldw	fp,0(sp)
 8014e58:	dec00204 	addi	sp,sp,8
 8014e5c:	f800283a 	ret

08014e60 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 8014e60:	defffa04 	addi	sp,sp,-24
 8014e64:	dfc00515 	stw	ra,20(sp)
 8014e68:	df000415 	stw	fp,16(sp)
 8014e6c:	df000404 	addi	fp,sp,16
 8014e70:	e13ffd15 	stw	r4,-12(fp)
 8014e74:	2805883a 	mov	r2,r5
 8014e78:	e1bfff15 	stw	r6,-4(fp)
 8014e7c:	e0bffe0d 	sth	r2,-8(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 8014e80:	e0bffd17 	ldw	r2,-12(fp)
 8014e84:	1004d23a 	srli	r2,r2,8
 8014e88:	d0e6f317 	ldw	r3,-25652(gp)
 8014e8c:	10c5883a 	add	r2,r2,r3
 8014e90:	e0bffc15 	stw	r2,-16(fp)
    
    if (first_fat)
 8014e94:	e0bfff17 	ldw	r2,-4(fp)
 8014e98:	10000726 	beq	r2,zero,8014eb8 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 8014e9c:	008200b4 	movhi	r2,2050
 8014ea0:	10bb0d04 	addi	r2,r2,-5068
 8014ea4:	10801117 	ldw	r2,68(r2)
 8014ea8:	e0fffc17 	ldw	r3,-16(fp)
 8014eac:	1885883a 	add	r2,r3,r2
 8014eb0:	e0bffc15 	stw	r2,-16(fp)
 8014eb4:	00000606 	br	8014ed0 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 8014eb8:	008200b4 	movhi	r2,2050
 8014ebc:	10bb0d04 	addi	r2,r2,-5068
 8014ec0:	10801217 	ldw	r2,72(r2)
 8014ec4:	e0fffc17 	ldw	r3,-16(fp)
 8014ec8:	1885883a 	add	r2,r3,r2
 8014ecc:	e0bffc15 	stw	r2,-16(fp)
    }
     
    if (sector_index != current_sector_index)
 8014ed0:	d0a6f717 	ldw	r2,-25636(gp)
 8014ed4:	e0fffc17 	ldw	r3,-16(fp)
 8014ed8:	18800726 	beq	r3,r2,8014ef8 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 8014edc:	e0bffc17 	ldw	r2,-16(fp)
 8014ee0:	000b883a 	mov	r5,zero
 8014ee4:	1009883a 	mov	r4,r2
 8014ee8:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8014eec:	1000021e 	bne	r2,zero,8014ef8 <mark_cluster+0x98>
        {
            return false;
 8014ef0:	0005883a 	mov	r2,zero
 8014ef4:	00000d06 	br	8014f2c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 8014ef8:	e0bffd17 	ldw	r2,-12(fp)
 8014efc:	10803fcc 	andi	r2,r2,255
 8014f00:	1085883a 	add	r2,r2,r2
 8014f04:	1007883a 	mov	r3,r2
 8014f08:	d0a6f517 	ldw	r2,-25644(gp)
 8014f0c:	10800a17 	ldw	r2,40(r2)
 8014f10:	1885883a 	add	r2,r3,r2
 8014f14:	1007883a 	mov	r3,r2
 8014f18:	e0bffe0f 	ldh	r2,-8(fp)
 8014f1c:	1880002d 	sthio	r2,0(r3)
    current_sector_modified = true;
 8014f20:	00800044 	movi	r2,1
 8014f24:	d0a6f615 	stw	r2,-25640(gp)
    return true;
 8014f28:	00800044 	movi	r2,1
}
 8014f2c:	e037883a 	mov	sp,fp
 8014f30:	dfc00117 	ldw	ra,4(sp)
 8014f34:	df000017 	ldw	fp,0(sp)
 8014f38:	dec00204 	addi	sp,sp,8
 8014f3c:	f800283a 	ret

08014f40 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 8014f40:	defff704 	addi	sp,sp,-36
 8014f44:	dfc00815 	stw	ra,32(sp)
 8014f48:	df000715 	stw	fp,28(sp)
 8014f4c:	df000704 	addi	fp,sp,28
	bool result = false;
 8014f50:	e03ff915 	stw	zero,-28(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 8014f54:	000b883a 	mov	r5,zero
 8014f58:	0009883a 	mov	r4,zero
 8014f5c:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8014f60:	10005a26 	beq	r2,zero,80150cc <Check_for_Master_Boot_Record+0x18c>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 8014f64:	d0a6f517 	ldw	r2,-25644(gp)
 8014f68:	10800a17 	ldw	r2,40(r2)
 8014f6c:	10807f84 	addi	r2,r2,510
 8014f70:	1080002b 	ldhuio	r2,0(r2)
 8014f74:	10bfffcc 	andi	r2,r2,65535
 8014f78:	10bfffcc 	andi	r2,r2,65535
 8014f7c:	10a0001c 	xori	r2,r2,32768
 8014f80:	10a00004 	addi	r2,r2,-32768
 8014f84:	e0bffb15 	stw	r2,-20(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 8014f88:	e0bffb17 	ldw	r2,-20(fp)
 8014f8c:	10ffffcc 	andi	r3,r2,65535
 8014f90:	00aa9554 	movui	r2,43605
 8014f94:	18804d1e 	bne	r3,r2,80150cc <Check_for_Master_Boot_Record+0x18c>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 8014f98:	e03ffa15 	stw	zero,-24(fp)
 8014f9c:	00004806 	br	80150c0 <Check_for_Master_Boot_Record+0x180>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 8014fa0:	e0bffa17 	ldw	r2,-24(fp)
 8014fa4:	1004913a 	slli	r2,r2,4
 8014fa8:	10806f84 	addi	r2,r2,446
 8014fac:	e0bffc15 	stw	r2,-16(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 8014fb0:	d0a6f517 	ldw	r2,-25644(gp)
 8014fb4:	10c00a17 	ldw	r3,40(r2)
 8014fb8:	e0bffc17 	ldw	r2,-16(fp)
 8014fbc:	1885883a 	add	r2,r3,r2
 8014fc0:	10800104 	addi	r2,r2,4
 8014fc4:	10800023 	ldbuio	r2,0(r2)
 8014fc8:	10803fcc 	andi	r2,r2,255
 8014fcc:	e0bffd05 	stb	r2,-12(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 8014fd0:	e0bffd07 	ldb	r2,-12(fp)
 8014fd4:	10800060 	cmpeqi	r2,r2,1
 8014fd8:	1000091e 	bne	r2,zero,8015000 <Check_for_Master_Boot_Record+0xc0>
 8014fdc:	e0bffd07 	ldb	r2,-12(fp)
 8014fe0:	10800120 	cmpeqi	r2,r2,4
 8014fe4:	1000061e 	bne	r2,zero,8015000 <Check_for_Master_Boot_Record+0xc0>
 8014fe8:	e0bffd07 	ldb	r2,-12(fp)
 8014fec:	108001a0 	cmpeqi	r2,r2,6
 8014ff0:	1000031e 	bne	r2,zero,8015000 <Check_for_Master_Boot_Record+0xc0>
 8014ff4:	e0bffd07 	ldb	r2,-12(fp)
 8014ff8:	10800398 	cmpnei	r2,r2,14
 8014ffc:	10002d1e 	bne	r2,zero,80150b4 <Check_for_Master_Boot_Record+0x174>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 8015000:	d0a6f517 	ldw	r2,-25644(gp)
 8015004:	10c00a17 	ldw	r3,40(r2)
 8015008:	e0bffc17 	ldw	r2,-16(fp)
 801500c:	1885883a 	add	r2,r3,r2
 8015010:	10800284 	addi	r2,r2,10
 8015014:	1080002b 	ldhuio	r2,0(r2)
 8015018:	10bfffcc 	andi	r2,r2,65535
 801501c:	1006943a 	slli	r3,r2,16
 8015020:	d0a6f517 	ldw	r2,-25644(gp)
 8015024:	11000a17 	ldw	r4,40(r2)
 8015028:	e0bffc17 	ldw	r2,-16(fp)
 801502c:	2085883a 	add	r2,r4,r2
 8015030:	10800204 	addi	r2,r2,8
 8015034:	1080002b 	ldhuio	r2,0(r2)
 8015038:	10bfffcc 	andi	r2,r2,65535
 801503c:	10bfffcc 	andi	r2,r2,65535
 8015040:	1884b03a 	or	r2,r3,r2
 8015044:	e0bffe15 	stw	r2,-8(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 8015048:	d0a6f517 	ldw	r2,-25644(gp)
 801504c:	10c00a17 	ldw	r3,40(r2)
 8015050:	e0bffc17 	ldw	r2,-16(fp)
 8015054:	1885883a 	add	r2,r3,r2
 8015058:	10800384 	addi	r2,r2,14
 801505c:	1080002b 	ldhuio	r2,0(r2)
 8015060:	10bfffcc 	andi	r2,r2,65535
 8015064:	1006943a 	slli	r3,r2,16
 8015068:	d0a6f517 	ldw	r2,-25644(gp)
 801506c:	11000a17 	ldw	r4,40(r2)
 8015070:	e0bffc17 	ldw	r2,-16(fp)
 8015074:	2085883a 	add	r2,r4,r2
 8015078:	10800304 	addi	r2,r2,12
 801507c:	1080002b 	ldhuio	r2,0(r2)
 8015080:	10bfffcc 	andi	r2,r2,65535
 8015084:	10bfffcc 	andi	r2,r2,65535
 8015088:	1884b03a 	or	r2,r3,r2
 801508c:	e0bfff15 	stw	r2,-4(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 8015090:	e0bfff17 	ldw	r2,-4(fp)
 8015094:	0080070e 	bge	zero,r2,80150b4 <Check_for_Master_Boot_Record+0x174>
					{
						result = true;
 8015098:	00800044 	movi	r2,1
 801509c:	e0bff915 	stw	r2,-28(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 80150a0:	e0bfff17 	ldw	r2,-4(fp)
 80150a4:	d0a6f415 	stw	r2,-25648(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 80150a8:	e0bffe17 	ldw	r2,-8(fp)
 80150ac:	d0a6f315 	stw	r2,-25652(gp)
						break;
 80150b0:	00000606 	br	80150cc <Check_for_Master_Boot_Record+0x18c>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 80150b4:	e0bffa17 	ldw	r2,-24(fp)
 80150b8:	10800044 	addi	r2,r2,1
 80150bc:	e0bffa15 	stw	r2,-24(fp)
 80150c0:	e0bffa17 	ldw	r2,-24(fp)
 80150c4:	10800110 	cmplti	r2,r2,4
 80150c8:	103fb51e 	bne	r2,zero,8014fa0 <_gp+0xfffeff98>
				}
			}
		}
	}

	return result;
 80150cc:	e0bff917 	ldw	r2,-28(fp)
}
 80150d0:	e037883a 	mov	sp,fp
 80150d4:	dfc00117 	ldw	ra,4(sp)
 80150d8:	df000017 	ldw	fp,0(sp)
 80150dc:	dec00204 	addi	sp,sp,8
 80150e0:	f800283a 	ret

080150e4 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 80150e4:	defff804 	addi	sp,sp,-32
 80150e8:	dfc00715 	stw	ra,28(sp)
 80150ec:	df000615 	stw	fp,24(sp)
 80150f0:	df000604 	addi	fp,sp,24
 80150f4:	e13ffc15 	stw	r4,-16(fp)
 80150f8:	e17ffd15 	stw	r5,-12(fp)
 80150fc:	e1bffe15 	stw	r6,-8(fp)
 8015100:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 8015104:	e03ffa15 	stw	zero,-24(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8015108:	e0bffc17 	ldw	r2,-16(fp)
 801510c:	108007cc 	andi	r2,r2,31
 8015110:	10008d1e 	bne	r2,zero,8015348 <Read_File_Record_At_Offset+0x264>
 8015114:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8015118:	10008b26 	beq	r2,zero,8015348 <Read_File_Record_At_Offset+0x264>
 801511c:	d0a6ec17 	ldw	r2,-25680(gp)
 8015120:	10008926 	beq	r2,zero,8015348 <Read_File_Record_At_Offset+0x264>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 8015124:	e03ffb15 	stw	zero,-20(fp)
 8015128:	00001106 	br	8015170 <Read_File_Record_At_Offset+0x8c>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 801512c:	e0fffc17 	ldw	r3,-16(fp)
 8015130:	e0bffb17 	ldw	r2,-20(fp)
 8015134:	1885883a 	add	r2,r3,r2
 8015138:	1007883a 	mov	r3,r2
 801513c:	d0a6f517 	ldw	r2,-25644(gp)
 8015140:	10800a17 	ldw	r2,40(r2)
 8015144:	1885883a 	add	r2,r3,r2
 8015148:	10800023 	ldbuio	r2,0(r2)
 801514c:	10803fcc 	andi	r2,r2,255
 8015150:	1009883a 	mov	r4,r2
 8015154:	e0fffd17 	ldw	r3,-12(fp)
 8015158:	e0bffb17 	ldw	r2,-20(fp)
 801515c:	1885883a 	add	r2,r3,r2
 8015160:	11000005 	stb	r4,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 8015164:	e0bffb17 	ldw	r2,-20(fp)
 8015168:	10800044 	addi	r2,r2,1
 801516c:	e0bffb15 	stw	r2,-20(fp)
 8015170:	e0bffb17 	ldw	r2,-20(fp)
 8015174:	10800210 	cmplti	r2,r2,8
 8015178:	103fec1e 	bne	r2,zero,801512c <_gp+0xffff0124>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 801517c:	e03ffb15 	stw	zero,-20(fp)
 8015180:	00001306 	br	80151d0 <Read_File_Record_At_Offset+0xec>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 8015184:	e0fffc17 	ldw	r3,-16(fp)
 8015188:	e0bffb17 	ldw	r2,-20(fp)
 801518c:	1885883a 	add	r2,r3,r2
 8015190:	1007883a 	mov	r3,r2
 8015194:	d0a6f517 	ldw	r2,-25644(gp)
 8015198:	10800a17 	ldw	r2,40(r2)
 801519c:	1885883a 	add	r2,r3,r2
 80151a0:	10800204 	addi	r2,r2,8
 80151a4:	10800023 	ldbuio	r2,0(r2)
 80151a8:	10803fcc 	andi	r2,r2,255
 80151ac:	1009883a 	mov	r4,r2
 80151b0:	e0fffd17 	ldw	r3,-12(fp)
 80151b4:	e0bffb17 	ldw	r2,-20(fp)
 80151b8:	1885883a 	add	r2,r3,r2
 80151bc:	10800204 	addi	r2,r2,8
 80151c0:	11000005 	stb	r4,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 80151c4:	e0bffb17 	ldw	r2,-20(fp)
 80151c8:	10800044 	addi	r2,r2,1
 80151cc:	e0bffb15 	stw	r2,-20(fp)
 80151d0:	e0bffb17 	ldw	r2,-20(fp)
 80151d4:	108000d0 	cmplti	r2,r2,3
 80151d8:	103fea1e 	bne	r2,zero,8015184 <_gp+0xffff017c>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 80151dc:	d0a6f517 	ldw	r2,-25644(gp)
 80151e0:	10c00a17 	ldw	r3,40(r2)
 80151e4:	e0bffc17 	ldw	r2,-16(fp)
 80151e8:	1885883a 	add	r2,r3,r2
 80151ec:	108002c4 	addi	r2,r2,11
 80151f0:	10800023 	ldbuio	r2,0(r2)
 80151f4:	10803fcc 	andi	r2,r2,255
 80151f8:	1007883a 	mov	r3,r2
 80151fc:	e0bffd17 	ldw	r2,-12(fp)
 8015200:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 8015204:	d0a6f517 	ldw	r2,-25644(gp)
 8015208:	10c00a17 	ldw	r3,40(r2)
 801520c:	e0bffc17 	ldw	r2,-16(fp)
 8015210:	1885883a 	add	r2,r3,r2
 8015214:	10800384 	addi	r2,r2,14
 8015218:	1080002b 	ldhuio	r2,0(r2)
 801521c:	10bfffcc 	andi	r2,r2,65535
 8015220:	1007883a 	mov	r3,r2
 8015224:	e0bffd17 	ldw	r2,-12(fp)
 8015228:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 801522c:	d0a6f517 	ldw	r2,-25644(gp)
 8015230:	10c00a17 	ldw	r3,40(r2)
 8015234:	e0bffc17 	ldw	r2,-16(fp)
 8015238:	1885883a 	add	r2,r3,r2
 801523c:	10800404 	addi	r2,r2,16
 8015240:	1080002b 	ldhuio	r2,0(r2)
 8015244:	10bfffcc 	andi	r2,r2,65535
 8015248:	1007883a 	mov	r3,r2
 801524c:	e0bffd17 	ldw	r2,-12(fp)
 8015250:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 8015254:	d0a6f517 	ldw	r2,-25644(gp)
 8015258:	10c00a17 	ldw	r3,40(r2)
 801525c:	e0bffc17 	ldw	r2,-16(fp)
 8015260:	1885883a 	add	r2,r3,r2
 8015264:	10800484 	addi	r2,r2,18
 8015268:	1080002b 	ldhuio	r2,0(r2)
 801526c:	10bfffcc 	andi	r2,r2,65535
 8015270:	1007883a 	mov	r3,r2
 8015274:	e0bffd17 	ldw	r2,-12(fp)
 8015278:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 801527c:	d0a6f517 	ldw	r2,-25644(gp)
 8015280:	10c00a17 	ldw	r3,40(r2)
 8015284:	e0bffc17 	ldw	r2,-16(fp)
 8015288:	1885883a 	add	r2,r3,r2
 801528c:	10800584 	addi	r2,r2,22
 8015290:	1080002b 	ldhuio	r2,0(r2)
 8015294:	10bfffcc 	andi	r2,r2,65535
 8015298:	1007883a 	mov	r3,r2
 801529c:	e0bffd17 	ldw	r2,-12(fp)
 80152a0:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 80152a4:	d0a6f517 	ldw	r2,-25644(gp)
 80152a8:	10c00a17 	ldw	r3,40(r2)
 80152ac:	e0bffc17 	ldw	r2,-16(fp)
 80152b0:	1885883a 	add	r2,r3,r2
 80152b4:	10800604 	addi	r2,r2,24
 80152b8:	1080002b 	ldhuio	r2,0(r2)
 80152bc:	10bfffcc 	andi	r2,r2,65535
 80152c0:	1007883a 	mov	r3,r2
 80152c4:	e0bffd17 	ldw	r2,-12(fp)
 80152c8:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 80152cc:	d0a6f517 	ldw	r2,-25644(gp)
 80152d0:	10c00a17 	ldw	r3,40(r2)
 80152d4:	e0bffc17 	ldw	r2,-16(fp)
 80152d8:	1885883a 	add	r2,r3,r2
 80152dc:	10800684 	addi	r2,r2,26
 80152e0:	1080002b 	ldhuio	r2,0(r2)
 80152e4:	10bfffcc 	andi	r2,r2,65535
 80152e8:	1007883a 	mov	r3,r2
 80152ec:	e0bffd17 	ldw	r2,-12(fp)
 80152f0:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 80152f4:	d0a6f517 	ldw	r2,-25644(gp)
 80152f8:	10c00a17 	ldw	r3,40(r2)
 80152fc:	e0bffc17 	ldw	r2,-16(fp)
 8015300:	1885883a 	add	r2,r3,r2
 8015304:	10800704 	addi	r2,r2,28
 8015308:	10800037 	ldwio	r2,0(r2)
 801530c:	1007883a 	mov	r3,r2
 8015310:	e0bffd17 	ldw	r2,-12(fp)
 8015314:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 8015318:	e0bffd17 	ldw	r2,-12(fp)
 801531c:	e0fffe17 	ldw	r3,-8(fp)
 8015320:	10c00a15 	stw	r3,40(r2)
		record->file_record_sector_in_cluster = sector_in_cluster;
 8015324:	e0bffd17 	ldw	r2,-12(fp)
 8015328:	e0ffff17 	ldw	r3,-4(fp)
 801532c:	10c00b15 	stw	r3,44(r2)
		record->file_record_offset = offset;
 8015330:	e0bffc17 	ldw	r2,-16(fp)
 8015334:	1007883a 	mov	r3,r2
 8015338:	e0bffd17 	ldw	r2,-12(fp)
 801533c:	10c00c0d 	sth	r3,48(r2)
		result = true;
 8015340:	00800044 	movi	r2,1
 8015344:	e0bffa15 	stw	r2,-24(fp)
	}
	return result;
 8015348:	e0bffa17 	ldw	r2,-24(fp)
}
 801534c:	e037883a 	mov	sp,fp
 8015350:	dfc00117 	ldw	ra,4(sp)
 8015354:	df000017 	ldw	fp,0(sp)
 8015358:	dec00204 	addi	sp,sp,8
 801535c:	f800283a 	ret

08015360 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 8015360:	defff904 	addi	sp,sp,-28
 8015364:	dfc00615 	stw	ra,24(sp)
 8015368:	df000515 	stw	fp,20(sp)
 801536c:	df000504 	addi	fp,sp,20
 8015370:	e13ffe15 	stw	r4,-8(fp)
 8015374:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 8015378:	e03ffb15 	stw	zero,-20(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 801537c:	e0bffe17 	ldw	r2,-8(fp)
 8015380:	108007cc 	andi	r2,r2,31
 8015384:	1000931e 	bne	r2,zero,80155d4 <Write_File_Record_At_Offset+0x274>
 8015388:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 801538c:	10009126 	beq	r2,zero,80155d4 <Write_File_Record_At_Offset+0x274>
 8015390:	d0a6ec17 	ldw	r2,-25680(gp)
 8015394:	10008f26 	beq	r2,zero,80155d4 <Write_File_Record_At_Offset+0x274>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 8015398:	e03ffc15 	stw	zero,-16(fp)
 801539c:	00001f06 	br	801541c <Write_File_Record_At_Offset+0xbc>
        {
            short int two_chars = (short int) record->name[counter+1];
 80153a0:	e0bffc17 	ldw	r2,-16(fp)
 80153a4:	10800044 	addi	r2,r2,1
 80153a8:	e0ffff17 	ldw	r3,-4(fp)
 80153ac:	1885883a 	add	r2,r3,r2
 80153b0:	10800003 	ldbu	r2,0(r2)
 80153b4:	10803fcc 	andi	r2,r2,255
 80153b8:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars << 8;
 80153bc:	e0bffd0f 	ldh	r2,-12(fp)
 80153c0:	1004923a 	slli	r2,r2,8
 80153c4:	e0bffd0d 	sth	r2,-12(fp)
            two_chars = two_chars | record->name[counter];
 80153c8:	e0ffff17 	ldw	r3,-4(fp)
 80153cc:	e0bffc17 	ldw	r2,-16(fp)
 80153d0:	1885883a 	add	r2,r3,r2
 80153d4:	10800003 	ldbu	r2,0(r2)
 80153d8:	10c03fcc 	andi	r3,r2,255
 80153dc:	e0bffd0b 	ldhu	r2,-12(fp)
 80153e0:	1884b03a 	or	r2,r3,r2
 80153e4:	e0bffd0d 	sth	r2,-12(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 80153e8:	e0fffe17 	ldw	r3,-8(fp)
 80153ec:	e0bffc17 	ldw	r2,-16(fp)
 80153f0:	1885883a 	add	r2,r3,r2
 80153f4:	1007883a 	mov	r3,r2
 80153f8:	d0a6f517 	ldw	r2,-25644(gp)
 80153fc:	10800a17 	ldw	r2,40(r2)
 8015400:	1885883a 	add	r2,r3,r2
 8015404:	1007883a 	mov	r3,r2
 8015408:	e0bffd0f 	ldh	r2,-12(fp)
 801540c:	1880002d 	sthio	r2,0(r3)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 8015410:	e0bffc17 	ldw	r2,-16(fp)
 8015414:	10800084 	addi	r2,r2,2
 8015418:	e0bffc15 	stw	r2,-16(fp)
 801541c:	e0bffc17 	ldw	r2,-16(fp)
 8015420:	10800210 	cmplti	r2,r2,8
 8015424:	103fde1e 	bne	r2,zero,80153a0 <_gp+0xffff0398>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 8015428:	e03ffc15 	stw	zero,-16(fp)
 801542c:	00001306 	br	801547c <Write_File_Record_At_Offset+0x11c>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 8015430:	e0fffe17 	ldw	r3,-8(fp)
 8015434:	e0bffc17 	ldw	r2,-16(fp)
 8015438:	1885883a 	add	r2,r3,r2
 801543c:	1007883a 	mov	r3,r2
 8015440:	d0a6f517 	ldw	r2,-25644(gp)
 8015444:	10800a17 	ldw	r2,40(r2)
 8015448:	1885883a 	add	r2,r3,r2
 801544c:	10800204 	addi	r2,r2,8
 8015450:	1009883a 	mov	r4,r2
 8015454:	e0ffff17 	ldw	r3,-4(fp)
 8015458:	e0bffc17 	ldw	r2,-16(fp)
 801545c:	1885883a 	add	r2,r3,r2
 8015460:	10800204 	addi	r2,r2,8
 8015464:	10800003 	ldbu	r2,0(r2)
 8015468:	10803fcc 	andi	r2,r2,255
 801546c:	20800025 	stbio	r2,0(r4)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 8015470:	e0bffc17 	ldw	r2,-16(fp)
 8015474:	10800044 	addi	r2,r2,1
 8015478:	e0bffc15 	stw	r2,-16(fp)
 801547c:	e0bffc17 	ldw	r2,-16(fp)
 8015480:	108000d0 	cmplti	r2,r2,3
 8015484:	103fea1e 	bne	r2,zero,8015430 <_gp+0xffff0428>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 8015488:	d0a6f517 	ldw	r2,-25644(gp)
 801548c:	10c00a17 	ldw	r3,40(r2)
 8015490:	e0bffe17 	ldw	r2,-8(fp)
 8015494:	1885883a 	add	r2,r3,r2
 8015498:	108002c4 	addi	r2,r2,11
 801549c:	1007883a 	mov	r3,r2
 80154a0:	e0bfff17 	ldw	r2,-4(fp)
 80154a4:	108002c3 	ldbu	r2,11(r2)
 80154a8:	10803fcc 	andi	r2,r2,255
 80154ac:	18800025 	stbio	r2,0(r3)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 80154b0:	d0a6f517 	ldw	r2,-25644(gp)
 80154b4:	10c00a17 	ldw	r3,40(r2)
 80154b8:	e0bffe17 	ldw	r2,-8(fp)
 80154bc:	1885883a 	add	r2,r3,r2
 80154c0:	10800384 	addi	r2,r2,14
 80154c4:	1007883a 	mov	r3,r2
 80154c8:	e0bfff17 	ldw	r2,-4(fp)
 80154cc:	1080030b 	ldhu	r2,12(r2)
 80154d0:	10bfffcc 	andi	r2,r2,65535
 80154d4:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 80154d8:	d0a6f517 	ldw	r2,-25644(gp)
 80154dc:	10c00a17 	ldw	r3,40(r2)
 80154e0:	e0bffe17 	ldw	r2,-8(fp)
 80154e4:	1885883a 	add	r2,r3,r2
 80154e8:	10800404 	addi	r2,r2,16
 80154ec:	1007883a 	mov	r3,r2
 80154f0:	e0bfff17 	ldw	r2,-4(fp)
 80154f4:	1080038b 	ldhu	r2,14(r2)
 80154f8:	10bfffcc 	andi	r2,r2,65535
 80154fc:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 8015500:	d0a6f517 	ldw	r2,-25644(gp)
 8015504:	10c00a17 	ldw	r3,40(r2)
 8015508:	e0bffe17 	ldw	r2,-8(fp)
 801550c:	1885883a 	add	r2,r3,r2
 8015510:	10800484 	addi	r2,r2,18
 8015514:	1007883a 	mov	r3,r2
 8015518:	e0bfff17 	ldw	r2,-4(fp)
 801551c:	1080040b 	ldhu	r2,16(r2)
 8015520:	10bfffcc 	andi	r2,r2,65535
 8015524:	1880002d 	sthio	r2,0(r3)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 8015528:	d0a6f517 	ldw	r2,-25644(gp)
 801552c:	10c00a17 	ldw	r3,40(r2)
 8015530:	e0bffe17 	ldw	r2,-8(fp)
 8015534:	1885883a 	add	r2,r3,r2
 8015538:	10800584 	addi	r2,r2,22
 801553c:	1007883a 	mov	r3,r2
 8015540:	e0bfff17 	ldw	r2,-4(fp)
 8015544:	1080048b 	ldhu	r2,18(r2)
 8015548:	10bfffcc 	andi	r2,r2,65535
 801554c:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 8015550:	d0a6f517 	ldw	r2,-25644(gp)
 8015554:	10c00a17 	ldw	r3,40(r2)
 8015558:	e0bffe17 	ldw	r2,-8(fp)
 801555c:	1885883a 	add	r2,r3,r2
 8015560:	10800604 	addi	r2,r2,24
 8015564:	1007883a 	mov	r3,r2
 8015568:	e0bfff17 	ldw	r2,-4(fp)
 801556c:	1080050b 	ldhu	r2,20(r2)
 8015570:	10bfffcc 	andi	r2,r2,65535
 8015574:	1880002d 	sthio	r2,0(r3)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 8015578:	d0a6f517 	ldw	r2,-25644(gp)
 801557c:	10c00a17 	ldw	r3,40(r2)
 8015580:	e0bffe17 	ldw	r2,-8(fp)
 8015584:	1885883a 	add	r2,r3,r2
 8015588:	10800684 	addi	r2,r2,26
 801558c:	1007883a 	mov	r3,r2
 8015590:	e0bfff17 	ldw	r2,-4(fp)
 8015594:	1080058b 	ldhu	r2,22(r2)
 8015598:	10bfffcc 	andi	r2,r2,65535
 801559c:	1880002d 	sthio	r2,0(r3)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 80155a0:	d0a6f517 	ldw	r2,-25644(gp)
 80155a4:	10c00a17 	ldw	r3,40(r2)
 80155a8:	e0bffe17 	ldw	r2,-8(fp)
 80155ac:	1885883a 	add	r2,r3,r2
 80155b0:	10800704 	addi	r2,r2,28
 80155b4:	1007883a 	mov	r3,r2
 80155b8:	e0bfff17 	ldw	r2,-4(fp)
 80155bc:	10800617 	ldw	r2,24(r2)
 80155c0:	18800035 	stwio	r2,0(r3)
        current_sector_modified = true;                  
 80155c4:	00800044 	movi	r2,1
 80155c8:	d0a6f615 	stw	r2,-25640(gp)
        result = true;
 80155cc:	00800044 	movi	r2,1
 80155d0:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 80155d4:	e0bffb17 	ldw	r2,-20(fp)
}
 80155d8:	e037883a 	mov	sp,fp
 80155dc:	dfc00117 	ldw	ra,4(sp)
 80155e0:	df000017 	ldw	fp,0(sp)
 80155e4:	dec00204 	addi	sp,sp,8
 80155e8:	f800283a 	ret

080155ec <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 80155ec:	defff804 	addi	sp,sp,-32
 80155f0:	dfc00715 	stw	ra,28(sp)
 80155f4:	df000615 	stw	fp,24(sp)
 80155f8:	dc000515 	stw	r16,20(sp)
 80155fc:	df000604 	addi	fp,sp,24
 8015600:	e13ffe15 	stw	r4,-8(fp)
	bool result = false;
 8015604:	e03ffa15 	stw	zero,-24(fp)
	int counter = 0;
 8015608:	e03ffb15 	stw	zero,-20(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 801560c:	e17ffe17 	ldw	r5,-8(fp)
 8015610:	0009883a 	mov	r4,zero
 8015614:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8015618:	e0bffa15 	stw	r2,-24(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 801561c:	d0a6f517 	ldw	r2,-25644(gp)
 8015620:	10800a17 	ldw	r2,40(r2)
 8015624:	10807f84 	addi	r2,r2,510
 8015628:	1080002b 	ldhuio	r2,0(r2)
 801562c:	10bfffcc 	andi	r2,r2,65535
 8015630:	e0bffd0d 	sth	r2,-12(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 8015634:	e0bffd0f 	ldh	r2,-12(fp)
 8015638:	10ffffcc 	andi	r3,r2,65535
 801563c:	00aa9554 	movui	r2,43605
 8015640:	18818a1e 	bne	r3,r2,8015c6c <Check_for_DOS_FAT+0x680>
 8015644:	e0bffa17 	ldw	r2,-24(fp)
 8015648:	10018826 	beq	r2,zero,8015c6c <Check_for_DOS_FAT+0x680>
	{
		int num_clusters = 0;
 801564c:	e03ffc15 	stw	zero,-16(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 8015650:	d0a6f517 	ldw	r2,-25644(gp)
 8015654:	10800a17 	ldw	r2,40(r2)
 8015658:	10800023 	ldbuio	r2,0(r2)
 801565c:	10803fcc 	andi	r2,r2,255
 8015660:	1007883a 	mov	r3,r2
 8015664:	008200b4 	movhi	r2,2050
 8015668:	10bb0d04 	addi	r2,r2,-5068
 801566c:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 8015670:	d0a6f517 	ldw	r2,-25644(gp)
 8015674:	10800a17 	ldw	r2,40(r2)
 8015678:	10800044 	addi	r2,r2,1
 801567c:	10800023 	ldbuio	r2,0(r2)
 8015680:	10803fcc 	andi	r2,r2,255
 8015684:	1007883a 	mov	r3,r2
 8015688:	008200b4 	movhi	r2,2050
 801568c:	10bb0d04 	addi	r2,r2,-5068
 8015690:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 8015694:	d0a6f517 	ldw	r2,-25644(gp)
 8015698:	10800a17 	ldw	r2,40(r2)
 801569c:	10800084 	addi	r2,r2,2
 80156a0:	10800023 	ldbuio	r2,0(r2)
 80156a4:	10803fcc 	andi	r2,r2,255
 80156a8:	1007883a 	mov	r3,r2
 80156ac:	008200b4 	movhi	r2,2050
 80156b0:	10bb0d04 	addi	r2,r2,-5068
 80156b4:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 80156b8:	e03ffb15 	stw	zero,-20(fp)
 80156bc:	00001106 	br	8015704 <Check_for_DOS_FAT+0x118>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 80156c0:	d0a6f517 	ldw	r2,-25644(gp)
 80156c4:	10c00a17 	ldw	r3,40(r2)
 80156c8:	e0bffb17 	ldw	r2,-20(fp)
 80156cc:	1885883a 	add	r2,r3,r2
 80156d0:	108000c4 	addi	r2,r2,3
 80156d4:	10800023 	ldbuio	r2,0(r2)
 80156d8:	10803fcc 	andi	r2,r2,255
 80156dc:	1009883a 	mov	r4,r2
 80156e0:	008200b4 	movhi	r2,2050
 80156e4:	10bb0d04 	addi	r2,r2,-5068
 80156e8:	e0fffb17 	ldw	r3,-20(fp)
 80156ec:	10c5883a 	add	r2,r2,r3
 80156f0:	108000c4 	addi	r2,r2,3
 80156f4:	11000005 	stb	r4,0(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 80156f8:	e0bffb17 	ldw	r2,-20(fp)
 80156fc:	10800044 	addi	r2,r2,1
 8015700:	e0bffb15 	stw	r2,-20(fp)
 8015704:	e0bffb17 	ldw	r2,-20(fp)
 8015708:	10800210 	cmplti	r2,r2,8
 801570c:	103fec1e 	bne	r2,zero,80156c0 <_gp+0xffff06b8>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 8015710:	d0a6f517 	ldw	r2,-25644(gp)
 8015714:	10800a17 	ldw	r2,40(r2)
 8015718:	10800304 	addi	r2,r2,12
 801571c:	10800023 	ldbuio	r2,0(r2)
 8015720:	10803fcc 	andi	r2,r2,255
 8015724:	1004923a 	slli	r2,r2,8
 8015728:	1007883a 	mov	r3,r2
 801572c:	d0a6f517 	ldw	r2,-25644(gp)
 8015730:	10800a17 	ldw	r2,40(r2)
 8015734:	108002c4 	addi	r2,r2,11
 8015738:	10800023 	ldbuio	r2,0(r2)
 801573c:	10803fcc 	andi	r2,r2,255
 8015740:	10803fcc 	andi	r2,r2,255
 8015744:	1080201c 	xori	r2,r2,128
 8015748:	10bfe004 	addi	r2,r2,-128
 801574c:	1884b03a 	or	r2,r3,r2
 8015750:	1007883a 	mov	r3,r2
 8015754:	008200b4 	movhi	r2,2050
 8015758:	10bb0d04 	addi	r2,r2,-5068
 801575c:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 8015760:	d0a6f517 	ldw	r2,-25644(gp)
 8015764:	10800a17 	ldw	r2,40(r2)
 8015768:	10800344 	addi	r2,r2,13
 801576c:	10800023 	ldbuio	r2,0(r2)
 8015770:	10803fcc 	andi	r2,r2,255
 8015774:	1007883a 	mov	r3,r2
 8015778:	008200b4 	movhi	r2,2050
 801577c:	10bb0d04 	addi	r2,r2,-5068
 8015780:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 8015784:	d0a6f517 	ldw	r2,-25644(gp)
 8015788:	10800a17 	ldw	r2,40(r2)
 801578c:	10800384 	addi	r2,r2,14
 8015790:	1080002b 	ldhuio	r2,0(r2)
 8015794:	10bfffcc 	andi	r2,r2,65535
 8015798:	1007883a 	mov	r3,r2
 801579c:	008200b4 	movhi	r2,2050
 80157a0:	10bb0d04 	addi	r2,r2,-5068
 80157a4:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 80157a8:	d0a6f517 	ldw	r2,-25644(gp)
 80157ac:	10800a17 	ldw	r2,40(r2)
 80157b0:	10800404 	addi	r2,r2,16
 80157b4:	10800023 	ldbuio	r2,0(r2)
 80157b8:	10803fcc 	andi	r2,r2,255
 80157bc:	1007883a 	mov	r3,r2
 80157c0:	008200b4 	movhi	r2,2050
 80157c4:	10bb0d04 	addi	r2,r2,-5068
 80157c8:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 80157cc:	d0a6f517 	ldw	r2,-25644(gp)
 80157d0:	10800a17 	ldw	r2,40(r2)
 80157d4:	10800484 	addi	r2,r2,18
 80157d8:	10800023 	ldbuio	r2,0(r2)
 80157dc:	10803fcc 	andi	r2,r2,255
 80157e0:	1004923a 	slli	r2,r2,8
 80157e4:	1007883a 	mov	r3,r2
 80157e8:	d0a6f517 	ldw	r2,-25644(gp)
 80157ec:	10800a17 	ldw	r2,40(r2)
 80157f0:	10800444 	addi	r2,r2,17
 80157f4:	10800023 	ldbuio	r2,0(r2)
 80157f8:	10803fcc 	andi	r2,r2,255
 80157fc:	10803fcc 	andi	r2,r2,255
 8015800:	1884b03a 	or	r2,r3,r2
 8015804:	1007883a 	mov	r3,r2
 8015808:	008200b4 	movhi	r2,2050
 801580c:	10bb0d04 	addi	r2,r2,-5068
 8015810:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 8015814:	d0a6f517 	ldw	r2,-25644(gp)
 8015818:	10800a17 	ldw	r2,40(r2)
 801581c:	10800504 	addi	r2,r2,20
 8015820:	10800023 	ldbuio	r2,0(r2)
 8015824:	10803fcc 	andi	r2,r2,255
 8015828:	1004923a 	slli	r2,r2,8
 801582c:	1007883a 	mov	r3,r2
 8015830:	d0a6f517 	ldw	r2,-25644(gp)
 8015834:	10800a17 	ldw	r2,40(r2)
 8015838:	108004c4 	addi	r2,r2,19
 801583c:	10800023 	ldbuio	r2,0(r2)
 8015840:	10803fcc 	andi	r2,r2,255
 8015844:	10803fcc 	andi	r2,r2,255
 8015848:	1884b03a 	or	r2,r3,r2
 801584c:	1007883a 	mov	r3,r2
 8015850:	008200b4 	movhi	r2,2050
 8015854:	10bb0d04 	addi	r2,r2,-5068
 8015858:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 801585c:	d0a6f517 	ldw	r2,-25644(gp)
 8015860:	10800a17 	ldw	r2,40(r2)
 8015864:	10800544 	addi	r2,r2,21
 8015868:	10800023 	ldbuio	r2,0(r2)
 801586c:	10803fcc 	andi	r2,r2,255
 8015870:	1007883a 	mov	r3,r2
 8015874:	008200b4 	movhi	r2,2050
 8015878:	10bb0d04 	addi	r2,r2,-5068
 801587c:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 8015880:	d0a6f517 	ldw	r2,-25644(gp)
 8015884:	10800a17 	ldw	r2,40(r2)
 8015888:	10800584 	addi	r2,r2,22
 801588c:	1080002b 	ldhuio	r2,0(r2)
 8015890:	10bfffcc 	andi	r2,r2,65535
 8015894:	1007883a 	mov	r3,r2
 8015898:	008200b4 	movhi	r2,2050
 801589c:	10bb0d04 	addi	r2,r2,-5068
 80158a0:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 80158a4:	d0a6f517 	ldw	r2,-25644(gp)
 80158a8:	10800a17 	ldw	r2,40(r2)
 80158ac:	10800604 	addi	r2,r2,24
 80158b0:	1080002b 	ldhuio	r2,0(r2)
 80158b4:	10bfffcc 	andi	r2,r2,65535
 80158b8:	1007883a 	mov	r3,r2
 80158bc:	008200b4 	movhi	r2,2050
 80158c0:	10bb0d04 	addi	r2,r2,-5068
 80158c4:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 80158c8:	d0a6f517 	ldw	r2,-25644(gp)
 80158cc:	10800a17 	ldw	r2,40(r2)
 80158d0:	10800684 	addi	r2,r2,26
 80158d4:	1080002b 	ldhuio	r2,0(r2)
 80158d8:	10bfffcc 	andi	r2,r2,65535
 80158dc:	1007883a 	mov	r3,r2
 80158e0:	008200b4 	movhi	r2,2050
 80158e4:	10bb0d04 	addi	r2,r2,-5068
 80158e8:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 80158ec:	d0a6f517 	ldw	r2,-25644(gp)
 80158f0:	10800a17 	ldw	r2,40(r2)
 80158f4:	10800704 	addi	r2,r2,28
 80158f8:	10800037 	ldwio	r2,0(r2)
 80158fc:	1007883a 	mov	r3,r2
 8015900:	008200b4 	movhi	r2,2050
 8015904:	10bb0d04 	addi	r2,r2,-5068
 8015908:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 801590c:	d0a6f517 	ldw	r2,-25644(gp)
 8015910:	10800a17 	ldw	r2,40(r2)
 8015914:	10800804 	addi	r2,r2,32
 8015918:	10800037 	ldwio	r2,0(r2)
 801591c:	1007883a 	mov	r3,r2
 8015920:	008200b4 	movhi	r2,2050
 8015924:	10bb0d04 	addi	r2,r2,-5068
 8015928:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 801592c:	d0a6f517 	ldw	r2,-25644(gp)
 8015930:	10800a17 	ldw	r2,40(r2)
 8015934:	10800904 	addi	r2,r2,36
 8015938:	10800023 	ldbuio	r2,0(r2)
 801593c:	10803fcc 	andi	r2,r2,255
 8015940:	1007883a 	mov	r3,r2
 8015944:	008200b4 	movhi	r2,2050
 8015948:	10bb0d04 	addi	r2,r2,-5068
 801594c:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 8015950:	d0a6f517 	ldw	r2,-25644(gp)
 8015954:	10800a17 	ldw	r2,40(r2)
 8015958:	10800944 	addi	r2,r2,37
 801595c:	10800023 	ldbuio	r2,0(r2)
 8015960:	10803fcc 	andi	r2,r2,255
 8015964:	1007883a 	mov	r3,r2
 8015968:	008200b4 	movhi	r2,2050
 801596c:	10bb0d04 	addi	r2,r2,-5068
 8015970:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 8015974:	d0a6f517 	ldw	r2,-25644(gp)
 8015978:	10800a17 	ldw	r2,40(r2)
 801597c:	10800984 	addi	r2,r2,38
 8015980:	10800023 	ldbuio	r2,0(r2)
 8015984:	10803fcc 	andi	r2,r2,255
 8015988:	1007883a 	mov	r3,r2
 801598c:	008200b4 	movhi	r2,2050
 8015990:	10bb0d04 	addi	r2,r2,-5068
 8015994:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 8015998:	008200b4 	movhi	r2,2050
 801599c:	10bb0d04 	addi	r2,r2,-5068
 80159a0:	1080040b 	ldhu	r2,16(r2)
 80159a4:	10ffffcc 	andi	r3,r2,65535
 80159a8:	008200b4 	movhi	r2,2050
 80159ac:	10bb0d04 	addi	r2,r2,-5068
 80159b0:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 80159b4:	008200b4 	movhi	r2,2050
 80159b8:	10bb0d04 	addi	r2,r2,-5068
 80159bc:	10c01117 	ldw	r3,68(r2)
 80159c0:	008200b4 	movhi	r2,2050
 80159c4:	10bb0d04 	addi	r2,r2,-5068
 80159c8:	1080068b 	ldhu	r2,26(r2)
 80159cc:	10bfffcc 	andi	r2,r2,65535
 80159d0:	1887883a 	add	r3,r3,r2
 80159d4:	008200b4 	movhi	r2,2050
 80159d8:	10bb0d04 	addi	r2,r2,-5068
 80159dc:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 80159e0:	008200b4 	movhi	r2,2050
 80159e4:	10bb0d04 	addi	r2,r2,-5068
 80159e8:	10c01217 	ldw	r3,72(r2)
 80159ec:	008200b4 	movhi	r2,2050
 80159f0:	10bb0d04 	addi	r2,r2,-5068
 80159f4:	1080068b 	ldhu	r2,26(r2)
 80159f8:	10bfffcc 	andi	r2,r2,65535
 80159fc:	1887883a 	add	r3,r3,r2
 8015a00:	008200b4 	movhi	r2,2050
 8015a04:	10bb0d04 	addi	r2,r2,-5068
 8015a08:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 8015a0c:	008200b4 	movhi	r2,2050
 8015a10:	10bb0d04 	addi	r2,r2,-5068
 8015a14:	14001317 	ldw	r16,76(r2)
 8015a18:	008200b4 	movhi	r2,2050
 8015a1c:	10bb0d04 	addi	r2,r2,-5068
 8015a20:	1080050b 	ldhu	r2,20(r2)
 8015a24:	10bfffcc 	andi	r2,r2,65535
 8015a28:	1006917a 	slli	r3,r2,5
 8015a2c:	008200b4 	movhi	r2,2050
 8015a30:	10bb0d04 	addi	r2,r2,-5068
 8015a34:	1080030b 	ldhu	r2,12(r2)
 8015a38:	10bfffcc 	andi	r2,r2,65535
 8015a3c:	100b883a 	mov	r5,r2
 8015a40:	1809883a 	mov	r4,r3
 8015a44:	8013a840 	call	8013a84 <__divsi3>
 8015a48:	8087883a 	add	r3,r16,r2
 8015a4c:	008200b4 	movhi	r2,2050
 8015a50:	10bb0d04 	addi	r2,r2,-5068
 8015a54:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 8015a58:	008200b4 	movhi	r2,2050
 8015a5c:	10bb0d04 	addi	r2,r2,-5068
 8015a60:	1080058b 	ldhu	r2,22(r2)
 8015a64:	10bfffcc 	andi	r2,r2,65535
 8015a68:	10000d26 	beq	r2,zero,8015aa0 <Check_for_DOS_FAT+0x4b4>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 8015a6c:	008200b4 	movhi	r2,2050
 8015a70:	10bb0d04 	addi	r2,r2,-5068
 8015a74:	1080058b 	ldhu	r2,22(r2)
 8015a78:	10ffffcc 	andi	r3,r2,65535
 8015a7c:	008200b4 	movhi	r2,2050
 8015a80:	10bb0d04 	addi	r2,r2,-5068
 8015a84:	10800383 	ldbu	r2,14(r2)
 8015a88:	10803fcc 	andi	r2,r2,255
 8015a8c:	100b883a 	mov	r5,r2
 8015a90:	1809883a 	mov	r4,r3
 8015a94:	8013a840 	call	8013a84 <__divsi3>
 8015a98:	e0bffc15 	stw	r2,-16(fp)
 8015a9c:	00000b06 	br	8015acc <Check_for_DOS_FAT+0x4e0>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 8015aa0:	008200b4 	movhi	r2,2050
 8015aa4:	10bb0d04 	addi	r2,r2,-5068
 8015aa8:	10c00917 	ldw	r3,36(r2)
 8015aac:	008200b4 	movhi	r2,2050
 8015ab0:	10bb0d04 	addi	r2,r2,-5068
 8015ab4:	10800383 	ldbu	r2,14(r2)
 8015ab8:	10803fcc 	andi	r2,r2,255
 8015abc:	100b883a 	mov	r5,r2
 8015ac0:	1809883a 	mov	r4,r3
 8015ac4:	8013b7c0 	call	8013b7c <__udivsi3>
 8015ac8:	e0bffc15 	stw	r2,-16(fp)
		}
		if (num_clusters < 4087)
 8015acc:	e0bffc17 	ldw	r2,-16(fp)
 8015ad0:	1083fdc8 	cmpgei	r2,r2,4087
 8015ad4:	1000051e 	bne	r2,zero,8015aec <Check_for_DOS_FAT+0x500>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 8015ad8:	008200b4 	movhi	r2,2050
 8015adc:	10bb0d04 	addi	r2,r2,-5068
 8015ae0:	00c00304 	movi	r3,12
 8015ae4:	10c01085 	stb	r3,66(r2)
 8015ae8:	00000c06 	br	8015b1c <Check_for_DOS_FAT+0x530>
		}
		else if (num_clusters <= 65517)
 8015aec:	e0bffc17 	ldw	r2,-16(fp)
 8015af0:	00fffb54 	movui	r3,65517
 8015af4:	18800516 	blt	r3,r2,8015b0c <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 8015af8:	008200b4 	movhi	r2,2050
 8015afc:	10bb0d04 	addi	r2,r2,-5068
 8015b00:	00c00404 	movi	r3,16
 8015b04:	10c01085 	stb	r3,66(r2)
 8015b08:	00000406 	br	8015b1c <Check_for_DOS_FAT+0x530>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 8015b0c:	008200b4 	movhi	r2,2050
 8015b10:	10bb0d04 	addi	r2,r2,-5068
 8015b14:	00c00804 	movi	r3,32
 8015b18:	10c01085 	stb	r3,66(r2)
		}
	    
		for (counter = 0; counter < 4; counter++)
 8015b1c:	e03ffb15 	stw	zero,-20(fp)
 8015b20:	00001106 	br	8015b68 <Check_for_DOS_FAT+0x57c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 8015b24:	d0a6f517 	ldw	r2,-25644(gp)
 8015b28:	10c00a17 	ldw	r3,40(r2)
 8015b2c:	e0bffb17 	ldw	r2,-20(fp)
 8015b30:	1885883a 	add	r2,r3,r2
 8015b34:	108009c4 	addi	r2,r2,39
 8015b38:	10800023 	ldbuio	r2,0(r2)
 8015b3c:	10803fcc 	andi	r2,r2,255
 8015b40:	1009883a 	mov	r4,r2
 8015b44:	008200b4 	movhi	r2,2050
 8015b48:	10bb0d04 	addi	r2,r2,-5068
 8015b4c:	e0fffb17 	ldw	r3,-20(fp)
 8015b50:	10c5883a 	add	r2,r2,r3
 8015b54:	10800ac4 	addi	r2,r2,43
 8015b58:	11000005 	stb	r4,0(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 8015b5c:	e0bffb17 	ldw	r2,-20(fp)
 8015b60:	10800044 	addi	r2,r2,1
 8015b64:	e0bffb15 	stw	r2,-20(fp)
 8015b68:	e0bffb17 	ldw	r2,-20(fp)
 8015b6c:	10800110 	cmplti	r2,r2,4
 8015b70:	103fec1e 	bne	r2,zero,8015b24 <_gp+0xffff0b1c>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 8015b74:	e03ffb15 	stw	zero,-20(fp)
 8015b78:	00001106 	br	8015bc0 <Check_for_DOS_FAT+0x5d4>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 8015b7c:	d0a6f517 	ldw	r2,-25644(gp)
 8015b80:	10c00a17 	ldw	r3,40(r2)
 8015b84:	e0bffb17 	ldw	r2,-20(fp)
 8015b88:	1885883a 	add	r2,r3,r2
 8015b8c:	10800ac4 	addi	r2,r2,43
 8015b90:	10800023 	ldbuio	r2,0(r2)
 8015b94:	10803fcc 	andi	r2,r2,255
 8015b98:	1009883a 	mov	r4,r2
 8015b9c:	008200b4 	movhi	r2,2050
 8015ba0:	10bb0d04 	addi	r2,r2,-5068
 8015ba4:	e0fffb17 	ldw	r3,-20(fp)
 8015ba8:	10c5883a 	add	r2,r2,r3
 8015bac:	10800bc4 	addi	r2,r2,47
 8015bb0:	11000005 	stb	r4,0(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 8015bb4:	e0bffb17 	ldw	r2,-20(fp)
 8015bb8:	10800044 	addi	r2,r2,1
 8015bbc:	e0bffb15 	stw	r2,-20(fp)
 8015bc0:	e0bffb17 	ldw	r2,-20(fp)
 8015bc4:	108002d0 	cmplti	r2,r2,11
 8015bc8:	103fec1e 	bne	r2,zero,8015b7c <_gp+0xffff0b74>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 8015bcc:	e03ffb15 	stw	zero,-20(fp)
 8015bd0:	00001106 	br	8015c18 <Check_for_DOS_FAT+0x62c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 8015bd4:	d0a6f517 	ldw	r2,-25644(gp)
 8015bd8:	10c00a17 	ldw	r3,40(r2)
 8015bdc:	e0bffb17 	ldw	r2,-20(fp)
 8015be0:	1885883a 	add	r2,r3,r2
 8015be4:	10800d84 	addi	r2,r2,54
 8015be8:	10800023 	ldbuio	r2,0(r2)
 8015bec:	10803fcc 	andi	r2,r2,255
 8015bf0:	1009883a 	mov	r4,r2
 8015bf4:	008200b4 	movhi	r2,2050
 8015bf8:	10bb0d04 	addi	r2,r2,-5068
 8015bfc:	e0fffb17 	ldw	r3,-20(fp)
 8015c00:	10c5883a 	add	r2,r2,r3
 8015c04:	10800e84 	addi	r2,r2,58
 8015c08:	11000005 	stb	r4,0(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 8015c0c:	e0bffb17 	ldw	r2,-20(fp)
 8015c10:	10800044 	addi	r2,r2,1
 8015c14:	e0bffb15 	stw	r2,-20(fp)
 8015c18:	e0bffb17 	ldw	r2,-20(fp)
 8015c1c:	10800210 	cmplti	r2,r2,8
 8015c20:	103fec1e 	bne	r2,zero,8015bd4 <_gp+0xffff0bcc>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 8015c24:	e03ffb15 	stw	zero,-20(fp)
 8015c28:	00000a06 	br	8015c54 <Check_for_DOS_FAT+0x668>
		{
			active_files[counter].in_use = false;
 8015c2c:	008200b4 	movhi	r2,2050
 8015c30:	10bb2204 	addi	r2,r2,-4984
 8015c34:	e0fffb17 	ldw	r3,-20(fp)
 8015c38:	180691ba 	slli	r3,r3,6
 8015c3c:	10c5883a 	add	r2,r2,r3
 8015c40:	10800f04 	addi	r2,r2,60
 8015c44:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 8015c48:	e0bffb17 	ldw	r2,-20(fp)
 8015c4c:	10800044 	addi	r2,r2,1
 8015c50:	e0bffb15 	stw	r2,-20(fp)
 8015c54:	e0bffb17 	ldw	r2,-20(fp)
 8015c58:	10800510 	cmplti	r2,r2,20
 8015c5c:	103ff31e 	bne	r2,zero,8015c2c <_gp+0xffff0c24>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 8015c60:	00800044 	movi	r2,1
 8015c64:	e0bffa15 	stw	r2,-24(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
	{
 8015c68:	00000106 	br	8015c70 <Check_for_DOS_FAT+0x684>
		}
		result = true;
	}
    else
    {
        result = false;
 8015c6c:	e03ffa15 	stw	zero,-24(fp)
    }
	return result;
 8015c70:	e0bffa17 	ldw	r2,-24(fp)
}
 8015c74:	e6ffff04 	addi	sp,fp,-4
 8015c78:	dfc00217 	ldw	ra,8(sp)
 8015c7c:	df000117 	ldw	fp,4(sp)
 8015c80:	dc000017 	ldw	r16,0(sp)
 8015c84:	dec00304 	addi	sp,sp,12
 8015c88:	f800283a 	ret

08015c8c <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 8015c8c:	defffc04 	addi	sp,sp,-16
 8015c90:	dfc00315 	stw	ra,12(sp)
 8015c94:	df000215 	stw	fp,8(sp)
 8015c98:	df000204 	addi	fp,sp,8
	bool result = false;
 8015c9c:	e03ffe15 	stw	zero,-8(fp)

	if (alt_up_sd_card_is_Present())
 8015ca0:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8015ca4:	10002e26 	beq	r2,zero,8015d60 <Look_for_FAT16+0xd4>
	{
		short int csd_file_format = *CSD_register_w0;
 8015ca8:	d0a6ef17 	ldw	r2,-25668(gp)
 8015cac:	1080000b 	ldhu	r2,0(r2)
 8015cb0:	e0bfff0d 	sth	r2,-4(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 8015cb4:	d026f315 	stw	zero,-25652(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 8015cb8:	d026f415 	stw	zero,-25648(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 8015cbc:	e0bfff0f 	ldh	r2,-4(fp)
 8015cc0:	10002716 	blt	r2,zero,8015d60 <Look_for_FAT16+0xd4>
 8015cc4:	e0bfff0b 	ldhu	r2,-4(fp)
 8015cc8:	10bfffcc 	andi	r2,r2,65535
 8015ccc:	1083000c 	andi	r2,r2,3072
 8015cd0:	10830020 	cmpeqi	r2,r2,3072
 8015cd4:	1000221e 	bne	r2,zero,8015d60 <Look_for_FAT16+0xd4>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 8015cd8:	e0bfff0b 	ldhu	r2,-4(fp)
 8015cdc:	10bfffcc 	andi	r2,r2,65535
 8015ce0:	1083000c 	andi	r2,r2,3072
 8015ce4:	10810018 	cmpnei	r2,r2,1024
 8015ce8:	1000031e 	bne	r2,zero,8015cf8 <Look_for_FAT16+0x6c>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 8015cec:	0009883a 	mov	r4,zero
 8015cf0:	80155ec0 	call	80155ec <Check_for_DOS_FAT>
 8015cf4:	e0bffe15 	stw	r2,-8(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 8015cf8:	e0bfff0b 	ldhu	r2,-4(fp)
 8015cfc:	10bfffcc 	andi	r2,r2,65535
 8015d00:	1083000c 	andi	r2,r2,3072
 8015d04:	1000061e 	bne	r2,zero,8015d20 <Look_for_FAT16+0x94>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 8015d08:	8014f400 	call	8014f40 <Check_for_Master_Boot_Record>
 8015d0c:	10000426 	beq	r2,zero,8015d20 <Look_for_FAT16+0x94>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 8015d10:	d0a6f317 	ldw	r2,-25652(gp)
 8015d14:	1009883a 	mov	r4,r2
 8015d18:	80155ec0 	call	80155ec <Check_for_DOS_FAT>
 8015d1c:	e0bffe15 	stw	r2,-8(fp)
				}                        
			}
			if (result == true)
 8015d20:	e0bffe17 	ldw	r2,-8(fp)
 8015d24:	10800058 	cmpnei	r2,r2,1
 8015d28:	10000d1e 	bne	r2,zero,8015d60 <Look_for_FAT16+0xd4>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 8015d2c:	008200b4 	movhi	r2,2050
 8015d30:	10bb0d04 	addi	r2,r2,-5068
 8015d34:	10801083 	ldbu	r2,66(r2)
 8015d38:	10803fcc 	andi	r2,r2,255
 8015d3c:	10800420 	cmpeqi	r2,r2,16
 8015d40:	1000021e 	bne	r2,zero,8015d4c <Look_for_FAT16+0xc0>
				{
					result = false;
 8015d44:	e03ffe15 	stw	zero,-8(fp)
 8015d48:	00000506 	br	8015d60 <Look_for_FAT16+0xd4>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 8015d4c:	008200b4 	movhi	r2,2050
 8015d50:	10bb0d04 	addi	r2,r2,-5068
 8015d54:	1080058b 	ldhu	r2,22(r2)
 8015d58:	10bfffcc 	andi	r2,r2,65535
 8015d5c:	d0a6f415 	stw	r2,-25648(gp)
				}
			}
		}
	}
	return result;
 8015d60:	e0bffe17 	ldw	r2,-8(fp)
}
 8015d64:	e037883a 	mov	sp,fp
 8015d68:	dfc00117 	ldw	ra,4(sp)
 8015d6c:	df000017 	ldw	fp,0(sp)
 8015d70:	dec00204 	addi	sp,sp,8
 8015d74:	f800283a 	ret

08015d78 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 8015d78:	defffb04 	addi	sp,sp,-20
 8015d7c:	dfc00415 	stw	ra,16(sp)
 8015d80:	df000315 	stw	fp,12(sp)
 8015d84:	df000304 	addi	fp,sp,12
 8015d88:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 8015d8c:	e13fff17 	ldw	r4,-4(fp)
 8015d90:	801abcc0 	call	801abcc <strlen>
 8015d94:	e0bffe15 	stw	r2,-8(fp)
    
    for (index = 0; index < length; index++)
 8015d98:	e03ffd15 	stw	zero,-12(fp)
 8015d9c:	00001e06 	br	8015e18 <filename_to_upper_case+0xa0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 8015da0:	e0bffd17 	ldw	r2,-12(fp)
 8015da4:	e0ffff17 	ldw	r3,-4(fp)
 8015da8:	1885883a 	add	r2,r3,r2
 8015dac:	10800003 	ldbu	r2,0(r2)
 8015db0:	10803fcc 	andi	r2,r2,255
 8015db4:	1080201c 	xori	r2,r2,128
 8015db8:	10bfe004 	addi	r2,r2,-128
 8015dbc:	10801850 	cmplti	r2,r2,97
 8015dc0:	1000121e 	bne	r2,zero,8015e0c <filename_to_upper_case+0x94>
 8015dc4:	e0bffd17 	ldw	r2,-12(fp)
 8015dc8:	e0ffff17 	ldw	r3,-4(fp)
 8015dcc:	1885883a 	add	r2,r3,r2
 8015dd0:	10800003 	ldbu	r2,0(r2)
 8015dd4:	10803fcc 	andi	r2,r2,255
 8015dd8:	1080201c 	xori	r2,r2,128
 8015ddc:	10bfe004 	addi	r2,r2,-128
 8015de0:	10801ec8 	cmpgei	r2,r2,123
 8015de4:	1000091e 	bne	r2,zero,8015e0c <filename_to_upper_case+0x94>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 8015de8:	e0bffd17 	ldw	r2,-12(fp)
 8015dec:	e0ffff17 	ldw	r3,-4(fp)
 8015df0:	1885883a 	add	r2,r3,r2
 8015df4:	e0fffd17 	ldw	r3,-12(fp)
 8015df8:	e13fff17 	ldw	r4,-4(fp)
 8015dfc:	20c7883a 	add	r3,r4,r3
 8015e00:	18c00003 	ldbu	r3,0(r3)
 8015e04:	18fff804 	addi	r3,r3,-32
 8015e08:	10c00005 	stb	r3,0(r2)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 8015e0c:	e0bffd17 	ldw	r2,-12(fp)
 8015e10:	10800044 	addi	r2,r2,1
 8015e14:	e0bffd15 	stw	r2,-12(fp)
 8015e18:	e0fffd17 	ldw	r3,-12(fp)
 8015e1c:	e0bffe17 	ldw	r2,-8(fp)
 8015e20:	18bfdf16 	blt	r3,r2,8015da0 <_gp+0xffff0d98>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 8015e24:	0001883a 	nop
 8015e28:	e037883a 	mov	sp,fp
 8015e2c:	dfc00117 	ldw	ra,4(sp)
 8015e30:	df000017 	ldw	fp,0(sp)
 8015e34:	dec00204 	addi	sp,sp,8
 8015e38:	f800283a 	ret

08015e3c <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 8015e3c:	defff804 	addi	sp,sp,-32
 8015e40:	dfc00715 	stw	ra,28(sp)
 8015e44:	df000615 	stw	fp,24(sp)
 8015e48:	df000604 	addi	fp,sp,24
 8015e4c:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 8015e50:	e13fff17 	ldw	r4,-4(fp)
 8015e54:	801abcc0 	call	801abcc <strlen>
 8015e58:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 8015e5c:	00bfffc4 	movi	r2,-1
 8015e60:	e0bffb15 	stw	r2,-20(fp)
    int last_period = -1;
 8015e64:	00bfffc4 	movi	r2,-1
 8015e68:	e0bffc15 	stw	r2,-16(fp)
    bool result = true;
 8015e6c:	00800044 	movi	r2,1
 8015e70:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 8015e74:	e03ffa15 	stw	zero,-24(fp)
 8015e78:	00006d06 	br	8016030 <check_file_name_for_FAT16_compliance+0x1f4>
    {
        if ((file_name[index] == ' ') ||
 8015e7c:	e0bffa17 	ldw	r2,-24(fp)
 8015e80:	e0ffff17 	ldw	r3,-4(fp)
 8015e84:	1885883a 	add	r2,r3,r2
 8015e88:	10800003 	ldbu	r2,0(r2)
 8015e8c:	10803fcc 	andi	r2,r2,255
 8015e90:	1080201c 	xori	r2,r2,128
 8015e94:	10bfe004 	addi	r2,r2,-128
 8015e98:	10800820 	cmpeqi	r2,r2,32
 8015e9c:	10003e1e 	bne	r2,zero,8015f98 <check_file_name_for_FAT16_compliance+0x15c>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 8015ea0:	e0bffa17 	ldw	r2,-24(fp)
 8015ea4:	10ffffc4 	addi	r3,r2,-1
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
 8015ea8:	e0bffb17 	ldw	r2,-20(fp)
 8015eac:	1880121e 	bne	r3,r2,8015ef8 <check_file_name_for_FAT16_compliance+0xbc>
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 8015eb0:	e0bffa17 	ldw	r2,-24(fp)
 8015eb4:	e0ffff17 	ldw	r3,-4(fp)
 8015eb8:	1885883a 	add	r2,r3,r2
 8015ebc:	10800003 	ldbu	r2,0(r2)
 8015ec0:	10803fcc 	andi	r2,r2,255
 8015ec4:	1080201c 	xori	r2,r2,128
 8015ec8:	10bfe004 	addi	r2,r2,-128
 8015ecc:	10801720 	cmpeqi	r2,r2,92
 8015ed0:	1000311e 	bne	r2,zero,8015f98 <check_file_name_for_FAT16_compliance+0x15c>
 8015ed4:	e0bffa17 	ldw	r2,-24(fp)
 8015ed8:	e0ffff17 	ldw	r3,-4(fp)
 8015edc:	1885883a 	add	r2,r3,r2
 8015ee0:	10800003 	ldbu	r2,0(r2)
 8015ee4:	10803fcc 	andi	r2,r2,255
 8015ee8:	1080201c 	xori	r2,r2,128
 8015eec:	10bfe004 	addi	r2,r2,-128
 8015ef0:	10800be0 	cmpeqi	r2,r2,47
 8015ef4:	1000281e 	bne	r2,zero,8015f98 <check_file_name_for_FAT16_compliance+0x15c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 8015ef8:	e0fffa17 	ldw	r3,-24(fp)
 8015efc:	e0bffc17 	ldw	r2,-16(fp)
 8015f00:	1885c83a 	sub	r2,r3,r2
    bool result = true;
    
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
 8015f04:	10800258 	cmpnei	r2,r2,9
 8015f08:	1000091e 	bne	r2,zero,8015f30 <check_file_name_for_FAT16_compliance+0xf4>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
 8015f0c:	e0bffa17 	ldw	r2,-24(fp)
 8015f10:	e0ffff17 	ldw	r3,-4(fp)
 8015f14:	1885883a 	add	r2,r3,r2
 8015f18:	10800003 	ldbu	r2,0(r2)
 8015f1c:	10803fcc 	andi	r2,r2,255
 8015f20:	1080201c 	xori	r2,r2,128
 8015f24:	10bfe004 	addi	r2,r2,-128
 8015f28:	10800b98 	cmpnei	r2,r2,46
 8015f2c:	10001a1e 	bne	r2,zero,8015f98 <check_file_name_for_FAT16_compliance+0x15c>
 8015f30:	e0fffb17 	ldw	r3,-20(fp)
 8015f34:	e0bffc17 	ldw	r2,-16(fp)
 8015f38:	18801926 	beq	r3,r2,8015fa0 <check_file_name_for_FAT16_compliance+0x164>
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 8015f3c:	e0fffa17 	ldw	r3,-24(fp)
 8015f40:	e0bffc17 	ldw	r2,-16(fp)
 8015f44:	1885c83a 	sub	r2,r3,r2
 8015f48:	10800110 	cmplti	r2,r2,4
 8015f4c:	1000141e 	bne	r2,zero,8015fa0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 8015f50:	e0bffa17 	ldw	r2,-24(fp)
 8015f54:	e0ffff17 	ldw	r3,-4(fp)
 8015f58:	1885883a 	add	r2,r3,r2
 8015f5c:	10800003 	ldbu	r2,0(r2)
    for(index = 0; index < length; index++)
    {
        if ((file_name[index] == ' ') ||
            ((last_dir_break_position == (index - 1)) && ((file_name[index] == '\\') || (file_name[index] == '/'))) ||
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
 8015f60:	10803fcc 	andi	r2,r2,255
 8015f64:	1080201c 	xori	r2,r2,128
 8015f68:	10bfe004 	addi	r2,r2,-128
 8015f6c:	10801720 	cmpeqi	r2,r2,92
 8015f70:	10000b1e 	bne	r2,zero,8015fa0 <check_file_name_for_FAT16_compliance+0x164>
             (file_name[index] != '\\') && (file_name[index] != '/'))
 8015f74:	e0bffa17 	ldw	r2,-24(fp)
 8015f78:	e0ffff17 	ldw	r3,-4(fp)
 8015f7c:	1885883a 	add	r2,r3,r2
 8015f80:	10800003 	ldbu	r2,0(r2)
 8015f84:	10803fcc 	andi	r2,r2,255
 8015f88:	1080201c 	xori	r2,r2,128
 8015f8c:	10bfe004 	addi	r2,r2,-128
 8015f90:	10800be0 	cmpeqi	r2,r2,47
 8015f94:	1000021e 	bne	r2,zero,8015fa0 <check_file_name_for_FAT16_compliance+0x164>
           )
        {
            result = false;
 8015f98:	e03ffd15 	stw	zero,-12(fp)
            break;
 8015f9c:	00002706 	br	801603c <check_file_name_for_FAT16_compliance+0x200>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 8015fa0:	e0bffa17 	ldw	r2,-24(fp)
 8015fa4:	e0ffff17 	ldw	r3,-4(fp)
 8015fa8:	1885883a 	add	r2,r3,r2
 8015fac:	10800003 	ldbu	r2,0(r2)
 8015fb0:	10803fcc 	andi	r2,r2,255
 8015fb4:	1080201c 	xori	r2,r2,128
 8015fb8:	10bfe004 	addi	r2,r2,-128
 8015fbc:	10801720 	cmpeqi	r2,r2,92
 8015fc0:	1000091e 	bne	r2,zero,8015fe8 <check_file_name_for_FAT16_compliance+0x1ac>
 8015fc4:	e0bffa17 	ldw	r2,-24(fp)
 8015fc8:	e0ffff17 	ldw	r3,-4(fp)
 8015fcc:	1885883a 	add	r2,r3,r2
 8015fd0:	10800003 	ldbu	r2,0(r2)
 8015fd4:	10803fcc 	andi	r2,r2,255
 8015fd8:	1080201c 	xori	r2,r2,128
 8015fdc:	10bfe004 	addi	r2,r2,-128
 8015fe0:	10800bd8 	cmpnei	r2,r2,47
 8015fe4:	1000041e 	bne	r2,zero,8015ff8 <check_file_name_for_FAT16_compliance+0x1bc>
        {
            last_period = index;
 8015fe8:	e0bffa17 	ldw	r2,-24(fp)
 8015fec:	e0bffc15 	stw	r2,-16(fp)
            last_dir_break_position = index;
 8015ff0:	e0bffa17 	ldw	r2,-24(fp)
 8015ff4:	e0bffb15 	stw	r2,-20(fp)
        }
        if (file_name[index] == '.')
 8015ff8:	e0bffa17 	ldw	r2,-24(fp)
 8015ffc:	e0ffff17 	ldw	r3,-4(fp)
 8016000:	1885883a 	add	r2,r3,r2
 8016004:	10800003 	ldbu	r2,0(r2)
 8016008:	10803fcc 	andi	r2,r2,255
 801600c:	1080201c 	xori	r2,r2,128
 8016010:	10bfe004 	addi	r2,r2,-128
 8016014:	10800b98 	cmpnei	r2,r2,46
 8016018:	1000021e 	bne	r2,zero,8016024 <check_file_name_for_FAT16_compliance+0x1e8>
        {
            last_period = index;
 801601c:	e0bffa17 	ldw	r2,-24(fp)
 8016020:	e0bffc15 	stw	r2,-16(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 8016024:	e0bffa17 	ldw	r2,-24(fp)
 8016028:	10800044 	addi	r2,r2,1
 801602c:	e0bffa15 	stw	r2,-24(fp)
 8016030:	e0fffa17 	ldw	r3,-24(fp)
 8016034:	e0bffe17 	ldw	r2,-8(fp)
 8016038:	18bf9016 	blt	r3,r2,8015e7c <_gp+0xffff0e74>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 801603c:	e0bffe17 	ldw	r2,-8(fp)
 8016040:	10bfffc4 	addi	r2,r2,-1
 8016044:	e0ffff17 	ldw	r3,-4(fp)
 8016048:	1885883a 	add	r2,r3,r2
 801604c:	10800003 	ldbu	r2,0(r2)
 8016050:	10803fcc 	andi	r2,r2,255
 8016054:	1080201c 	xori	r2,r2,128
 8016058:	10bfe004 	addi	r2,r2,-128
 801605c:	10801720 	cmpeqi	r2,r2,92
 8016060:	10000a1e 	bne	r2,zero,801608c <check_file_name_for_FAT16_compliance+0x250>
 8016064:	e0bffe17 	ldw	r2,-8(fp)
 8016068:	10bfffc4 	addi	r2,r2,-1
 801606c:	e0ffff17 	ldw	r3,-4(fp)
 8016070:	1885883a 	add	r2,r3,r2
 8016074:	10800003 	ldbu	r2,0(r2)
 8016078:	10803fcc 	andi	r2,r2,255
 801607c:	1080201c 	xori	r2,r2,128
 8016080:	10bfe004 	addi	r2,r2,-128
 8016084:	10800bd8 	cmpnei	r2,r2,47
 8016088:	1000011e 	bne	r2,zero,8016090 <check_file_name_for_FAT16_compliance+0x254>
    {
        result = false;
 801608c:	e03ffd15 	stw	zero,-12(fp)
    }
    return result;
 8016090:	e0bffd17 	ldw	r2,-12(fp)
}
 8016094:	e037883a 	mov	sp,fp
 8016098:	dfc00117 	ldw	ra,4(sp)
 801609c:	df000017 	ldw	fp,0(sp)
 80160a0:	dec00204 	addi	sp,sp,8
 80160a4:	f800283a 	ret

080160a8 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 80160a8:	defffb04 	addi	sp,sp,-20
 80160ac:	dfc00415 	stw	ra,16(sp)
 80160b0:	df000315 	stw	fp,12(sp)
 80160b4:	df000304 	addi	fp,sp,12
 80160b8:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 80160bc:	e03ffd15 	stw	zero,-12(fp)
    int length = strlen(name);
 80160c0:	e13fff17 	ldw	r4,-4(fp)
 80160c4:	801abcc0 	call	801abcc <strlen>
 80160c8:	e0bffe15 	stw	r2,-8(fp)
    
    for(index = 0; index < length; index++)
 80160cc:	e03ffd15 	stw	zero,-12(fp)
 80160d0:	00001506 	br	8016128 <get_dir_divider_location+0x80>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 80160d4:	e0bffd17 	ldw	r2,-12(fp)
 80160d8:	e0ffff17 	ldw	r3,-4(fp)
 80160dc:	1885883a 	add	r2,r3,r2
 80160e0:	10800003 	ldbu	r2,0(r2)
 80160e4:	10803fcc 	andi	r2,r2,255
 80160e8:	1080201c 	xori	r2,r2,128
 80160ec:	10bfe004 	addi	r2,r2,-128
 80160f0:	10801720 	cmpeqi	r2,r2,92
 80160f4:	10000f1e 	bne	r2,zero,8016134 <get_dir_divider_location+0x8c>
 80160f8:	e0bffd17 	ldw	r2,-12(fp)
 80160fc:	e0ffff17 	ldw	r3,-4(fp)
 8016100:	1885883a 	add	r2,r3,r2
 8016104:	10800003 	ldbu	r2,0(r2)
 8016108:	10803fcc 	andi	r2,r2,255
 801610c:	1080201c 	xori	r2,r2,128
 8016110:	10bfe004 	addi	r2,r2,-128
 8016114:	10800be0 	cmpeqi	r2,r2,47
 8016118:	1000061e 	bne	r2,zero,8016134 <get_dir_divider_location+0x8c>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 801611c:	e0bffd17 	ldw	r2,-12(fp)
 8016120:	10800044 	addi	r2,r2,1
 8016124:	e0bffd15 	stw	r2,-12(fp)
 8016128:	e0fffd17 	ldw	r3,-12(fp)
 801612c:	e0bffe17 	ldw	r2,-8(fp)
 8016130:	18bfe816 	blt	r3,r2,80160d4 <_gp+0xffff10cc>
        {
            break;
        }
    }
    
    if (index == length)
 8016134:	e0fffd17 	ldw	r3,-12(fp)
 8016138:	e0bffe17 	ldw	r2,-8(fp)
 801613c:	1880021e 	bne	r3,r2,8016148 <get_dir_divider_location+0xa0>
    {
        index = -1;
 8016140:	00bfffc4 	movi	r2,-1
 8016144:	e0bffd15 	stw	r2,-12(fp)
    }
    
    return index;
 8016148:	e0bffd17 	ldw	r2,-12(fp)
}
 801614c:	e037883a 	mov	sp,fp
 8016150:	dfc00117 	ldw	ra,4(sp)
 8016154:	df000017 	ldw	fp,0(sp)
 8016158:	dec00204 	addi	sp,sp,8
 801615c:	f800283a 	ret

08016160 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 8016160:	defffa04 	addi	sp,sp,-24
 8016164:	df000515 	stw	fp,20(sp)
 8016168:	df000504 	addi	fp,sp,20
 801616c:	e13ffd15 	stw	r4,-12(fp)
 8016170:	e17ffe15 	stw	r5,-8(fp)
 8016174:	e1bfff15 	stw	r6,-4(fp)
    bool match = true;
 8016178:	00800044 	movi	r2,1
 801617c:	e0bffb15 	stw	r2,-20(fp)
	int index;

    for (index = 0; index < 8; index++)
 8016180:	e03ffc15 	stw	zero,-16(fp)
 8016184:	00004606 	br	80162a0 <match_file_record_to_name_ext+0x140>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 8016188:	e0fffd17 	ldw	r3,-12(fp)
 801618c:	e0bffc17 	ldw	r2,-16(fp)
 8016190:	1885883a 	add	r2,r3,r2
 8016194:	10800003 	ldbu	r2,0(r2)
 8016198:	10803fcc 	andi	r2,r2,255
 801619c:	10801870 	cmpltui	r2,r2,97
 80161a0:	1000101e 	bne	r2,zero,80161e4 <match_file_record_to_name_ext+0x84>
 80161a4:	e0fffd17 	ldw	r3,-12(fp)
 80161a8:	e0bffc17 	ldw	r2,-16(fp)
 80161ac:	1885883a 	add	r2,r3,r2
 80161b0:	10800003 	ldbu	r2,0(r2)
 80161b4:	10803fcc 	andi	r2,r2,255
 80161b8:	10801ee8 	cmpgeui	r2,r2,123
 80161bc:	1000091e 	bne	r2,zero,80161e4 <match_file_record_to_name_ext+0x84>
 80161c0:	e0fffd17 	ldw	r3,-12(fp)
 80161c4:	e0bffc17 	ldw	r2,-16(fp)
 80161c8:	1885883a 	add	r2,r3,r2
 80161cc:	10800003 	ldbu	r2,0(r2)
 80161d0:	10bff804 	addi	r2,r2,-32
 80161d4:	10c03fcc 	andi	r3,r2,255
 80161d8:	18c0201c 	xori	r3,r3,128
 80161dc:	18ffe004 	addi	r3,r3,-128
 80161e0:	00000706 	br	8016200 <match_file_record_to_name_ext+0xa0>
 80161e4:	e0fffd17 	ldw	r3,-12(fp)
 80161e8:	e0bffc17 	ldw	r2,-16(fp)
 80161ec:	1885883a 	add	r2,r3,r2
 80161f0:	10800003 	ldbu	r2,0(r2)
 80161f4:	10c03fcc 	andi	r3,r2,255
 80161f8:	18c0201c 	xori	r3,r3,128
 80161fc:	18ffe004 	addi	r3,r3,-128
 8016200:	e0bffc17 	ldw	r2,-16(fp)
 8016204:	e13ffe17 	ldw	r4,-8(fp)
 8016208:	2085883a 	add	r2,r4,r2
 801620c:	10800003 	ldbu	r2,0(r2)
 8016210:	10803fcc 	andi	r2,r2,255
 8016214:	1080201c 	xori	r2,r2,128
 8016218:	10bfe004 	addi	r2,r2,-128
 801621c:	10801850 	cmplti	r2,r2,97
 8016220:	1000121e 	bne	r2,zero,801626c <match_file_record_to_name_ext+0x10c>
 8016224:	e0bffc17 	ldw	r2,-16(fp)
 8016228:	e13ffe17 	ldw	r4,-8(fp)
 801622c:	2085883a 	add	r2,r4,r2
 8016230:	10800003 	ldbu	r2,0(r2)
 8016234:	10803fcc 	andi	r2,r2,255
 8016238:	1080201c 	xori	r2,r2,128
 801623c:	10bfe004 	addi	r2,r2,-128
 8016240:	10801ec8 	cmpgei	r2,r2,123
 8016244:	1000091e 	bne	r2,zero,801626c <match_file_record_to_name_ext+0x10c>
 8016248:	e0bffc17 	ldw	r2,-16(fp)
 801624c:	e13ffe17 	ldw	r4,-8(fp)
 8016250:	2085883a 	add	r2,r4,r2
 8016254:	10800003 	ldbu	r2,0(r2)
 8016258:	10bff804 	addi	r2,r2,-32
 801625c:	10803fcc 	andi	r2,r2,255
 8016260:	1080201c 	xori	r2,r2,128
 8016264:	10bfe004 	addi	r2,r2,-128
 8016268:	00000706 	br	8016288 <match_file_record_to_name_ext+0x128>
 801626c:	e0bffc17 	ldw	r2,-16(fp)
 8016270:	e13ffe17 	ldw	r4,-8(fp)
 8016274:	2085883a 	add	r2,r4,r2
 8016278:	10800003 	ldbu	r2,0(r2)
 801627c:	10803fcc 	andi	r2,r2,255
 8016280:	1080201c 	xori	r2,r2,128
 8016284:	10bfe004 	addi	r2,r2,-128
 8016288:	18800226 	beq	r3,r2,8016294 <match_file_record_to_name_ext+0x134>
        {
            match = false;
 801628c:	e03ffb15 	stw	zero,-20(fp)
			break;
 8016290:	00000606 	br	80162ac <match_file_record_to_name_ext+0x14c>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 8016294:	e0bffc17 	ldw	r2,-16(fp)
 8016298:	10800044 	addi	r2,r2,1
 801629c:	e0bffc15 	stw	r2,-16(fp)
 80162a0:	e0bffc17 	ldw	r2,-16(fp)
 80162a4:	10800210 	cmplti	r2,r2,8
 80162a8:	103fb71e 	bne	r2,zero,8016188 <_gp+0xffff1180>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 80162ac:	e03ffc15 	stw	zero,-16(fp)
 80162b0:	00004a06 	br	80163dc <match_file_record_to_name_ext+0x27c>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 80162b4:	e0fffd17 	ldw	r3,-12(fp)
 80162b8:	e0bffc17 	ldw	r2,-16(fp)
 80162bc:	1885883a 	add	r2,r3,r2
 80162c0:	10800204 	addi	r2,r2,8
 80162c4:	10800003 	ldbu	r2,0(r2)
 80162c8:	10803fcc 	andi	r2,r2,255
 80162cc:	10801870 	cmpltui	r2,r2,97
 80162d0:	1000121e 	bne	r2,zero,801631c <match_file_record_to_name_ext+0x1bc>
 80162d4:	e0fffd17 	ldw	r3,-12(fp)
 80162d8:	e0bffc17 	ldw	r2,-16(fp)
 80162dc:	1885883a 	add	r2,r3,r2
 80162e0:	10800204 	addi	r2,r2,8
 80162e4:	10800003 	ldbu	r2,0(r2)
 80162e8:	10803fcc 	andi	r2,r2,255
 80162ec:	10801ee8 	cmpgeui	r2,r2,123
 80162f0:	10000a1e 	bne	r2,zero,801631c <match_file_record_to_name_ext+0x1bc>
 80162f4:	e0fffd17 	ldw	r3,-12(fp)
 80162f8:	e0bffc17 	ldw	r2,-16(fp)
 80162fc:	1885883a 	add	r2,r3,r2
 8016300:	10800204 	addi	r2,r2,8
 8016304:	10800003 	ldbu	r2,0(r2)
 8016308:	10bff804 	addi	r2,r2,-32
 801630c:	10c03fcc 	andi	r3,r2,255
 8016310:	18c0201c 	xori	r3,r3,128
 8016314:	18ffe004 	addi	r3,r3,-128
 8016318:	00000806 	br	801633c <match_file_record_to_name_ext+0x1dc>
 801631c:	e0fffd17 	ldw	r3,-12(fp)
 8016320:	e0bffc17 	ldw	r2,-16(fp)
 8016324:	1885883a 	add	r2,r3,r2
 8016328:	10800204 	addi	r2,r2,8
 801632c:	10800003 	ldbu	r2,0(r2)
 8016330:	10c03fcc 	andi	r3,r2,255
 8016334:	18c0201c 	xori	r3,r3,128
 8016338:	18ffe004 	addi	r3,r3,-128
 801633c:	e0bffc17 	ldw	r2,-16(fp)
 8016340:	e13fff17 	ldw	r4,-4(fp)
 8016344:	2085883a 	add	r2,r4,r2
 8016348:	10800003 	ldbu	r2,0(r2)
 801634c:	10803fcc 	andi	r2,r2,255
 8016350:	1080201c 	xori	r2,r2,128
 8016354:	10bfe004 	addi	r2,r2,-128
 8016358:	10801850 	cmplti	r2,r2,97
 801635c:	1000121e 	bne	r2,zero,80163a8 <match_file_record_to_name_ext+0x248>
 8016360:	e0bffc17 	ldw	r2,-16(fp)
 8016364:	e13fff17 	ldw	r4,-4(fp)
 8016368:	2085883a 	add	r2,r4,r2
 801636c:	10800003 	ldbu	r2,0(r2)
 8016370:	10803fcc 	andi	r2,r2,255
 8016374:	1080201c 	xori	r2,r2,128
 8016378:	10bfe004 	addi	r2,r2,-128
 801637c:	10801ec8 	cmpgei	r2,r2,123
 8016380:	1000091e 	bne	r2,zero,80163a8 <match_file_record_to_name_ext+0x248>
 8016384:	e0bffc17 	ldw	r2,-16(fp)
 8016388:	e13fff17 	ldw	r4,-4(fp)
 801638c:	2085883a 	add	r2,r4,r2
 8016390:	10800003 	ldbu	r2,0(r2)
 8016394:	10bff804 	addi	r2,r2,-32
 8016398:	10803fcc 	andi	r2,r2,255
 801639c:	1080201c 	xori	r2,r2,128
 80163a0:	10bfe004 	addi	r2,r2,-128
 80163a4:	00000706 	br	80163c4 <match_file_record_to_name_ext+0x264>
 80163a8:	e0bffc17 	ldw	r2,-16(fp)
 80163ac:	e13fff17 	ldw	r4,-4(fp)
 80163b0:	2085883a 	add	r2,r4,r2
 80163b4:	10800003 	ldbu	r2,0(r2)
 80163b8:	10803fcc 	andi	r2,r2,255
 80163bc:	1080201c 	xori	r2,r2,128
 80163c0:	10bfe004 	addi	r2,r2,-128
 80163c4:	18800226 	beq	r3,r2,80163d0 <match_file_record_to_name_ext+0x270>
        {
            match = false;
 80163c8:	e03ffb15 	stw	zero,-20(fp)
			break;
 80163cc:	00000606 	br	80163e8 <match_file_record_to_name_ext+0x288>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 80163d0:	e0bffc17 	ldw	r2,-16(fp)
 80163d4:	10800044 	addi	r2,r2,1
 80163d8:	e0bffc15 	stw	r2,-16(fp)
 80163dc:	e0bffc17 	ldw	r2,-16(fp)
 80163e0:	108000d0 	cmplti	r2,r2,3
 80163e4:	103fb31e 	bne	r2,zero,80162b4 <_gp+0xffff12ac>
        {
            match = false;
			break;
        }
    }
	return match;
 80163e8:	e0bffb17 	ldw	r2,-20(fp)
}
 80163ec:	e037883a 	mov	sp,fp
 80163f0:	df000017 	ldw	fp,0(sp)
 80163f4:	dec00104 	addi	sp,sp,4
 80163f8:	f800283a 	ret

080163fc <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 80163fc:	deffe704 	addi	sp,sp,-100
 8016400:	dfc01815 	stw	ra,96(sp)
 8016404:	df001715 	stw	fp,92(sp)
 8016408:	df001704 	addi	fp,sp,92
 801640c:	e13ffd15 	stw	r4,-12(fp)
 8016410:	e17ffe15 	stw	r5,-8(fp)
 8016414:	e1bfff15 	stw	r6,-4(fp)
    bool result = false;
 8016418:	e03fe915 	stw	zero,-92(fp)
    int home_dir_cluster = 0;
 801641c:	e03fea15 	stw	zero,-88(fp)
    int location, index;
    int start_location = 0;
 8016420:	e03fed15 	stw	zero,-76(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 8016424:	e13ffd17 	ldw	r4,-12(fp)
 8016428:	80160a80 	call	80160a8 <get_dir_divider_location>
 801642c:	e0bfeb15 	stw	r2,-84(fp)
    while (location > 0)
 8016430:	00013306 	br	8016900 <get_home_directory_cluster_for_file+0x504>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 8016434:	00800804 	movi	r2,32
 8016438:	e0bff905 	stb	r2,-28(fp)
 801643c:	00800804 	movi	r2,32
 8016440:	e0bff945 	stb	r2,-27(fp)
 8016444:	00800804 	movi	r2,32
 8016448:	e0bff985 	stb	r2,-26(fp)
 801644c:	00800804 	movi	r2,32
 8016450:	e0bff9c5 	stb	r2,-25(fp)
 8016454:	00800804 	movi	r2,32
 8016458:	e0bffa05 	stb	r2,-24(fp)
 801645c:	00800804 	movi	r2,32
 8016460:	e0bffa45 	stb	r2,-23(fp)
 8016464:	00800804 	movi	r2,32
 8016468:	e0bffa85 	stb	r2,-22(fp)
 801646c:	00800804 	movi	r2,32
 8016470:	e0bffac5 	stb	r2,-21(fp)
        char extension[3] = { ' ', ' ', ' ' };
 8016474:	00800804 	movi	r2,32
 8016478:	e0bffb05 	stb	r2,-20(fp)
 801647c:	00800804 	movi	r2,32
 8016480:	e0bffb45 	stb	r2,-19(fp)
 8016484:	00800804 	movi	r2,32
 8016488:	e0bffb85 	stb	r2,-18(fp)
        int ext_index = -1;
 801648c:	00bfffc4 	movi	r2,-1
 8016490:	e0bfee15 	stw	r2,-72(fp)
        int new_cluster = home_dir_cluster;
 8016494:	e0bfea17 	ldw	r2,-88(fp)
 8016498:	e0bfef15 	stw	r2,-68(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 801649c:	e03fec15 	stw	zero,-80(fp)
 80164a0:	00002d06 	br	8016558 <get_home_directory_cluster_for_file+0x15c>
        {
            if (file_name[index+start_location] == '.')
 80164a4:	e0ffec17 	ldw	r3,-80(fp)
 80164a8:	e0bfed17 	ldw	r2,-76(fp)
 80164ac:	1885883a 	add	r2,r3,r2
 80164b0:	1007883a 	mov	r3,r2
 80164b4:	e0bffd17 	ldw	r2,-12(fp)
 80164b8:	10c5883a 	add	r2,r2,r3
 80164bc:	10800003 	ldbu	r2,0(r2)
 80164c0:	10803fcc 	andi	r2,r2,255
 80164c4:	1080201c 	xori	r2,r2,128
 80164c8:	10bfe004 	addi	r2,r2,-128
 80164cc:	10800b98 	cmpnei	r2,r2,46
 80164d0:	1000031e 	bne	r2,zero,80164e0 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 80164d4:	e0bfec17 	ldw	r2,-80(fp)
 80164d8:	e0bfee15 	stw	r2,-72(fp)
 80164dc:	00001b06 	br	801654c <get_home_directory_cluster_for_file+0x150>
            }
            else if (ext_index < 0)
 80164e0:	e0bfee17 	ldw	r2,-72(fp)
 80164e4:	10000c0e 	bge	r2,zero,8016518 <get_home_directory_cluster_for_file+0x11c>
            {
                name[index] = file_name[index+start_location];
 80164e8:	e0ffec17 	ldw	r3,-80(fp)
 80164ec:	e0bfed17 	ldw	r2,-76(fp)
 80164f0:	1885883a 	add	r2,r3,r2
 80164f4:	1007883a 	mov	r3,r2
 80164f8:	e0bffd17 	ldw	r2,-12(fp)
 80164fc:	10c5883a 	add	r2,r2,r3
 8016500:	10c00003 	ldbu	r3,0(r2)
 8016504:	e13ff904 	addi	r4,fp,-28
 8016508:	e0bfec17 	ldw	r2,-80(fp)
 801650c:	2085883a 	add	r2,r4,r2
 8016510:	10c00005 	stb	r3,0(r2)
 8016514:	00000d06 	br	801654c <get_home_directory_cluster_for_file+0x150>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 8016518:	e0ffec17 	ldw	r3,-80(fp)
 801651c:	e0bfee17 	ldw	r2,-72(fp)
 8016520:	1885c83a 	sub	r2,r3,r2
 8016524:	e13fec17 	ldw	r4,-80(fp)
 8016528:	e0ffed17 	ldw	r3,-76(fp)
 801652c:	20c7883a 	add	r3,r4,r3
 8016530:	1809883a 	mov	r4,r3
 8016534:	e0fffd17 	ldw	r3,-12(fp)
 8016538:	1907883a 	add	r3,r3,r4
 801653c:	18c00003 	ldbu	r3,0(r3)
 8016540:	e13ffb04 	addi	r4,fp,-20
 8016544:	2085883a 	add	r2,r4,r2
 8016548:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 801654c:	e0bfec17 	ldw	r2,-80(fp)
 8016550:	10800044 	addi	r2,r2,1
 8016554:	e0bfec15 	stw	r2,-80(fp)
 8016558:	e0ffec17 	ldw	r3,-80(fp)
 801655c:	e0bfeb17 	ldw	r2,-84(fp)
 8016560:	18bfd016 	blt	r3,r2,80164a4 <_gp+0xffff149c>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 8016564:	e0bfea17 	ldw	r2,-88(fp)
 8016568:	10005e1e 	bne	r2,zero,80166e4 <get_home_directory_cluster_for_file+0x2e8>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 801656c:	008200b4 	movhi	r2,2050
 8016570:	10bb0d04 	addi	r2,r2,-5068
 8016574:	1080050b 	ldhu	r2,20(r2)
 8016578:	10bfffcc 	andi	r2,r2,65535
 801657c:	1006917a 	slli	r3,r2,5
 8016580:	008200b4 	movhi	r2,2050
 8016584:	10bb0d04 	addi	r2,r2,-5068
 8016588:	1080030b 	ldhu	r2,12(r2)
 801658c:	10bfffcc 	andi	r2,r2,65535
 8016590:	100b883a 	mov	r5,r2
 8016594:	1809883a 	mov	r4,r3
 8016598:	8013a840 	call	8013a84 <__divsi3>
 801659c:	e0bff715 	stw	r2,-36(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 80165a0:	e03ff015 	stw	zero,-64(fp)
 80165a4:	00003b06 	br	8016694 <get_home_directory_cluster_for_file+0x298>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 80165a8:	008200b4 	movhi	r2,2050
 80165ac:	10bb0d04 	addi	r2,r2,-5068
 80165b0:	10c01317 	ldw	r3,76(r2)
 80165b4:	e0bff017 	ldw	r2,-64(fp)
 80165b8:	1885883a 	add	r2,r3,r2
 80165bc:	1007883a 	mov	r3,r2
 80165c0:	d0a6f317 	ldw	r2,-25652(gp)
 80165c4:	100b883a 	mov	r5,r2
 80165c8:	1809883a 	mov	r4,r3
 80165cc:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 80165d0:	10003426 	beq	r2,zero,80166a4 <get_home_directory_cluster_for_file+0x2a8>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 80165d4:	e03ff115 	stw	zero,-60(fp)
 80165d8:	00002506 	br	8016670 <get_home_directory_cluster_for_file+0x274>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 80165dc:	e0bff117 	ldw	r2,-60(fp)
 80165e0:	1004917a 	slli	r2,r2,5
 80165e4:	e0fff017 	ldw	r3,-64(fp)
 80165e8:	180f883a 	mov	r7,r3
 80165ec:	000d883a 	mov	r6,zero
 80165f0:	e17fff17 	ldw	r5,-4(fp)
 80165f4:	1009883a 	mov	r4,r2
 80165f8:	80150e40 	call	80150e4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 80165fc:	e0bfff17 	ldw	r2,-4(fp)
 8016600:	10800003 	ldbu	r2,0(r2)
 8016604:	10803fcc 	andi	r2,r2,255
 8016608:	10803960 	cmpeqi	r2,r2,229
 801660c:	1000151e 	bne	r2,zero,8016664 <get_home_directory_cluster_for_file+0x268>
 8016610:	e0bfff17 	ldw	r2,-4(fp)
 8016614:	10800003 	ldbu	r2,0(r2)
 8016618:	10803fcc 	andi	r2,r2,255
 801661c:	10001126 	beq	r2,zero,8016664 <get_home_directory_cluster_for_file+0x268>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 8016620:	e0fffb04 	addi	r3,fp,-20
 8016624:	e0bff904 	addi	r2,fp,-28
 8016628:	180d883a 	mov	r6,r3
 801662c:	100b883a 	mov	r5,r2
 8016630:	e13fff17 	ldw	r4,-4(fp)
 8016634:	80161600 	call	8016160 <match_file_record_to_name_ext>
 8016638:	e0bff815 	stw	r2,-32(fp)
                            if (match)
 801663c:	e0bff817 	ldw	r2,-32(fp)
 8016640:	10000826 	beq	r2,zero,8016664 <get_home_directory_cluster_for_file+0x268>
                            {
                                new_cluster = file_record->start_cluster_index;
 8016644:	e0bfff17 	ldw	r2,-4(fp)
 8016648:	1080058b 	ldhu	r2,22(r2)
 801664c:	10bfffcc 	andi	r2,r2,65535
 8016650:	e0bfef15 	stw	r2,-68(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 8016654:	e0bfff17 	ldw	r2,-4(fp)
 8016658:	00c00044 	movi	r3,1
 801665c:	10c00a15 	stw	r3,40(r2)
                                break;
 8016660:	00000606 	br	801667c <get_home_directory_cluster_for_file+0x280>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8016664:	e0bff117 	ldw	r2,-60(fp)
 8016668:	10800044 	addi	r2,r2,1
 801666c:	e0bff115 	stw	r2,-60(fp)
 8016670:	e0bff117 	ldw	r2,-60(fp)
 8016674:	10800410 	cmplti	r2,r2,16
 8016678:	103fd81e 	bne	r2,zero,80165dc <_gp+0xffff15d4>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 801667c:	e0ffef17 	ldw	r3,-68(fp)
 8016680:	e0bfea17 	ldw	r2,-88(fp)
 8016684:	1880091e 	bne	r3,r2,80166ac <get_home_directory_cluster_for_file+0x2b0>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8016688:	e0bff017 	ldw	r2,-64(fp)
 801668c:	10800044 	addi	r2,r2,1
 8016690:	e0bff015 	stw	r2,-64(fp)
 8016694:	e0fff017 	ldw	r3,-64(fp)
 8016698:	e0bff717 	ldw	r2,-36(fp)
 801669c:	18bfc216 	blt	r3,r2,80165a8 <_gp+0xffff15a0>
 80166a0:	00000306 	br	80166b0 <get_home_directory_cluster_for_file+0x2b4>
                        }
                    }
                }
                else
                {
                    break;
 80166a4:	0001883a 	nop
 80166a8:	00000106 	br	80166b0 <get_home_directory_cluster_for_file+0x2b4>
                }
                if (new_cluster != home_dir_cluster)
                {
                    break;
 80166ac:	0001883a 	nop
                }
            }
            if (new_cluster != home_dir_cluster)
 80166b0:	e0ffef17 	ldw	r3,-68(fp)
 80166b4:	e0bfea17 	ldw	r2,-88(fp)
 80166b8:	18800826 	beq	r3,r2,80166dc <get_home_directory_cluster_for_file+0x2e0>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 80166bc:	e0bfef17 	ldw	r2,-68(fp)
 80166c0:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 80166c4:	e0ffed17 	ldw	r3,-76(fp)
 80166c8:	e0bfeb17 	ldw	r2,-84(fp)
 80166cc:	1885883a 	add	r2,r3,r2
 80166d0:	10800044 	addi	r2,r2,1
 80166d4:	e0bfed15 	stw	r2,-76(fp)
 80166d8:	00007f06 	br	80168d8 <get_home_directory_cluster_for_file+0x4dc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 80166dc:	0005883a 	mov	r2,zero
 80166e0:	00009306 	br	8016930 <get_home_directory_cluster_for_file+0x534>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 80166e4:	e0bfea17 	ldw	r2,-88(fp)
 80166e8:	e0bff415 	stw	r2,-48(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 80166ec:	e0bff417 	ldw	r2,-48(fp)
 80166f0:	10ffff84 	addi	r3,r2,-2
 80166f4:	008200b4 	movhi	r2,2050
 80166f8:	10bb0d04 	addi	r2,r2,-5068
 80166fc:	10800383 	ldbu	r2,14(r2)
 8016700:	10803fcc 	andi	r2,r2,255
 8016704:	100b883a 	mov	r5,r2
 8016708:	1809883a 	mov	r4,r3
 801670c:	8013c380 	call	8013c38 <__mulsi3>
 8016710:	1007883a 	mov	r3,r2
 8016714:	008200b4 	movhi	r2,2050
 8016718:	10bb0d04 	addi	r2,r2,-5068
 801671c:	10801417 	ldw	r2,80(r2)
 8016720:	1885883a 	add	r2,r3,r2
 8016724:	e0bff515 	stw	r2,-44(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8016728:	e03ff215 	stw	zero,-56(fp)
 801672c:	00003606 	br	8016808 <get_home_directory_cluster_for_file+0x40c>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8016730:	e0fff217 	ldw	r3,-56(fp)
 8016734:	e0bff517 	ldw	r2,-44(fp)
 8016738:	1885883a 	add	r2,r3,r2
 801673c:	d0e6f317 	ldw	r3,-25652(gp)
 8016740:	180b883a 	mov	r5,r3
 8016744:	1009883a 	mov	r4,r2
 8016748:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 801674c:	10003526 	beq	r2,zero,8016824 <get_home_directory_cluster_for_file+0x428>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 8016750:	e03ff315 	stw	zero,-52(fp)
 8016754:	00002306 	br	80167e4 <get_home_directory_cluster_for_file+0x3e8>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 8016758:	e0bff317 	ldw	r2,-52(fp)
 801675c:	1004917a 	slli	r2,r2,5
 8016760:	e0fff417 	ldw	r3,-48(fp)
 8016764:	e13ff217 	ldw	r4,-56(fp)
 8016768:	200f883a 	mov	r7,r4
 801676c:	180d883a 	mov	r6,r3
 8016770:	e17fff17 	ldw	r5,-4(fp)
 8016774:	1009883a 	mov	r4,r2
 8016778:	80150e40 	call	80150e4 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 801677c:	e0bfff17 	ldw	r2,-4(fp)
 8016780:	10800003 	ldbu	r2,0(r2)
 8016784:	10803fcc 	andi	r2,r2,255
 8016788:	10803960 	cmpeqi	r2,r2,229
 801678c:	1000121e 	bne	r2,zero,80167d8 <get_home_directory_cluster_for_file+0x3dc>
 8016790:	e0bfff17 	ldw	r2,-4(fp)
 8016794:	10800003 	ldbu	r2,0(r2)
 8016798:	10803fcc 	andi	r2,r2,255
 801679c:	10000e26 	beq	r2,zero,80167d8 <get_home_directory_cluster_for_file+0x3dc>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 80167a0:	e0fffb04 	addi	r3,fp,-20
 80167a4:	e0bff904 	addi	r2,fp,-28
 80167a8:	180d883a 	mov	r6,r3
 80167ac:	100b883a 	mov	r5,r2
 80167b0:	e13fff17 	ldw	r4,-4(fp)
 80167b4:	80161600 	call	8016160 <match_file_record_to_name_ext>
 80167b8:	e0bff615 	stw	r2,-40(fp)
                                if (match)
 80167bc:	e0bff617 	ldw	r2,-40(fp)
 80167c0:	10000526 	beq	r2,zero,80167d8 <get_home_directory_cluster_for_file+0x3dc>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 80167c4:	e0bfff17 	ldw	r2,-4(fp)
 80167c8:	1080058b 	ldhu	r2,22(r2)
 80167cc:	10bfffcc 	andi	r2,r2,65535
 80167d0:	e0bfef15 	stw	r2,-68(fp)
                                    break;
 80167d4:	00000606 	br	80167f0 <get_home_directory_cluster_for_file+0x3f4>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 80167d8:	e0bff317 	ldw	r2,-52(fp)
 80167dc:	10800044 	addi	r2,r2,1
 80167e0:	e0bff315 	stw	r2,-52(fp)
 80167e4:	e0bff317 	ldw	r2,-52(fp)
 80167e8:	10800410 	cmplti	r2,r2,16
 80167ec:	103fda1e 	bne	r2,zero,8016758 <_gp+0xffff1750>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 80167f0:	e0ffef17 	ldw	r3,-68(fp)
 80167f4:	e0bfea17 	ldw	r2,-88(fp)
 80167f8:	18800c1e 	bne	r3,r2,801682c <get_home_directory_cluster_for_file+0x430>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 80167fc:	e0bff217 	ldw	r2,-56(fp)
 8016800:	10800044 	addi	r2,r2,1
 8016804:	e0bff215 	stw	r2,-56(fp)
 8016808:	008200b4 	movhi	r2,2050
 801680c:	10bb0d04 	addi	r2,r2,-5068
 8016810:	10800383 	ldbu	r2,14(r2)
 8016814:	10803fcc 	andi	r2,r2,255
 8016818:	e0fff217 	ldw	r3,-56(fp)
 801681c:	18bfc416 	blt	r3,r2,8016730 <_gp+0xffff1728>
 8016820:	00000306 	br	8016830 <get_home_directory_cluster_for_file+0x434>
                            }
                        }
                    }
                    else
                    {
                        break;
 8016824:	0001883a 	nop
 8016828:	00000106 	br	8016830 <get_home_directory_cluster_for_file+0x434>
                    }
                    if (new_cluster != home_dir_cluster)
                    {
                        break;
 801682c:	0001883a 	nop
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 8016830:	e0ffef17 	ldw	r3,-68(fp)
 8016834:	e0bfea17 	ldw	r2,-88(fp)
 8016838:	1880141e 	bne	r3,r2,801688c <get_home_directory_cluster_for_file+0x490>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 801683c:	e0bfef17 	ldw	r2,-68(fp)
 8016840:	e0fffc04 	addi	r3,fp,-16
 8016844:	180b883a 	mov	r5,r3
 8016848:	1009883a 	mov	r4,r2
 801684c:	8014dac0 	call	8014dac <get_cluster_flag>
 8016850:	10000c26 	beq	r2,zero,8016884 <get_home_directory_cluster_for_file+0x488>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 8016854:	e0bffc0b 	ldhu	r2,-16(fp)
 8016858:	10bfffcc 	andi	r2,r2,65535
 801685c:	10fffe0c 	andi	r3,r2,65528
 8016860:	00bffe14 	movui	r2,65528
 8016864:	1880021e 	bne	r3,r2,8016870 <get_home_directory_cluster_for_file+0x474>
						{
							return false;
 8016868:	0005883a 	mov	r2,zero
 801686c:	00003006 	br	8016930 <get_home_directory_cluster_for_file+0x534>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 8016870:	e0bffc0b 	ldhu	r2,-16(fp)
 8016874:	10bfffcc 	andi	r2,r2,65535
 8016878:	10bffe0c 	andi	r2,r2,65528
 801687c:	e0bfef15 	stw	r2,-68(fp)
 8016880:	00000206 	br	801688c <get_home_directory_cluster_for_file+0x490>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 8016884:	0005883a 	mov	r2,zero
 8016888:	00002906 	br	8016930 <get_home_directory_cluster_for_file+0x534>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 801688c:	e0bff417 	ldw	r2,-48(fp)
 8016890:	00fffdd4 	movui	r3,65527
 8016894:	18800316 	blt	r3,r2,80168a4 <get_home_directory_cluster_for_file+0x4a8>
 8016898:	e0ffef17 	ldw	r3,-68(fp)
 801689c:	e0bfea17 	ldw	r2,-88(fp)
 80168a0:	18bf9226 	beq	r3,r2,80166ec <_gp+0xffff16e4>
            if (new_cluster != home_dir_cluster)
 80168a4:	e0ffef17 	ldw	r3,-68(fp)
 80168a8:	e0bfea17 	ldw	r2,-88(fp)
 80168ac:	18800826 	beq	r3,r2,80168d0 <get_home_directory_cluster_for_file+0x4d4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 80168b0:	e0bfef17 	ldw	r2,-68(fp)
 80168b4:	e0bfea15 	stw	r2,-88(fp)
                start_location = start_location+location+1;
 80168b8:	e0ffed17 	ldw	r3,-76(fp)
 80168bc:	e0bfeb17 	ldw	r2,-84(fp)
 80168c0:	1885883a 	add	r2,r3,r2
 80168c4:	10800044 	addi	r2,r2,1
 80168c8:	e0bfed15 	stw	r2,-76(fp)
 80168cc:	00000206 	br	80168d8 <get_home_directory_cluster_for_file+0x4dc>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 80168d0:	0005883a 	mov	r2,zero
 80168d4:	00001606 	br	8016930 <get_home_directory_cluster_for_file+0x534>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 80168d8:	e0bfed17 	ldw	r2,-76(fp)
 80168dc:	e0fffd17 	ldw	r3,-12(fp)
 80168e0:	1885883a 	add	r2,r3,r2
 80168e4:	1009883a 	mov	r4,r2
 80168e8:	80160a80 	call	80160a8 <get_dir_divider_location>
 80168ec:	e0bfeb15 	stw	r2,-84(fp)
        if (location < 0)
 80168f0:	e0bfeb17 	ldw	r2,-84(fp)
 80168f4:	1000020e 	bge	r2,zero,8016900 <get_home_directory_cluster_for_file+0x504>
        {
            // Directory has been located.
            result = true;
 80168f8:	00800044 	movi	r2,1
 80168fc:	e0bfe915 	stw	r2,-92(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 8016900:	e0bfeb17 	ldw	r2,-84(fp)
 8016904:	00becb16 	blt	zero,r2,8016434 <_gp+0xffff142c>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 8016908:	e0bffe17 	ldw	r2,-8(fp)
 801690c:	e0ffea17 	ldw	r3,-88(fp)
 8016910:	10c00015 	stw	r3,0(r2)
    if (home_dir_cluster == 0)
 8016914:	e0bfea17 	ldw	r2,-88(fp)
 8016918:	1000041e 	bne	r2,zero,801692c <get_home_directory_cluster_for_file+0x530>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 801691c:	e0bfff17 	ldw	r2,-4(fp)
 8016920:	10000a15 	stw	zero,40(r2)
		result = true;
 8016924:	00800044 	movi	r2,1
 8016928:	e0bfe915 	stw	r2,-92(fp)
    }
    return result;
 801692c:	e0bfe917 	ldw	r2,-92(fp)
}
 8016930:	e037883a 	mov	sp,fp
 8016934:	dfc00117 	ldw	ra,4(sp)
 8016938:	df000017 	ldw	fp,0(sp)
 801693c:	dec00204 	addi	sp,sp,8
 8016940:	f800283a 	ret

08016944 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 8016944:	deffe804 	addi	sp,sp,-96
 8016948:	dfc01715 	stw	ra,92(sp)
 801694c:	df001615 	stw	fp,88(sp)
 8016950:	df001604 	addi	fp,sp,88
 8016954:	e13ffd15 	stw	r4,-12(fp)
 8016958:	e17ffe15 	stw	r5,-8(fp)
 801695c:	e1bfff15 	stw	r6,-4(fp)
    int location = get_dir_divider_location( file_name );
 8016960:	e13ffe17 	ldw	r4,-8(fp)
 8016964:	80160a80 	call	80160a8 <get_dir_divider_location>
 8016968:	e0bfea15 	stw	r2,-88(fp)
    int last_dir_separator = 0;
 801696c:	e03feb15 	stw	zero,-84(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 8016970:	00800804 	movi	r2,32
 8016974:	e0bff905 	stb	r2,-28(fp)
 8016978:	00800804 	movi	r2,32
 801697c:	e0bff945 	stb	r2,-27(fp)
 8016980:	00800804 	movi	r2,32
 8016984:	e0bff985 	stb	r2,-26(fp)
 8016988:	00800804 	movi	r2,32
 801698c:	e0bff9c5 	stb	r2,-25(fp)
 8016990:	00800804 	movi	r2,32
 8016994:	e0bffa05 	stb	r2,-24(fp)
 8016998:	00800804 	movi	r2,32
 801699c:	e0bffa45 	stb	r2,-23(fp)
 80169a0:	00800804 	movi	r2,32
 80169a4:	e0bffa85 	stb	r2,-22(fp)
 80169a8:	00800804 	movi	r2,32
 80169ac:	e0bffac5 	stb	r2,-21(fp)
    char extension[3] = { ' ', ' ', ' ' };
 80169b0:	00800804 	movi	r2,32
 80169b4:	e0bffb05 	stb	r2,-20(fp)
 80169b8:	00800804 	movi	r2,32
 80169bc:	e0bffb45 	stb	r2,-19(fp)
 80169c0:	00800804 	movi	r2,32
 80169c4:	e0bffb85 	stb	r2,-18(fp)
    int ext_index = -1;
 80169c8:	00bfffc4 	movi	r2,-1
 80169cc:	e0bfec15 	stw	r2,-80(fp)
    int cluster = directory_start_cluster;
 80169d0:	e0bffd17 	ldw	r2,-12(fp)
 80169d4:	e0bfed15 	stw	r2,-76(fp)
    int index;
	int length = strlen(file_name);
 80169d8:	e13ffe17 	ldw	r4,-8(fp)
 80169dc:	801abcc0 	call	801abcc <strlen>
 80169e0:	e0bff415 	stw	r2,-48(fp)
    bool result = false;
 80169e4:	e03fef15 	stw	zero,-68(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 80169e8:	00000b06 	br	8016a18 <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 80169ec:	e0ffeb17 	ldw	r3,-84(fp)
 80169f0:	e0bfea17 	ldw	r2,-88(fp)
 80169f4:	1885883a 	add	r2,r3,r2
 80169f8:	10800044 	addi	r2,r2,1
 80169fc:	e0bfeb15 	stw	r2,-84(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 8016a00:	e0bfeb17 	ldw	r2,-84(fp)
 8016a04:	e0fffe17 	ldw	r3,-8(fp)
 8016a08:	1885883a 	add	r2,r3,r2
 8016a0c:	1009883a 	mov	r4,r2
 8016a10:	80160a80 	call	80160a8 <get_dir_divider_location>
 8016a14:	e0bfea15 	stw	r2,-88(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 8016a18:	e0bfea17 	ldw	r2,-88(fp)
 8016a1c:	00bff316 	blt	zero,r2,80169ec <_gp+0xffff19e4>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 8016a20:	e0bfeb17 	ldw	r2,-84(fp)
 8016a24:	e0bfee15 	stw	r2,-72(fp)
 8016a28:	00002706 	br	8016ac8 <find_file_in_directory+0x184>
    {
        if (file_name[index] == '.')
 8016a2c:	e0bfee17 	ldw	r2,-72(fp)
 8016a30:	e0fffe17 	ldw	r3,-8(fp)
 8016a34:	1885883a 	add	r2,r3,r2
 8016a38:	10800003 	ldbu	r2,0(r2)
 8016a3c:	10803fcc 	andi	r2,r2,255
 8016a40:	1080201c 	xori	r2,r2,128
 8016a44:	10bfe004 	addi	r2,r2,-128
 8016a48:	10800b98 	cmpnei	r2,r2,46
 8016a4c:	1000031e 	bne	r2,zero,8016a5c <find_file_in_directory+0x118>
        {
            ext_index = index;
 8016a50:	e0bfee17 	ldw	r2,-72(fp)
 8016a54:	e0bfec15 	stw	r2,-80(fp)
 8016a58:	00001806 	br	8016abc <find_file_in_directory+0x178>
        }
        else if (ext_index < 0)
 8016a5c:	e0bfec17 	ldw	r2,-80(fp)
 8016a60:	10000b0e 	bge	r2,zero,8016a90 <find_file_in_directory+0x14c>
        {
            name[index-last_dir_separator] = file_name[index];
 8016a64:	e0ffee17 	ldw	r3,-72(fp)
 8016a68:	e0bfeb17 	ldw	r2,-84(fp)
 8016a6c:	1885c83a 	sub	r2,r3,r2
 8016a70:	e0ffee17 	ldw	r3,-72(fp)
 8016a74:	e13ffe17 	ldw	r4,-8(fp)
 8016a78:	20c7883a 	add	r3,r4,r3
 8016a7c:	18c00003 	ldbu	r3,0(r3)
 8016a80:	e13ff904 	addi	r4,fp,-28
 8016a84:	2085883a 	add	r2,r4,r2
 8016a88:	10c00005 	stb	r3,0(r2)
 8016a8c:	00000b06 	br	8016abc <find_file_in_directory+0x178>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 8016a90:	e0ffee17 	ldw	r3,-72(fp)
 8016a94:	e0bfec17 	ldw	r2,-80(fp)
 8016a98:	1885c83a 	sub	r2,r3,r2
 8016a9c:	10bfffc4 	addi	r2,r2,-1
 8016aa0:	e0ffee17 	ldw	r3,-72(fp)
 8016aa4:	e13ffe17 	ldw	r4,-8(fp)
 8016aa8:	20c7883a 	add	r3,r4,r3
 8016aac:	18c00003 	ldbu	r3,0(r3)
 8016ab0:	e13ffb04 	addi	r4,fp,-20
 8016ab4:	2085883a 	add	r2,r4,r2
 8016ab8:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 8016abc:	e0bfee17 	ldw	r2,-72(fp)
 8016ac0:	10800044 	addi	r2,r2,1
 8016ac4:	e0bfee15 	stw	r2,-72(fp)
 8016ac8:	e0ffee17 	ldw	r3,-72(fp)
 8016acc:	e0bff417 	ldw	r2,-48(fp)
 8016ad0:	18bfd616 	blt	r3,r2,8016a2c <_gp+0xffff1a24>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 8016ad4:	e0bffd17 	ldw	r2,-12(fp)
 8016ad8:	1000481e 	bne	r2,zero,8016bfc <find_file_in_directory+0x2b8>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8016adc:	008200b4 	movhi	r2,2050
 8016ae0:	10bb0d04 	addi	r2,r2,-5068
 8016ae4:	1080050b 	ldhu	r2,20(r2)
 8016ae8:	10bfffcc 	andi	r2,r2,65535
 8016aec:	1006917a 	slli	r3,r2,5
 8016af0:	008200b4 	movhi	r2,2050
 8016af4:	10bb0d04 	addi	r2,r2,-5068
 8016af8:	1080030b 	ldhu	r2,12(r2)
 8016afc:	10bfffcc 	andi	r2,r2,65535
 8016b00:	100b883a 	mov	r5,r2
 8016b04:	1809883a 	mov	r4,r3
 8016b08:	8013a840 	call	8013a84 <__divsi3>
 8016b0c:	e0bff715 	stw	r2,-36(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8016b10:	e03ff015 	stw	zero,-64(fp)
 8016b14:	00003506 	br	8016bec <find_file_in_directory+0x2a8>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 8016b18:	008200b4 	movhi	r2,2050
 8016b1c:	10bb0d04 	addi	r2,r2,-5068
 8016b20:	10c01317 	ldw	r3,76(r2)
 8016b24:	e0bff017 	ldw	r2,-64(fp)
 8016b28:	1885883a 	add	r2,r3,r2
 8016b2c:	1007883a 	mov	r3,r2
 8016b30:	d0a6f317 	ldw	r2,-25652(gp)
 8016b34:	100b883a 	mov	r5,r2
 8016b38:	1809883a 	mov	r4,r3
 8016b3c:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8016b40:	10009826 	beq	r2,zero,8016da4 <find_file_in_directory+0x460>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8016b44:	e03ff115 	stw	zero,-60(fp)
 8016b48:	00002006 	br	8016bcc <find_file_in_directory+0x288>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 8016b4c:	e0bff117 	ldw	r2,-60(fp)
 8016b50:	1004917a 	slli	r2,r2,5
 8016b54:	e0fff017 	ldw	r3,-64(fp)
 8016b58:	180f883a 	mov	r7,r3
 8016b5c:	000d883a 	mov	r6,zero
 8016b60:	e17fff17 	ldw	r5,-4(fp)
 8016b64:	1009883a 	mov	r4,r2
 8016b68:	80150e40 	call	80150e4 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 8016b6c:	e0bfff17 	ldw	r2,-4(fp)
 8016b70:	10800003 	ldbu	r2,0(r2)
 8016b74:	10803fcc 	andi	r2,r2,255
 8016b78:	10803960 	cmpeqi	r2,r2,229
 8016b7c:	1000101e 	bne	r2,zero,8016bc0 <find_file_in_directory+0x27c>
 8016b80:	e0bfff17 	ldw	r2,-4(fp)
 8016b84:	10800003 	ldbu	r2,0(r2)
 8016b88:	10803fcc 	andi	r2,r2,255
 8016b8c:	10000c26 	beq	r2,zero,8016bc0 <find_file_in_directory+0x27c>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 8016b90:	e0fffb04 	addi	r3,fp,-20
 8016b94:	e0bff904 	addi	r2,fp,-28
 8016b98:	180d883a 	mov	r6,r3
 8016b9c:	100b883a 	mov	r5,r2
 8016ba0:	e13fff17 	ldw	r4,-4(fp)
 8016ba4:	80161600 	call	8016160 <match_file_record_to_name_ext>
 8016ba8:	e0bff815 	stw	r2,-32(fp)

                        if (match)
 8016bac:	e0bff817 	ldw	r2,-32(fp)
 8016bb0:	10000326 	beq	r2,zero,8016bc0 <find_file_in_directory+0x27c>
                        {
                            result = true;
 8016bb4:	00800044 	movi	r2,1
 8016bb8:	e0bfef15 	stw	r2,-68(fp)
                            break;
 8016bbc:	00000606 	br	8016bd8 <find_file_in_directory+0x294>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8016bc0:	e0bff117 	ldw	r2,-60(fp)
 8016bc4:	10800044 	addi	r2,r2,1
 8016bc8:	e0bff115 	stw	r2,-60(fp)
 8016bcc:	e0bff117 	ldw	r2,-60(fp)
 8016bd0:	10800410 	cmplti	r2,r2,16
 8016bd4:	103fdd1e 	bne	r2,zero,8016b4c <_gp+0xffff1b44>
            }
            else
            {
                break;
            }
            if (result)
 8016bd8:	e0bfef17 	ldw	r2,-68(fp)
 8016bdc:	1000731e 	bne	r2,zero,8016dac <find_file_in_directory+0x468>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8016be0:	e0bff017 	ldw	r2,-64(fp)
 8016be4:	10800044 	addi	r2,r2,1
 8016be8:	e0bff015 	stw	r2,-64(fp)
 8016bec:	e0fff017 	ldw	r3,-64(fp)
 8016bf0:	e0bff717 	ldw	r2,-36(fp)
 8016bf4:	18bfc816 	blt	r3,r2,8016b18 <_gp+0xffff1b10>
 8016bf8:	00006d06 	br	8016db0 <find_file_in_directory+0x46c>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8016bfc:	e0bfed17 	ldw	r2,-76(fp)
 8016c00:	10ffff84 	addi	r3,r2,-2
 8016c04:	008200b4 	movhi	r2,2050
 8016c08:	10bb0d04 	addi	r2,r2,-5068
 8016c0c:	10800383 	ldbu	r2,14(r2)
 8016c10:	10803fcc 	andi	r2,r2,255
 8016c14:	100b883a 	mov	r5,r2
 8016c18:	1809883a 	mov	r4,r3
 8016c1c:	8013c380 	call	8013c38 <__mulsi3>
 8016c20:	1007883a 	mov	r3,r2
 8016c24:	008200b4 	movhi	r2,2050
 8016c28:	10bb0d04 	addi	r2,r2,-5068
 8016c2c:	10801417 	ldw	r2,80(r2)
 8016c30:	1885883a 	add	r2,r3,r2
 8016c34:	e0bff515 	stw	r2,-44(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8016c38:	e03ff215 	stw	zero,-56(fp)
 8016c3c:	00003306 	br	8016d0c <find_file_in_directory+0x3c8>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8016c40:	e0fff217 	ldw	r3,-56(fp)
 8016c44:	e0bff517 	ldw	r2,-44(fp)
 8016c48:	1885883a 	add	r2,r3,r2
 8016c4c:	d0e6f317 	ldw	r3,-25652(gp)
 8016c50:	180b883a 	mov	r5,r3
 8016c54:	1009883a 	mov	r4,r2
 8016c58:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8016c5c:	10003226 	beq	r2,zero,8016d28 <find_file_in_directory+0x3e4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8016c60:	e03ff315 	stw	zero,-52(fp)
 8016c64:	00002106 	br	8016cec <find_file_in_directory+0x3a8>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 8016c68:	e0bff317 	ldw	r2,-52(fp)
 8016c6c:	1004917a 	slli	r2,r2,5
 8016c70:	e0ffed17 	ldw	r3,-76(fp)
 8016c74:	e13ff217 	ldw	r4,-56(fp)
 8016c78:	200f883a 	mov	r7,r4
 8016c7c:	180d883a 	mov	r6,r3
 8016c80:	e17fff17 	ldw	r5,-4(fp)
 8016c84:	1009883a 	mov	r4,r2
 8016c88:	80150e40 	call	80150e4 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 8016c8c:	e0bfff17 	ldw	r2,-4(fp)
 8016c90:	10800003 	ldbu	r2,0(r2)
 8016c94:	10803fcc 	andi	r2,r2,255
 8016c98:	10803960 	cmpeqi	r2,r2,229
 8016c9c:	1000101e 	bne	r2,zero,8016ce0 <find_file_in_directory+0x39c>
 8016ca0:	e0bfff17 	ldw	r2,-4(fp)
 8016ca4:	10800003 	ldbu	r2,0(r2)
 8016ca8:	10803fcc 	andi	r2,r2,255
 8016cac:	10000c26 	beq	r2,zero,8016ce0 <find_file_in_directory+0x39c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 8016cb0:	e0fffb04 	addi	r3,fp,-20
 8016cb4:	e0bff904 	addi	r2,fp,-28
 8016cb8:	180d883a 	mov	r6,r3
 8016cbc:	100b883a 	mov	r5,r2
 8016cc0:	e13fff17 	ldw	r4,-4(fp)
 8016cc4:	80161600 	call	8016160 <match_file_record_to_name_ext>
 8016cc8:	e0bff615 	stw	r2,-40(fp)

                            if (match)
 8016ccc:	e0bff617 	ldw	r2,-40(fp)
 8016cd0:	10000326 	beq	r2,zero,8016ce0 <find_file_in_directory+0x39c>
                            {                               
                                result = true;
 8016cd4:	00800044 	movi	r2,1
 8016cd8:	e0bfef15 	stw	r2,-68(fp)
                                break;
 8016cdc:	00000606 	br	8016cf8 <find_file_in_directory+0x3b4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 8016ce0:	e0bff317 	ldw	r2,-52(fp)
 8016ce4:	10800044 	addi	r2,r2,1
 8016ce8:	e0bff315 	stw	r2,-52(fp)
 8016cec:	e0bff317 	ldw	r2,-52(fp)
 8016cf0:	10800410 	cmplti	r2,r2,16
 8016cf4:	103fdc1e 	bne	r2,zero,8016c68 <_gp+0xffff1c60>
                }
                else
                {
                    break;
                }
                if (result)
 8016cf8:	e0bfef17 	ldw	r2,-68(fp)
 8016cfc:	10000c1e 	bne	r2,zero,8016d30 <find_file_in_directory+0x3ec>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8016d00:	e0bff217 	ldw	r2,-56(fp)
 8016d04:	10800044 	addi	r2,r2,1
 8016d08:	e0bff215 	stw	r2,-56(fp)
 8016d0c:	008200b4 	movhi	r2,2050
 8016d10:	10bb0d04 	addi	r2,r2,-5068
 8016d14:	10800383 	ldbu	r2,14(r2)
 8016d18:	10803fcc 	andi	r2,r2,255
 8016d1c:	e0fff217 	ldw	r3,-56(fp)
 8016d20:	18bfc716 	blt	r3,r2,8016c40 <_gp+0xffff1c38>
 8016d24:	00000306 	br	8016d34 <find_file_in_directory+0x3f0>
                        }
                    }
                }
                else
                {
                    break;
 8016d28:	0001883a 	nop
 8016d2c:	00000106 	br	8016d34 <find_file_in_directory+0x3f0>
                }
                if (result)
                {
                    break;
 8016d30:	0001883a 	nop
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 8016d34:	e0bfef17 	ldw	r2,-68(fp)
 8016d38:	1000141e 	bne	r2,zero,8016d8c <find_file_in_directory+0x448>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 8016d3c:	e0bfed17 	ldw	r2,-76(fp)
 8016d40:	e0fffc04 	addi	r3,fp,-16
 8016d44:	180b883a 	mov	r5,r3
 8016d48:	1009883a 	mov	r4,r2
 8016d4c:	8014dac0 	call	8014dac <get_cluster_flag>
 8016d50:	10000c26 	beq	r2,zero,8016d84 <find_file_in_directory+0x440>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 8016d54:	e0bffc0b 	ldhu	r2,-16(fp)
 8016d58:	10bfffcc 	andi	r2,r2,65535
 8016d5c:	10fffe0c 	andi	r3,r2,65528
 8016d60:	00bffe14 	movui	r2,65528
 8016d64:	1880021e 	bne	r3,r2,8016d70 <find_file_in_directory+0x42c>
					{
						return false;
 8016d68:	0005883a 	mov	r2,zero
 8016d6c:	00001106 	br	8016db4 <find_file_in_directory+0x470>
					}
					cluster = (new_cluster & 0x0000fff8);
 8016d70:	e0bffc0b 	ldhu	r2,-16(fp)
 8016d74:	10bfffcc 	andi	r2,r2,65535
 8016d78:	10bffe0c 	andi	r2,r2,65528
 8016d7c:	e0bfed15 	stw	r2,-76(fp)
 8016d80:	00000206 	br	8016d8c <find_file_in_directory+0x448>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 8016d84:	0005883a 	mov	r2,zero
 8016d88:	00000a06 	br	8016db4 <find_file_in_directory+0x470>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 8016d8c:	e0bfed17 	ldw	r2,-76(fp)
 8016d90:	00fffdd4 	movui	r3,65527
 8016d94:	18800616 	blt	r3,r2,8016db0 <find_file_in_directory+0x46c>
 8016d98:	e0bfef17 	ldw	r2,-68(fp)
 8016d9c:	103f9726 	beq	r2,zero,8016bfc <_gp+0xffff1bf4>
 8016da0:	00000306 	br	8016db0 <find_file_in_directory+0x46c>
                    }
                }
            }
            else
            {
                break;
 8016da4:	0001883a 	nop
 8016da8:	00000106 	br	8016db0 <find_file_in_directory+0x46c>
            }
            if (result)
            {
                break;
 8016dac:	0001883a 	nop
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
    }
    
    return result;   
 8016db0:	e0bfef17 	ldw	r2,-68(fp)
}
 8016db4:	e037883a 	mov	sp,fp
 8016db8:	dfc00117 	ldw	ra,4(sp)
 8016dbc:	df000017 	ldw	fp,0(sp)
 8016dc0:	dec00204 	addi	sp,sp,8
 8016dc4:	f800283a 	ret

08016dc8 <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 8016dc8:	defff504 	addi	sp,sp,-44
 8016dcc:	dfc00a15 	stw	ra,40(sp)
 8016dd0:	df000915 	stw	fp,36(sp)
 8016dd4:	df000904 	addi	fp,sp,36
 8016dd8:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 8016ddc:	008200b4 	movhi	r2,2050
 8016de0:	10bb0d04 	addi	r2,r2,-5068
 8016de4:	10801117 	ldw	r2,68(r2)
 8016de8:	e0bff715 	stw	r2,-36(fp)
    unsigned int cluster_index = 2;
 8016dec:	00800084 	movi	r2,2
 8016df0:	e0bff815 	stw	r2,-32(fp)
    short int cluster = -1;
 8016df4:	00bfffc4 	movi	r2,-1
 8016df8:	e0bff90d 	sth	r2,-28(fp)
    bool result = false;
 8016dfc:	e03ffa15 	stw	zero,-24(fp)
	unsigned max_cluster_index = 0;
 8016e00:	e03ffb15 	stw	zero,-20(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 8016e04:	008200b4 	movhi	r2,2050
 8016e08:	10bb0d04 	addi	r2,r2,-5068
 8016e0c:	10801417 	ldw	r2,80(r2)
 8016e10:	e0bffc15 	stw	r2,-16(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 8016e14:	008200b4 	movhi	r2,2050
 8016e18:	10bb0d04 	addi	r2,r2,-5068
 8016e1c:	1080058b 	ldhu	r2,22(r2)
 8016e20:	10bfffcc 	andi	r2,r2,65535
 8016e24:	e0bffd15 	stw	r2,-12(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 8016e28:	008200b4 	movhi	r2,2050
 8016e2c:	10bb0d04 	addi	r2,r2,-5068
 8016e30:	10800917 	ldw	r2,36(r2)
 8016e34:	e0bffe15 	stw	r2,-8(fp)

	if (less_than_32 > greater_than_32)
 8016e38:	e0bffd17 	ldw	r2,-12(fp)
 8016e3c:	e0fffe17 	ldw	r3,-8(fp)
 8016e40:	18800d2e 	bgeu	r3,r2,8016e78 <find_first_empty_cluster+0xb0>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 8016e44:	e0fffd17 	ldw	r3,-12(fp)
 8016e48:	e0bffc17 	ldw	r2,-16(fp)
 8016e4c:	1887c83a 	sub	r3,r3,r2
 8016e50:	008200b4 	movhi	r2,2050
 8016e54:	10bb0d04 	addi	r2,r2,-5068
 8016e58:	10800383 	ldbu	r2,14(r2)
 8016e5c:	10803fcc 	andi	r2,r2,255
 8016e60:	100b883a 	mov	r5,r2
 8016e64:	1809883a 	mov	r4,r3
 8016e68:	8013b7c0 	call	8013b7c <__udivsi3>
 8016e6c:	10800044 	addi	r2,r2,1
 8016e70:	e0bffb15 	stw	r2,-20(fp)
 8016e74:	00002c06 	br	8016f28 <find_first_empty_cluster+0x160>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 8016e78:	e0fffe17 	ldw	r3,-8(fp)
 8016e7c:	e0bffc17 	ldw	r2,-16(fp)
 8016e80:	1887c83a 	sub	r3,r3,r2
 8016e84:	008200b4 	movhi	r2,2050
 8016e88:	10bb0d04 	addi	r2,r2,-5068
 8016e8c:	10800383 	ldbu	r2,14(r2)
 8016e90:	10803fcc 	andi	r2,r2,255
 8016e94:	100b883a 	mov	r5,r2
 8016e98:	1809883a 	mov	r4,r3
 8016e9c:	8013b7c0 	call	8013b7c <__udivsi3>
 8016ea0:	10800044 	addi	r2,r2,1
 8016ea4:	e0bffb15 	stw	r2,-20(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 8016ea8:	00001f06 	br	8016f28 <find_first_empty_cluster+0x160>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 8016eac:	e0bff717 	ldw	r2,-36(fp)
 8016eb0:	d0e6f317 	ldw	r3,-25652(gp)
 8016eb4:	180b883a 	mov	r5,r3
 8016eb8:	1009883a 	mov	r4,r2
 8016ebc:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8016ec0:	10001426 	beq	r2,zero,8016f14 <find_first_empty_cluster+0x14c>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 8016ec4:	e0bff817 	ldw	r2,-32(fp)
 8016ec8:	10803fcc 	andi	r2,r2,255
 8016ecc:	1085883a 	add	r2,r2,r2
 8016ed0:	1007883a 	mov	r3,r2
 8016ed4:	d0a6f517 	ldw	r2,-25644(gp)
 8016ed8:	10800a17 	ldw	r2,40(r2)
 8016edc:	1885883a 	add	r2,r3,r2
 8016ee0:	1080002b 	ldhuio	r2,0(r2)
 8016ee4:	10bfffcc 	andi	r2,r2,65535
 8016ee8:	e0bff90d 	sth	r2,-28(fp)
                if (cluster == 0)
 8016eec:	e0bff90f 	ldh	r2,-28(fp)
 8016ef0:	10000726 	beq	r2,zero,8016f10 <find_first_empty_cluster+0x148>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
 8016ef4:	e0bff817 	ldw	r2,-32(fp)
 8016ef8:	10800044 	addi	r2,r2,1
 8016efc:	e0bff815 	stw	r2,-32(fp)
                } 
            } while ((cluster_index % 256) != 0);
 8016f00:	e0bff817 	ldw	r2,-32(fp)
 8016f04:	10803fcc 	andi	r2,r2,255
 8016f08:	103fee1e 	bne	r2,zero,8016ec4 <_gp+0xffff1ebc>
 8016f0c:	00000106 	br	8016f14 <find_first_empty_cluster+0x14c>
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
                if (cluster == 0)
                {
                    // Free cluster found.
                    break;
 8016f10:	0001883a 	nop
                {
                    cluster_index++;
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
 8016f14:	e0bff90f 	ldh	r2,-28(fp)
 8016f18:	10000926 	beq	r2,zero,8016f40 <find_first_empty_cluster+0x178>
        {
            break;
        }
        sector++;
 8016f1c:	e0bff717 	ldw	r2,-36(fp)
 8016f20:	10800044 	addi	r2,r2,1
 8016f24:	e0bff715 	stw	r2,-36(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 8016f28:	008200b4 	movhi	r2,2050
 8016f2c:	10bb0d04 	addi	r2,r2,-5068
 8016f30:	10c01217 	ldw	r3,72(r2)
 8016f34:	e0bff717 	ldw	r2,-36(fp)
 8016f38:	18bfdc1e 	bne	r3,r2,8016eac <_gp+0xffff1ea4>
 8016f3c:	00000106 	br	8016f44 <find_first_empty_cluster+0x17c>
                } 
            } while ((cluster_index % 256) != 0);
        }
        if (cluster == 0)
        {
            break;
 8016f40:	0001883a 	nop
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 8016f44:	e0bff90f 	ldh	r2,-28(fp)
 8016f48:	1000081e 	bne	r2,zero,8016f6c <find_first_empty_cluster+0x1a4>
 8016f4c:	e0bff90f 	ldh	r2,-28(fp)
 8016f50:	e0fffb17 	ldw	r3,-20(fp)
 8016f54:	18800536 	bltu	r3,r2,8016f6c <find_first_empty_cluster+0x1a4>
    {
        *cluster_number = cluster_index;
 8016f58:	e0bfff17 	ldw	r2,-4(fp)
 8016f5c:	e0fff817 	ldw	r3,-32(fp)
 8016f60:	10c00015 	stw	r3,0(r2)
		result = true;
 8016f64:	00800044 	movi	r2,1
 8016f68:	e0bffa15 	stw	r2,-24(fp)
    }
    return result;
 8016f6c:	e0bffa17 	ldw	r2,-24(fp)
}
 8016f70:	e037883a 	mov	sp,fp
 8016f74:	dfc00117 	ldw	ra,4(sp)
 8016f78:	df000017 	ldw	fp,0(sp)
 8016f7c:	dec00204 	addi	sp,sp,8
 8016f80:	f800283a 	ret

08016f84 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 8016f84:	defff604 	addi	sp,sp,-40
 8016f88:	dfc00915 	stw	ra,36(sp)
 8016f8c:	df000815 	stw	fp,32(sp)
 8016f90:	df000804 	addi	fp,sp,32
 8016f94:	e13fff15 	stw	r4,-4(fp)
    int result = -1;
 8016f98:	00bfffc4 	movi	r2,-1
 8016f9c:	e0bff815 	stw	r2,-32(fp)
    int cluster = start_cluster_index;
 8016fa0:	e0bfff17 	ldw	r2,-4(fp)
 8016fa4:	e0bff915 	stw	r2,-28(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8016fa8:	e0bff917 	ldw	r2,-28(fp)
 8016fac:	10ffff84 	addi	r3,r2,-2
 8016fb0:	008200b4 	movhi	r2,2050
 8016fb4:	10bb0d04 	addi	r2,r2,-5068
 8016fb8:	10800383 	ldbu	r2,14(r2)
 8016fbc:	10803fcc 	andi	r2,r2,255
 8016fc0:	100b883a 	mov	r5,r2
 8016fc4:	1809883a 	mov	r4,r3
 8016fc8:	8013c380 	call	8013c38 <__mulsi3>
 8016fcc:	1007883a 	mov	r3,r2
 8016fd0:	008200b4 	movhi	r2,2050
 8016fd4:	10bb0d04 	addi	r2,r2,-5068
 8016fd8:	10801417 	ldw	r2,80(r2)
 8016fdc:	1885883a 	add	r2,r3,r2
 8016fe0:	e0bffc15 	stw	r2,-16(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8016fe4:	e03ffa15 	stw	zero,-24(fp)
 8016fe8:	00002c06 	br	801709c <find_first_empty_record_in_a_subdirectory+0x118>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8016fec:	e0fffa17 	ldw	r3,-24(fp)
 8016ff0:	e0bffc17 	ldw	r2,-16(fp)
 8016ff4:	1885883a 	add	r2,r3,r2
 8016ff8:	d0e6f317 	ldw	r3,-25652(gp)
 8016ffc:	180b883a 	mov	r5,r3
 8017000:	1009883a 	mov	r4,r2
 8017004:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8017008:	10002b26 	beq	r2,zero,80170b8 <find_first_empty_record_in_a_subdirectory+0x134>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 801700c:	e03ffb15 	stw	zero,-20(fp)
 8017010:	00001c06 	br	8017084 <find_first_empty_record_in_a_subdirectory+0x100>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 8017014:	e0bffb17 	ldw	r2,-20(fp)
 8017018:	1004917a 	slli	r2,r2,5
 801701c:	1007883a 	mov	r3,r2
 8017020:	d0a6f517 	ldw	r2,-25644(gp)
 8017024:	10800a17 	ldw	r2,40(r2)
 8017028:	1885883a 	add	r2,r3,r2
 801702c:	10800023 	ldbuio	r2,0(r2)
 8017030:	10803fcc 	andi	r2,r2,255
 8017034:	10803fcc 	andi	r2,r2,255
 8017038:	e0bffd0d 	sth	r2,-12(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 801703c:	e0bffd0b 	ldhu	r2,-12(fp)
 8017040:	10803960 	cmpeqi	r2,r2,229
 8017044:	1000021e 	bne	r2,zero,8017050 <find_first_empty_record_in_a_subdirectory+0xcc>
 8017048:	e0bffd0b 	ldhu	r2,-12(fp)
 801704c:	10000a1e 	bne	r2,zero,8017078 <find_first_empty_record_in_a_subdirectory+0xf4>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 8017050:	e0bffa17 	ldw	r2,-24(fp)
 8017054:	1006913a 	slli	r3,r2,4
 8017058:	e0bffb17 	ldw	r2,-20(fp)
 801705c:	1885883a 	add	r2,r3,r2
 8017060:	1006943a 	slli	r3,r2,16
 8017064:	e0bff917 	ldw	r2,-28(fp)
 8017068:	1884b03a 	or	r2,r3,r2
 801706c:	e0bff815 	stw	r2,-32(fp)
                        return result;
 8017070:	e0bff817 	ldw	r2,-32(fp)
 8017074:	00005306 	br	80171c4 <find_first_empty_record_in_a_subdirectory+0x240>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 8017078:	e0bffb17 	ldw	r2,-20(fp)
 801707c:	10800044 	addi	r2,r2,1
 8017080:	e0bffb15 	stw	r2,-20(fp)
 8017084:	e0bffb17 	ldw	r2,-20(fp)
 8017088:	10800410 	cmplti	r2,r2,16
 801708c:	103fe11e 	bne	r2,zero,8017014 <_gp+0xffff200c>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8017090:	e0bffa17 	ldw	r2,-24(fp)
 8017094:	10800044 	addi	r2,r2,1
 8017098:	e0bffa15 	stw	r2,-24(fp)
 801709c:	008200b4 	movhi	r2,2050
 80170a0:	10bb0d04 	addi	r2,r2,-5068
 80170a4:	10800383 	ldbu	r2,14(r2)
 80170a8:	10803fcc 	andi	r2,r2,255
 80170ac:	e0fffa17 	ldw	r3,-24(fp)
 80170b0:	18bfce16 	blt	r3,r2,8016fec <_gp+0xffff1fe4>
 80170b4:	00000106 	br	80170bc <find_first_empty_record_in_a_subdirectory+0x138>
                    }
                }
            }
            else
            {
                break;
 80170b8:	0001883a 	nop
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 80170bc:	e0bff817 	ldw	r2,-32(fp)
 80170c0:	1000390e 	bge	r2,zero,80171a8 <find_first_empty_record_in_a_subdirectory+0x224>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 80170c4:	e0bff917 	ldw	r2,-28(fp)
 80170c8:	e0fffd84 	addi	r3,fp,-10
 80170cc:	180b883a 	mov	r5,r3
 80170d0:	1009883a 	mov	r4,r2
 80170d4:	8014dac0 	call	8014dac <get_cluster_flag>
 80170d8:	10003126 	beq	r2,zero,80171a0 <find_first_empty_record_in_a_subdirectory+0x21c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 80170dc:	e0bffd8b 	ldhu	r2,-10(fp)
 80170e0:	10bfffcc 	andi	r2,r2,65535
 80170e4:	10fffe0c 	andi	r3,r2,65528
 80170e8:	00bffe14 	movui	r2,65528
 80170ec:	18802e1e 	bne	r3,r2,80171a8 <find_first_empty_record_in_a_subdirectory+0x224>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 80170f0:	e0bffe04 	addi	r2,fp,-8
 80170f4:	1009883a 	mov	r4,r2
 80170f8:	8016dc80 	call	8016dc8 <find_first_empty_cluster>
 80170fc:	10002326 	beq	r2,zero,801718c <find_first_empty_record_in_a_subdirectory+0x208>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 8017100:	e0bff917 	ldw	r2,-28(fp)
 8017104:	e0fffe17 	ldw	r3,-8(fp)
 8017108:	18ffffcc 	andi	r3,r3,65535
 801710c:	18e0001c 	xori	r3,r3,32768
 8017110:	18e00004 	addi	r3,r3,-32768
 8017114:	01800044 	movi	r6,1
 8017118:	180b883a 	mov	r5,r3
 801711c:	1009883a 	mov	r4,r2
 8017120:	8014e600 	call	8014e60 <mark_cluster>
 8017124:	10001926 	beq	r2,zero,801718c <find_first_empty_record_in_a_subdirectory+0x208>
 8017128:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 801712c:	01800044 	movi	r6,1
 8017130:	017fffc4 	movi	r5,-1
 8017134:	1009883a 	mov	r4,r2
 8017138:	8014e600 	call	8014e60 <mark_cluster>
				{
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 801713c:	10001326 	beq	r2,zero,801718c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 8017140:	e0bff917 	ldw	r2,-28(fp)
 8017144:	e0fffe17 	ldw	r3,-8(fp)
 8017148:	18ffffcc 	andi	r3,r3,65535
 801714c:	18e0001c 	xori	r3,r3,32768
 8017150:	18e00004 	addi	r3,r3,-32768
 8017154:	000d883a 	mov	r6,zero
 8017158:	180b883a 	mov	r5,r3
 801715c:	1009883a 	mov	r4,r2
 8017160:	8014e600 	call	8014e60 <mark_cluster>
					unsigned int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
 8017164:	10000926 	beq	r2,zero,801718c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 8017168:	e0bffe17 	ldw	r2,-8(fp)
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
 801716c:	000d883a 	mov	r6,zero
 8017170:	017fffc4 	movi	r5,-1
 8017174:	1009883a 	mov	r4,r2
 8017178:	8014e600 	call	8014e60 <mark_cluster>
					if (find_first_empty_cluster(&new_dir_cluster))
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
 801717c:	10000326 	beq	r2,zero,801718c <find_first_empty_record_in_a_subdirectory+0x208>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 8017180:	8014c880 	call	8014c88 <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 8017184:	e0bffe17 	ldw	r2,-8(fp)
 8017188:	e0bff815 	stw	r2,-32(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 801718c:	e0bffd8b 	ldhu	r2,-10(fp)
 8017190:	10bfffcc 	andi	r2,r2,65535
 8017194:	10bffe0c 	andi	r2,r2,65528
 8017198:	e0bff915 	stw	r2,-28(fp)
 801719c:	00000206 	br	80171a8 <find_first_empty_record_in_a_subdirectory+0x224>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 80171a0:	00bfffc4 	movi	r2,-1
 80171a4:	e0bff815 	stw	r2,-32(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 80171a8:	e0bff917 	ldw	r2,-28(fp)
 80171ac:	00fffdd4 	movui	r3,65527
 80171b0:	18800316 	blt	r3,r2,80171c0 <find_first_empty_record_in_a_subdirectory+0x23c>
 80171b4:	e0bff817 	ldw	r2,-32(fp)
 80171b8:	10bfffe0 	cmpeqi	r2,r2,-1
 80171bc:	103f7a1e 	bne	r2,zero,8016fa8 <_gp+0xffff1fa0>
    return result; 
 80171c0:	e0bff817 	ldw	r2,-32(fp)
}
 80171c4:	e037883a 	mov	sp,fp
 80171c8:	dfc00117 	ldw	ra,4(sp)
 80171cc:	df000017 	ldw	fp,0(sp)
 80171d0:	dec00204 	addi	sp,sp,8
 80171d4:	f800283a 	ret

080171d8 <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 80171d8:	defff904 	addi	sp,sp,-28
 80171dc:	dfc00615 	stw	ra,24(sp)
 80171e0:	df000515 	stw	fp,20(sp)
 80171e4:	df000504 	addi	fp,sp,20
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 80171e8:	008200b4 	movhi	r2,2050
 80171ec:	10bb0d04 	addi	r2,r2,-5068
 80171f0:	1080050b 	ldhu	r2,20(r2)
 80171f4:	10bfffcc 	andi	r2,r2,65535
 80171f8:	1006917a 	slli	r3,r2,5
 80171fc:	008200b4 	movhi	r2,2050
 8017200:	10bb0d04 	addi	r2,r2,-5068
 8017204:	1080030b 	ldhu	r2,12(r2)
 8017208:	10bfffcc 	andi	r2,r2,65535
 801720c:	100b883a 	mov	r5,r2
 8017210:	1809883a 	mov	r4,r3
 8017214:	8013a840 	call	8013a84 <__divsi3>
 8017218:	e0bffd15 	stw	r2,-12(fp)
    int sector_index;
    int result = -1;
 801721c:	00bfffc4 	movi	r2,-1
 8017220:	e0bffe15 	stw	r2,-8(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 8017224:	e03ffb15 	stw	zero,-20(fp)
 8017228:	00002d06 	br	80172e0 <find_first_empty_record_in_root_directory+0x108>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 801722c:	008200b4 	movhi	r2,2050
 8017230:	10bb0d04 	addi	r2,r2,-5068
 8017234:	10c01317 	ldw	r3,76(r2)
 8017238:	e0bffb17 	ldw	r2,-20(fp)
 801723c:	1885883a 	add	r2,r3,r2
 8017240:	1007883a 	mov	r3,r2
 8017244:	d0a6f317 	ldw	r2,-25652(gp)
 8017248:	100b883a 	mov	r5,r2
 801724c:	1809883a 	mov	r4,r3
 8017250:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8017254:	10002626 	beq	r2,zero,80172f0 <find_first_empty_record_in_root_directory+0x118>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 8017258:	e03ffc15 	stw	zero,-16(fp)
 801725c:	00001a06 	br	80172c8 <find_first_empty_record_in_root_directory+0xf0>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 8017260:	e0bffc17 	ldw	r2,-16(fp)
 8017264:	1004917a 	slli	r2,r2,5
 8017268:	1007883a 	mov	r3,r2
 801726c:	d0a6f517 	ldw	r2,-25644(gp)
 8017270:	10800a17 	ldw	r2,40(r2)
 8017274:	1885883a 	add	r2,r3,r2
 8017278:	10800023 	ldbuio	r2,0(r2)
 801727c:	10803fcc 	andi	r2,r2,255
 8017280:	10803fcc 	andi	r2,r2,255
 8017284:	e0bfff0d 	sth	r2,-4(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 8017288:	e0bfff0b 	ldhu	r2,-4(fp)
 801728c:	10803960 	cmpeqi	r2,r2,229
 8017290:	1000021e 	bne	r2,zero,801729c <find_first_empty_record_in_root_directory+0xc4>
 8017294:	e0bfff0b 	ldhu	r2,-4(fp)
 8017298:	1000081e 	bne	r2,zero,80172bc <find_first_empty_record_in_root_directory+0xe4>
                {
                    result = (sector_index*16 + file_counter) << 16;
 801729c:	e0bffb17 	ldw	r2,-20(fp)
 80172a0:	1006913a 	slli	r3,r2,4
 80172a4:	e0bffc17 	ldw	r2,-16(fp)
 80172a8:	1885883a 	add	r2,r3,r2
 80172ac:	1004943a 	slli	r2,r2,16
 80172b0:	e0bffe15 	stw	r2,-8(fp)
                    return result;
 80172b4:	e0bffe17 	ldw	r2,-8(fp)
 80172b8:	00000f06 	br	80172f8 <find_first_empty_record_in_root_directory+0x120>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 80172bc:	e0bffc17 	ldw	r2,-16(fp)
 80172c0:	10800044 	addi	r2,r2,1
 80172c4:	e0bffc15 	stw	r2,-16(fp)
 80172c8:	e0bffc17 	ldw	r2,-16(fp)
 80172cc:	10800410 	cmplti	r2,r2,16
 80172d0:	103fe31e 	bne	r2,zero,8017260 <_gp+0xffff2258>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 80172d4:	e0bffb17 	ldw	r2,-20(fp)
 80172d8:	10800044 	addi	r2,r2,1
 80172dc:	e0bffb15 	stw	r2,-20(fp)
 80172e0:	e0fffb17 	ldw	r3,-20(fp)
 80172e4:	e0bffd17 	ldw	r2,-12(fp)
 80172e8:	18bfd016 	blt	r3,r2,801722c <_gp+0xffff2224>
 80172ec:	00000106 	br	80172f4 <find_first_empty_record_in_root_directory+0x11c>
                }
            }
        }
        else
        {
            break;
 80172f0:	0001883a 	nop
        }
    }
    return result;
 80172f4:	e0bffe17 	ldw	r2,-8(fp)
}
 80172f8:	e037883a 	mov	sp,fp
 80172fc:	dfc00117 	ldw	ra,4(sp)
 8017300:	df000017 	ldw	fp,0(sp)
 8017304:	dec00204 	addi	sp,sp,8
 8017308:	f800283a 	ret

0801730c <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 801730c:	defffa04 	addi	sp,sp,-24
 8017310:	df000515 	stw	fp,20(sp)
 8017314:	df000504 	addi	fp,sp,20
 8017318:	e13ffd15 	stw	r4,-12(fp)
 801731c:	e17ffe15 	stw	r5,-8(fp)
 8017320:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 8017324:	e03ffc15 	stw	zero,-16(fp)
    
    for(counter = 0; counter < 8; counter++)
 8017328:	e03ffb15 	stw	zero,-20(fp)
 801732c:	00002506 	br	80173c4 <convert_filename_to_name_extension+0xb8>
    {
        if (filename[local] != '.')
 8017330:	e0bffc17 	ldw	r2,-16(fp)
 8017334:	e0fffd17 	ldw	r3,-12(fp)
 8017338:	1885883a 	add	r2,r3,r2
 801733c:	10800003 	ldbu	r2,0(r2)
 8017340:	10803fcc 	andi	r2,r2,255
 8017344:	1080201c 	xori	r2,r2,128
 8017348:	10bfe004 	addi	r2,r2,-128
 801734c:	10800ba0 	cmpeqi	r2,r2,46
 8017350:	1000141e 	bne	r2,zero,80173a4 <convert_filename_to_name_extension+0x98>
        {
            name[counter] = filename[local];
 8017354:	e0bffb17 	ldw	r2,-20(fp)
 8017358:	e0fffe17 	ldw	r3,-8(fp)
 801735c:	1885883a 	add	r2,r3,r2
 8017360:	e0fffc17 	ldw	r3,-16(fp)
 8017364:	e13ffd17 	ldw	r4,-12(fp)
 8017368:	20c7883a 	add	r3,r4,r3
 801736c:	18c00003 	ldbu	r3,0(r3)
 8017370:	10c00005 	stb	r3,0(r2)
            if (filename[local] != 0) local++;
 8017374:	e0bffc17 	ldw	r2,-16(fp)
 8017378:	e0fffd17 	ldw	r3,-12(fp)
 801737c:	1885883a 	add	r2,r3,r2
 8017380:	10800003 	ldbu	r2,0(r2)
 8017384:	10803fcc 	andi	r2,r2,255
 8017388:	1080201c 	xori	r2,r2,128
 801738c:	10bfe004 	addi	r2,r2,-128
 8017390:	10000926 	beq	r2,zero,80173b8 <convert_filename_to_name_extension+0xac>
 8017394:	e0bffc17 	ldw	r2,-16(fp)
 8017398:	10800044 	addi	r2,r2,1
 801739c:	e0bffc15 	stw	r2,-16(fp)
 80173a0:	00000506 	br	80173b8 <convert_filename_to_name_extension+0xac>
        }
        else
        {
            name[counter] = ' ';
 80173a4:	e0bffb17 	ldw	r2,-20(fp)
 80173a8:	e0fffe17 	ldw	r3,-8(fp)
 80173ac:	1885883a 	add	r2,r3,r2
 80173b0:	00c00804 	movi	r3,32
 80173b4:	10c00005 	stb	r3,0(r2)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 80173b8:	e0bffb17 	ldw	r2,-20(fp)
 80173bc:	10800044 	addi	r2,r2,1
 80173c0:	e0bffb15 	stw	r2,-20(fp)
 80173c4:	e0bffb17 	ldw	r2,-20(fp)
 80173c8:	10800210 	cmplti	r2,r2,8
 80173cc:	103fd81e 	bne	r2,zero,8017330 <_gp+0xffff2328>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 80173d0:	e0bffc17 	ldw	r2,-16(fp)
 80173d4:	e0fffd17 	ldw	r3,-12(fp)
 80173d8:	1885883a 	add	r2,r3,r2
 80173dc:	10800003 	ldbu	r2,0(r2)
 80173e0:	10803fcc 	andi	r2,r2,255
 80173e4:	1080201c 	xori	r2,r2,128
 80173e8:	10bfe004 	addi	r2,r2,-128
 80173ec:	10800b98 	cmpnei	r2,r2,46
 80173f0:	1000031e 	bne	r2,zero,8017400 <convert_filename_to_name_extension+0xf4>
 80173f4:	e0bffc17 	ldw	r2,-16(fp)
 80173f8:	10800044 	addi	r2,r2,1
 80173fc:	e0bffc15 	stw	r2,-16(fp)
    for(counter = 0; counter < 3; counter++)
 8017400:	e03ffb15 	stw	zero,-20(fp)
 8017404:	00001c06 	br	8017478 <convert_filename_to_name_extension+0x16c>
    {
        if (filename[local] != 0)
 8017408:	e0bffc17 	ldw	r2,-16(fp)
 801740c:	e0fffd17 	ldw	r3,-12(fp)
 8017410:	1885883a 	add	r2,r3,r2
 8017414:	10800003 	ldbu	r2,0(r2)
 8017418:	10803fcc 	andi	r2,r2,255
 801741c:	1080201c 	xori	r2,r2,128
 8017420:	10bfe004 	addi	r2,r2,-128
 8017424:	10000c26 	beq	r2,zero,8017458 <convert_filename_to_name_extension+0x14c>
        {
            extension[counter] = filename[local];
 8017428:	e0bffb17 	ldw	r2,-20(fp)
 801742c:	e0ffff17 	ldw	r3,-4(fp)
 8017430:	1885883a 	add	r2,r3,r2
 8017434:	e0fffc17 	ldw	r3,-16(fp)
 8017438:	e13ffd17 	ldw	r4,-12(fp)
 801743c:	20c7883a 	add	r3,r4,r3
 8017440:	18c00003 	ldbu	r3,0(r3)
 8017444:	10c00005 	stb	r3,0(r2)
            local++;
 8017448:	e0bffc17 	ldw	r2,-16(fp)
 801744c:	10800044 	addi	r2,r2,1
 8017450:	e0bffc15 	stw	r2,-16(fp)
 8017454:	00000506 	br	801746c <convert_filename_to_name_extension+0x160>
        }
        else
        {
            extension[counter] = ' ';
 8017458:	e0bffb17 	ldw	r2,-20(fp)
 801745c:	e0ffff17 	ldw	r3,-4(fp)
 8017460:	1885883a 	add	r2,r3,r2
 8017464:	00c00804 	movi	r3,32
 8017468:	10c00005 	stb	r3,0(r2)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 801746c:	e0bffb17 	ldw	r2,-20(fp)
 8017470:	10800044 	addi	r2,r2,1
 8017474:	e0bffb15 	stw	r2,-20(fp)
 8017478:	e0bffb17 	ldw	r2,-20(fp)
 801747c:	108000d0 	cmplti	r2,r2,3
 8017480:	103fe11e 	bne	r2,zero,8017408 <_gp+0xffff2400>
        {
            extension[counter] = ' ';
        }
    }

}
 8017484:	0001883a 	nop
 8017488:	e037883a 	mov	sp,fp
 801748c:	df000017 	ldw	fp,0(sp)
 8017490:	dec00104 	addi	sp,sp,4
 8017494:	f800283a 	ret

08017498 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 8017498:	defff404 	addi	sp,sp,-48
 801749c:	dfc00b15 	stw	ra,44(sp)
 80174a0:	df000a15 	stw	fp,40(sp)
 80174a4:	dc000915 	stw	r16,36(sp)
 80174a8:	df000a04 	addi	fp,sp,40
 80174ac:	e13ffc15 	stw	r4,-16(fp)
 80174b0:	e17ffd15 	stw	r5,-12(fp)
 80174b4:	e1bffe15 	stw	r6,-8(fp)
    unsigned int cluster_number;
    bool result = false;
 80174b8:	e03ff615 	stw	zero,-40(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 80174bc:	e0bffb04 	addi	r2,fp,-20
 80174c0:	1009883a 	mov	r4,r2
 80174c4:	8016dc80 	call	8016dc8 <find_first_empty_cluster>
 80174c8:	1000a226 	beq	r2,zero,8017754 <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 80174cc:	e0bffe17 	ldw	r2,-8(fp)
 80174d0:	10800a17 	ldw	r2,40(r2)
 80174d4:	1000031e 	bne	r2,zero,80174e4 <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 80174d8:	80171d80 	call	80171d8 <find_first_empty_record_in_root_directory>
 80174dc:	e0bff715 	stw	r2,-36(fp)
 80174e0:	00000606 	br	80174fc <create_file+0x64>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 80174e4:	e0bffe17 	ldw	r2,-8(fp)
 80174e8:	1080058b 	ldhu	r2,22(r2)
 80174ec:	10bfffcc 	andi	r2,r2,65535
 80174f0:	1009883a 	mov	r4,r2
 80174f4:	8016f840 	call	8016f84 <find_first_empty_record_in_a_subdirectory>
 80174f8:	e0bff715 	stw	r2,-36(fp)
        }
        if (record_index >= 0)
 80174fc:	e0bff717 	ldw	r2,-36(fp)
 8017500:	10009416 	blt	r2,zero,8017754 <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 8017504:	e13ffc17 	ldw	r4,-16(fp)
 8017508:	80160a80 	call	80160a8 <get_dir_divider_location>
 801750c:	e0bff815 	stw	r2,-32(fp)
            int last_dir_separator = 0;
 8017510:	e03ff915 	stw	zero,-28(fp)

            // Skip through all directory separators.
            while (location > 0)
 8017514:	00000b06 	br	8017544 <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
 8017518:	e0fff917 	ldw	r3,-28(fp)
 801751c:	e0bff817 	ldw	r2,-32(fp)
 8017520:	1885883a 	add	r2,r3,r2
 8017524:	10800044 	addi	r2,r2,1
 8017528:	e0bff915 	stw	r2,-28(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 801752c:	e0bff917 	ldw	r2,-28(fp)
 8017530:	e0fffc17 	ldw	r3,-16(fp)
 8017534:	1885883a 	add	r2,r3,r2
 8017538:	1009883a 	mov	r4,r2
 801753c:	80160a80 	call	80160a8 <get_dir_divider_location>
 8017540:	e0bff815 	stw	r2,-32(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 8017544:	e0bff817 	ldw	r2,-32(fp)
 8017548:	00bff316 	blt	zero,r2,8017518 <_gp+0xffff2510>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), (char *)file_record->name, (char *)file_record->extension);
 801754c:	e0bff917 	ldw	r2,-28(fp)
 8017550:	e0fffc17 	ldw	r3,-16(fp)
 8017554:	1887883a 	add	r3,r3,r2
 8017558:	e13ffd17 	ldw	r4,-12(fp)
 801755c:	e0bffd17 	ldw	r2,-12(fp)
 8017560:	10800204 	addi	r2,r2,8
 8017564:	100d883a 	mov	r6,r2
 8017568:	200b883a 	mov	r5,r4
 801756c:	1809883a 	mov	r4,r3
 8017570:	801730c0 	call	801730c <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 8017574:	e0bffd17 	ldw	r2,-12(fp)
 8017578:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 801757c:	e0bffd17 	ldw	r2,-12(fp)
 8017580:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 8017584:	e0bffd17 	ldw	r2,-12(fp)
 8017588:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 801758c:	e0bffd17 	ldw	r2,-12(fp)
 8017590:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 8017594:	e0bffd17 	ldw	r2,-12(fp)
 8017598:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 801759c:	e0bffd17 	ldw	r2,-12(fp)
 80175a0:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 80175a4:	e0bffb17 	ldw	r2,-20(fp)
 80175a8:	1007883a 	mov	r3,r2
 80175ac:	e0bffd17 	ldw	r2,-12(fp)
 80175b0:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 80175b4:	e0bffd17 	ldw	r2,-12(fp)
 80175b8:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 80175bc:	e0fffb17 	ldw	r3,-20(fp)
 80175c0:	e0bffd17 	ldw	r2,-12(fp)
 80175c4:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 80175c8:	e0bffd17 	ldw	r2,-12(fp)
 80175cc:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 80175d0:	e0bffd17 	ldw	r2,-12(fp)
 80175d4:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 80175d8:	e0bff717 	ldw	r2,-36(fp)
 80175dc:	10ffffcc 	andi	r3,r2,65535
 80175e0:	e0bffd17 	ldw	r2,-12(fp)
 80175e4:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 80175e8:	e0bff717 	ldw	r2,-36(fp)
 80175ec:	1004d43a 	srli	r2,r2,16
 80175f0:	1000010e 	bge	r2,zero,80175f8 <create_file+0x160>
 80175f4:	108003c4 	addi	r2,r2,15
 80175f8:	1005d13a 	srai	r2,r2,4
 80175fc:	1007883a 	mov	r3,r2
 8017600:	e0bffd17 	ldw	r2,-12(fp)
 8017604:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 8017608:	e0bff717 	ldw	r2,-36(fp)
 801760c:	1004d43a 	srli	r2,r2,16
 8017610:	1007883a 	mov	r3,r2
 8017614:	00a00034 	movhi	r2,32768
 8017618:	108003c4 	addi	r2,r2,15
 801761c:	1884703a 	and	r2,r3,r2
 8017620:	1000040e 	bge	r2,zero,8017634 <create_file+0x19c>
 8017624:	10bfffc4 	addi	r2,r2,-1
 8017628:	00fffc04 	movi	r3,-16
 801762c:	10c4b03a 	or	r2,r2,r3
 8017630:	10800044 	addi	r2,r2,1
 8017634:	1004917a 	slli	r2,r2,5
 8017638:	1007883a 	mov	r3,r2
 801763c:	e0bffd17 	ldw	r2,-12(fp)
 8017640:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 8017644:	e0bffe17 	ldw	r2,-8(fp)
 8017648:	1080058b 	ldhu	r2,22(r2)
 801764c:	10ffffcc 	andi	r3,r2,65535
 8017650:	e0bffd17 	ldw	r2,-12(fp)
 8017654:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 8017658:	e0bffd17 	ldw	r2,-12(fp)
 801765c:	00c00044 	movi	r3,1
 8017660:	10c00f15 	stw	r3,60(r2)
            file_record->modified = true;
 8017664:	e0bffd17 	ldw	r2,-12(fp)
 8017668:	00c00044 	movi	r3,1
 801766c:	10c00e15 	stw	r3,56(r2)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 8017670:	e0bffd17 	ldw	r2,-12(fp)
 8017674:	10800a17 	ldw	r2,40(r2)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 8017678:	1000071e 	bne	r2,zero,8017698 <create_file+0x200>
 801767c:	008200b4 	movhi	r2,2050
 8017680:	10bb0d04 	addi	r2,r2,-5068
 8017684:	10c01317 	ldw	r3,76(r2)
 8017688:	e0bffd17 	ldw	r2,-12(fp)
 801768c:	10800b17 	ldw	r2,44(r2)
 8017690:	1885883a 	add	r2,r3,r2
 8017694:	00001106 	br	80176dc <create_file+0x244>
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
 8017698:	008200b4 	movhi	r2,2050
 801769c:	10bb0d04 	addi	r2,r2,-5068
 80176a0:	14001417 	ldw	r16,80(r2)
 80176a4:	e0bffd17 	ldw	r2,-12(fp)
 80176a8:	10800a17 	ldw	r2,40(r2)
 80176ac:	10ffff84 	addi	r3,r2,-2
 80176b0:	008200b4 	movhi	r2,2050
 80176b4:	10bb0d04 	addi	r2,r2,-5068
 80176b8:	10800383 	ldbu	r2,14(r2)
 80176bc:	10803fcc 	andi	r2,r2,255
 80176c0:	100b883a 	mov	r5,r2
 80176c4:	1809883a 	mov	r4,r3
 80176c8:	8013c380 	call	8013c38 <__mulsi3>
 80176cc:	8087883a 	add	r3,r16,r2
                                     file_record->file_record_sector_in_cluster);
 80176d0:	e0bffd17 	ldw	r2,-12(fp)
 80176d4:	10800b17 	ldw	r2,44(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
 80176d8:	1885883a 	add	r2,r3,r2
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
            file_record->home_directory_cluster = home_dir->start_cluster_index;
            file_record->in_use = true;
            file_record->modified = true;
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 80176dc:	e0bffa15 	stw	r2,-24(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 80176e0:	e0bffa17 	ldw	r2,-24(fp)
 80176e4:	d0e6f317 	ldw	r3,-25652(gp)
 80176e8:	180b883a 	mov	r5,r3
 80176ec:	1009883a 	mov	r4,r2
 80176f0:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 80176f4:	10001726 	beq	r2,zero,8017754 <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 80176f8:	e0bffd17 	ldw	r2,-12(fp)
 80176fc:	10800c0b 	ldhu	r2,48(r2)
 8017700:	10bfffcc 	andi	r2,r2,65535
 8017704:	10a0001c 	xori	r2,r2,32768
 8017708:	10a00004 	addi	r2,r2,-32768
 801770c:	e17ffd17 	ldw	r5,-12(fp)
 8017710:	1009883a 	mov	r4,r2
 8017714:	80153600 	call	8015360 <Write_File_Record_At_Offset>
 8017718:	10000e26 	beq	r2,zero,8017754 <create_file+0x2bc>
                {
                    Save_Modified_Sector();
 801771c:	8014c880 	call	8014c88 <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 8017720:	e0bffb17 	ldw	r2,-20(fp)
 8017724:	01800044 	movi	r6,1
 8017728:	017fffc4 	movi	r5,-1
 801772c:	1009883a 	mov	r4,r2
 8017730:	8014e600 	call	8014e60 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 8017734:	e0bffb17 	ldw	r2,-20(fp)
 8017738:	000d883a 	mov	r6,zero
 801773c:	017fffc4 	movi	r5,-1
 8017740:	1009883a 	mov	r4,r2
 8017744:	8014e600 	call	8014e60 <mark_cluster>
 8017748:	10000226 	beq	r2,zero,8017754 <create_file+0x2bc>
                    {
                        result = true;
 801774c:	00800044 	movi	r2,1
 8017750:	e0bff615 	stw	r2,-40(fp)
                }
            }
        }

    }
    return result;           
 8017754:	e0bff617 	ldw	r2,-40(fp)
}
 8017758:	e6ffff04 	addi	sp,fp,-4
 801775c:	dfc00217 	ldw	ra,8(sp)
 8017760:	df000117 	ldw	fp,4(sp)
 8017764:	dc000017 	ldw	r16,0(sp)
 8017768:	dec00304 	addi	sp,sp,12
 801776c:	f800283a 	ret

08017770 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 8017770:	defffb04 	addi	sp,sp,-20
 8017774:	df000415 	stw	fp,16(sp)
 8017778:	df000404 	addi	fp,sp,16
 801777c:	e13ffe15 	stw	r4,-8(fp)
 8017780:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 8017784:	e03ffd15 	stw	zero,-12(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 8017788:	e03ffc15 	stw	zero,-16(fp)
 801778c:	00001506 	br	80177e4 <copy_file_record_name_to_string+0x74>
	{
		if (file_record->name[index] != ' ')
 8017790:	e0fffe17 	ldw	r3,-8(fp)
 8017794:	e0bffc17 	ldw	r2,-16(fp)
 8017798:	1885883a 	add	r2,r3,r2
 801779c:	10800003 	ldbu	r2,0(r2)
 80177a0:	10803fcc 	andi	r2,r2,255
 80177a4:	10800820 	cmpeqi	r2,r2,32
 80177a8:	10000b1e 	bne	r2,zero,80177d8 <copy_file_record_name_to_string+0x68>
		{
			file_name[flength] = file_record->name[index];
 80177ac:	e0bffd17 	ldw	r2,-12(fp)
 80177b0:	e0ffff17 	ldw	r3,-4(fp)
 80177b4:	1885883a 	add	r2,r3,r2
 80177b8:	e13ffe17 	ldw	r4,-8(fp)
 80177bc:	e0fffc17 	ldw	r3,-16(fp)
 80177c0:	20c7883a 	add	r3,r4,r3
 80177c4:	18c00003 	ldbu	r3,0(r3)
 80177c8:	10c00005 	stb	r3,0(r2)
			flength = flength + 1;
 80177cc:	e0bffd17 	ldw	r2,-12(fp)
 80177d0:	10800044 	addi	r2,r2,1
 80177d4:	e0bffd15 	stw	r2,-12(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 80177d8:	e0bffc17 	ldw	r2,-16(fp)
 80177dc:	10800044 	addi	r2,r2,1
 80177e0:	e0bffc15 	stw	r2,-16(fp)
 80177e4:	e0bffc17 	ldw	r2,-16(fp)
 80177e8:	10800210 	cmplti	r2,r2,8
 80177ec:	103fe81e 	bne	r2,zero,8017790 <_gp+0xffff2788>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 80177f0:	e0bffe17 	ldw	r2,-8(fp)
 80177f4:	10800203 	ldbu	r2,8(r2)
 80177f8:	10803fcc 	andi	r2,r2,255
 80177fc:	10800820 	cmpeqi	r2,r2,32
 8017800:	1000241e 	bne	r2,zero,8017894 <copy_file_record_name_to_string+0x124>
	{
		file_name[flength] = '.';
 8017804:	e0bffd17 	ldw	r2,-12(fp)
 8017808:	e0ffff17 	ldw	r3,-4(fp)
 801780c:	1885883a 	add	r2,r3,r2
 8017810:	00c00b84 	movi	r3,46
 8017814:	10c00005 	stb	r3,0(r2)
		flength = flength + 1;
 8017818:	e0bffd17 	ldw	r2,-12(fp)
 801781c:	10800044 	addi	r2,r2,1
 8017820:	e0bffd15 	stw	r2,-12(fp)
		for (index = 0; index < 3; index++)
 8017824:	e03ffc15 	stw	zero,-16(fp)
 8017828:	00001706 	br	8017888 <copy_file_record_name_to_string+0x118>
		{
			if (file_record->extension[index] != ' ')
 801782c:	e0fffe17 	ldw	r3,-8(fp)
 8017830:	e0bffc17 	ldw	r2,-16(fp)
 8017834:	1885883a 	add	r2,r3,r2
 8017838:	10800204 	addi	r2,r2,8
 801783c:	10800003 	ldbu	r2,0(r2)
 8017840:	10803fcc 	andi	r2,r2,255
 8017844:	10800820 	cmpeqi	r2,r2,32
 8017848:	10000c1e 	bne	r2,zero,801787c <copy_file_record_name_to_string+0x10c>
			{
				file_name[flength] = file_record->extension[index];
 801784c:	e0bffd17 	ldw	r2,-12(fp)
 8017850:	e0ffff17 	ldw	r3,-4(fp)
 8017854:	1885883a 	add	r2,r3,r2
 8017858:	e13ffe17 	ldw	r4,-8(fp)
 801785c:	e0fffc17 	ldw	r3,-16(fp)
 8017860:	20c7883a 	add	r3,r4,r3
 8017864:	18c00204 	addi	r3,r3,8
 8017868:	18c00003 	ldbu	r3,0(r3)
 801786c:	10c00005 	stb	r3,0(r2)
				flength = flength + 1;
 8017870:	e0bffd17 	ldw	r2,-12(fp)
 8017874:	10800044 	addi	r2,r2,1
 8017878:	e0bffd15 	stw	r2,-12(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 801787c:	e0bffc17 	ldw	r2,-16(fp)
 8017880:	10800044 	addi	r2,r2,1
 8017884:	e0bffc15 	stw	r2,-16(fp)
 8017888:	e0bffc17 	ldw	r2,-16(fp)
 801788c:	108000d0 	cmplti	r2,r2,3
 8017890:	103fe61e 	bne	r2,zero,801782c <_gp+0xffff2824>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 8017894:	e0bffd17 	ldw	r2,-12(fp)
 8017898:	e0ffff17 	ldw	r3,-4(fp)
 801789c:	1885883a 	add	r2,r3,r2
 80178a0:	10000005 	stb	zero,0(r2)
}
 80178a4:	0001883a 	nop
 80178a8:	e037883a 	mov	sp,fp
 80178ac:	df000017 	ldw	fp,0(sp)
 80178b0:	dec00104 	addi	sp,sp,4
 80178b4:	f800283a 	ret

080178b8 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 80178b8:	defffc04 	addi	sp,sp,-16
 80178bc:	dfc00315 	stw	ra,12(sp)
 80178c0:	df000215 	stw	fp,8(sp)
 80178c4:	df000204 	addi	fp,sp,8
 80178c8:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 80178cc:	d1600704 	addi	r5,gp,-32740
 80178d0:	e13fff17 	ldw	r4,-4(fp)
 80178d4:	801a0880 	call	801a088 <alt_find_dev>
 80178d8:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 80178dc:	e0bffe17 	ldw	r2,-8(fp)
 80178e0:	10001e26 	beq	r2,zero,801795c <alt_up_sd_card_open_dev+0xa4>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 80178e4:	e0bffe17 	ldw	r2,-8(fp)
 80178e8:	10800a17 	ldw	r2,40(r2)
 80178ec:	10808d04 	addi	r2,r2,564
 80178f0:	d0a6ed15 	stw	r2,-25676(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 80178f4:	e0bffe17 	ldw	r2,-8(fp)
 80178f8:	10800a17 	ldw	r2,40(r2)
 80178fc:	10808904 	addi	r2,r2,548
 8017900:	d0a6ee15 	stw	r2,-25672(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 8017904:	e0bffe17 	ldw	r2,-8(fp)
 8017908:	10800a17 	ldw	r2,40(r2)
 801790c:	10808404 	addi	r2,r2,528
 8017910:	d0a6ef15 	stw	r2,-25668(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 8017914:	e0bffe17 	ldw	r2,-8(fp)
 8017918:	10800a17 	ldw	r2,40(r2)
 801791c:	10808c04 	addi	r2,r2,560
 8017920:	d0a6f015 	stw	r2,-25664(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 8017924:	e0bffe17 	ldw	r2,-8(fp)
 8017928:	10800a17 	ldw	r2,40(r2)
 801792c:	10808b04 	addi	r2,r2,556
 8017930:	d0a6f115 	stw	r2,-25660(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 8017934:	e0bffe17 	ldw	r2,-8(fp)
 8017938:	10800a17 	ldw	r2,40(r2)
 801793c:	d0a6f215 	stw	r2,-25656(gp)
		device_pointer = dev;
 8017940:	e0bffe17 	ldw	r2,-8(fp)
 8017944:	d0a6f515 	stw	r2,-25644(gp)
		initialized = false;
 8017948:	d026eb15 	stw	zero,-25684(gp)
		is_sd_card_formated_as_FAT16 = false;
 801794c:	d026ec15 	stw	zero,-25680(gp)
		search_data.valid = false;
 8017950:	008200b4 	movhi	r2,2050
 8017954:	10bb0804 	addi	r2,r2,-5088
 8017958:	10000415 	stw	zero,16(r2)
	}
	return dev;
 801795c:	e0bffe17 	ldw	r2,-8(fp)
}
 8017960:	e037883a 	mov	sp,fp
 8017964:	dfc00117 	ldw	ra,4(sp)
 8017968:	df000017 	ldw	fp,0(sp)
 801796c:	dec00204 	addi	sp,sp,8
 8017970:	f800283a 	ret

08017974 <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 8017974:	defffd04 	addi	sp,sp,-12
 8017978:	df000215 	stw	fp,8(sp)
 801797c:	df000204 	addi	fp,sp,8
    bool result = false;
 8017980:	e03ffe15 	stw	zero,-8(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 8017984:	d0a6f517 	ldw	r2,-25644(gp)
 8017988:	10000826 	beq	r2,zero,80179ac <alt_up_sd_card_is_Present+0x38>
 801798c:	d0a6ed17 	ldw	r2,-25676(gp)
 8017990:	1080002b 	ldhuio	r2,0(r2)
 8017994:	10bfffcc 	andi	r2,r2,65535
 8017998:	1080008c 	andi	r2,r2,2
 801799c:	10000326 	beq	r2,zero,80179ac <alt_up_sd_card_is_Present+0x38>
    {
        result = true;
 80179a0:	00800044 	movi	r2,1
 80179a4:	e0bffe15 	stw	r2,-8(fp)
 80179a8:	00001e06 	br	8017a24 <alt_up_sd_card_is_Present+0xb0>
    }
	else if (initialized == true)
 80179ac:	d0a6eb17 	ldw	r2,-25684(gp)
 80179b0:	10800058 	cmpnei	r2,r2,1
 80179b4:	10001b1e 	bne	r2,zero,8017a24 <alt_up_sd_card_is_Present+0xb0>
	{
		int index;

		initialized = false;
 80179b8:	d026eb15 	stw	zero,-25684(gp)
		search_data.valid = false;
 80179bc:	008200b4 	movhi	r2,2050
 80179c0:	10bb0804 	addi	r2,r2,-5088
 80179c4:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 80179c8:	d026ec15 	stw	zero,-25680(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 80179cc:	e03fff15 	stw	zero,-4(fp)
 80179d0:	00001106 	br	8017a18 <alt_up_sd_card_is_Present+0xa4>
		{
			active_files[index].in_use = false;
 80179d4:	008200b4 	movhi	r2,2050
 80179d8:	10bb2204 	addi	r2,r2,-4984
 80179dc:	e0ffff17 	ldw	r3,-4(fp)
 80179e0:	180691ba 	slli	r3,r3,6
 80179e4:	10c5883a 	add	r2,r2,r3
 80179e8:	10800f04 	addi	r2,r2,60
 80179ec:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 80179f0:	008200b4 	movhi	r2,2050
 80179f4:	10bb2204 	addi	r2,r2,-4984
 80179f8:	e0ffff17 	ldw	r3,-4(fp)
 80179fc:	180691ba 	slli	r3,r3,6
 8017a00:	10c5883a 	add	r2,r2,r3
 8017a04:	10800e04 	addi	r2,r2,56
 8017a08:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 8017a0c:	e0bfff17 	ldw	r2,-4(fp)
 8017a10:	10800044 	addi	r2,r2,1
 8017a14:	e0bfff15 	stw	r2,-4(fp)
 8017a18:	e0bfff17 	ldw	r2,-4(fp)
 8017a1c:	10800510 	cmplti	r2,r2,20
 8017a20:	103fec1e 	bne	r2,zero,80179d4 <_gp+0xffff29cc>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 8017a24:	e0bffe17 	ldw	r2,-8(fp)
}
 8017a28:	e037883a 	mov	sp,fp
 8017a2c:	df000017 	ldw	fp,0(sp)
 8017a30:	dec00104 	addi	sp,sp,4
 8017a34:	f800283a 	ret

08017a38 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 8017a38:	defffd04 	addi	sp,sp,-12
 8017a3c:	dfc00215 	stw	ra,8(sp)
 8017a40:	df000115 	stw	fp,4(sp)
 8017a44:	df000104 	addi	fp,sp,4
	bool result = false;
 8017a48:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 8017a4c:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8017a50:	10000c26 	beq	r2,zero,8017a84 <alt_up_sd_card_is_FAT16+0x4c>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 8017a54:	d0a6eb17 	ldw	r2,-25684(gp)
 8017a58:	1000071e 	bne	r2,zero,8017a78 <alt_up_sd_card_is_FAT16+0x40>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 8017a5c:	8015c8c0 	call	8015c8c <Look_for_FAT16>
 8017a60:	d0a6ec15 	stw	r2,-25680(gp)
			initialized = is_sd_card_formated_as_FAT16;
 8017a64:	d0a6ec17 	ldw	r2,-25680(gp)
 8017a68:	d0a6eb15 	stw	r2,-25684(gp)
			search_data.valid = false;
 8017a6c:	008200b4 	movhi	r2,2050
 8017a70:	10bb0804 	addi	r2,r2,-5088
 8017a74:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 8017a78:	d0a6ec17 	ldw	r2,-25680(gp)
 8017a7c:	e0bfff15 	stw	r2,-4(fp)
 8017a80:	00000206 	br	8017a8c <alt_up_sd_card_is_FAT16+0x54>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 8017a84:	d026eb15 	stw	zero,-25684(gp)
		is_sd_card_formated_as_FAT16 = false;
 8017a88:	d026ec15 	stw	zero,-25680(gp)
	}

	return result;
 8017a8c:	e0bfff17 	ldw	r2,-4(fp)
}
 8017a90:	e037883a 	mov	sp,fp
 8017a94:	dfc00117 	ldw	ra,4(sp)
 8017a98:	df000017 	ldw	fp,0(sp)
 8017a9c:	dec00204 	addi	sp,sp,8
 8017aa0:	f800283a 	ret

08017aa4 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 8017aa4:	deffea04 	addi	sp,sp,-88
 8017aa8:	dfc01515 	stw	ra,84(sp)
 8017aac:	df001415 	stw	fp,80(sp)
 8017ab0:	df001404 	addi	fp,sp,80
 8017ab4:	e13ffe15 	stw	r4,-8(fp)
 8017ab8:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 8017abc:	00800084 	movi	r2,2
 8017ac0:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8017ac4:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8017ac8:	10002426 	beq	r2,zero,8017b5c <alt_up_sd_card_find_first+0xb8>
 8017acc:	d0a6ec17 	ldw	r2,-25680(gp)
 8017ad0:	10002226 	beq	r2,zero,8017b5c <alt_up_sd_card_find_first+0xb8>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 8017ad4:	e0ffee04 	addi	r3,fp,-72
 8017ad8:	e0bfed04 	addi	r2,fp,-76
 8017adc:	180d883a 	mov	r6,r3
 8017ae0:	100b883a 	mov	r5,r2
 8017ae4:	e13ffe17 	ldw	r4,-8(fp)
 8017ae8:	80163fc0 	call	80163fc <get_home_directory_cluster_for_file>
 8017aec:	10001926 	beq	r2,zero,8017b54 <alt_up_sd_card_find_first+0xb0>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 8017af0:	e0bfed17 	ldw	r2,-76(fp)
 8017af4:	1007883a 	mov	r3,r2
 8017af8:	008200b4 	movhi	r2,2050
 8017afc:	10bb0804 	addi	r2,r2,-5088
 8017b00:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 8017b04:	e0bfed17 	ldw	r2,-76(fp)
 8017b08:	1007883a 	mov	r3,r2
 8017b0c:	008200b4 	movhi	r2,2050
 8017b10:	10bb0804 	addi	r2,r2,-5088
 8017b14:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 8017b18:	008200b4 	movhi	r2,2050
 8017b1c:	10bb0804 	addi	r2,r2,-5088
 8017b20:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 8017b24:	008200b4 	movhi	r2,2050
 8017b28:	10bb0804 	addi	r2,r2,-5088
 8017b2c:	00ffffc4 	movi	r3,-1
 8017b30:	10c0030d 	sth	r3,12(r2)
			search_data.valid = true;
 8017b34:	008200b4 	movhi	r2,2050
 8017b38:	10bb0804 	addi	r2,r2,-5088
 8017b3c:	00c00044 	movi	r3,1
 8017b40:	10c00415 	stw	r3,16(r2)
			result = alt_up_sd_card_find_next(file_name);
 8017b44:	e13fff17 	ldw	r4,-4(fp)
 8017b48:	8017b740 	call	8017b74 <alt_up_sd_card_find_next>
 8017b4c:	e0bfec0d 	sth	r2,-80(fp)
 8017b50:	00000206 	br	8017b5c <alt_up_sd_card_find_first+0xb8>
		}
		else
		{
			result = 1;
 8017b54:	00800044 	movi	r2,1
 8017b58:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 8017b5c:	e0bfec0b 	ldhu	r2,-80(fp)
}
 8017b60:	e037883a 	mov	sp,fp
 8017b64:	dfc00117 	ldw	ra,4(sp)
 8017b68:	df000017 	ldw	fp,0(sp)
 8017b6c:	dec00204 	addi	sp,sp,8
 8017b70:	f800283a 	ret

08017b74 <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 8017b74:	deffe404 	addi	sp,sp,-112
 8017b78:	dfc01b15 	stw	ra,108(sp)
 8017b7c:	df001a15 	stw	fp,104(sp)
 8017b80:	df001a04 	addi	fp,sp,104
 8017b84:	e13fff15 	stw	r4,-4(fp)
	short int result = 2;
 8017b88:	00800084 	movi	r2,2
 8017b8c:	e0bfe60d 	sth	r2,-104(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8017b90:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8017b94:	1000e326 	beq	r2,zero,8017f24 <alt_up_sd_card_find_next+0x3b0>
 8017b98:	d0a6ec17 	ldw	r2,-25680(gp)
 8017b9c:	1000e126 	beq	r2,zero,8017f24 <alt_up_sd_card_find_next+0x3b0>
	{
		if (search_data.valid)
 8017ba0:	008200b4 	movhi	r2,2050
 8017ba4:	10bb0804 	addi	r2,r2,-5088
 8017ba8:	10800417 	ldw	r2,16(r2)
 8017bac:	1000db26 	beq	r2,zero,8017f1c <alt_up_sd_card_find_next+0x3a8>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 8017bb0:	008200b4 	movhi	r2,2050
 8017bb4:	10bb0804 	addi	r2,r2,-5088
 8017bb8:	10800117 	ldw	r2,4(r2)
 8017bbc:	e0bfe715 	stw	r2,-100(fp)

			if (cluster == 0)
 8017bc0:	e0bfe717 	ldw	r2,-100(fp)
 8017bc4:	1000581e 	bne	r2,zero,8017d28 <alt_up_sd_card_find_next+0x1b4>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 8017bc8:	008200b4 	movhi	r2,2050
 8017bcc:	10bb0d04 	addi	r2,r2,-5068
 8017bd0:	1080050b 	ldhu	r2,20(r2)
 8017bd4:	10bfffcc 	andi	r2,r2,65535
 8017bd8:	1006917a 	slli	r3,r2,5
 8017bdc:	008200b4 	movhi	r2,2050
 8017be0:	10bb0d04 	addi	r2,r2,-5068
 8017be4:	1080030b 	ldhu	r2,12(r2)
 8017be8:	10bfffcc 	andi	r2,r2,65535
 8017bec:	100b883a 	mov	r5,r2
 8017bf0:	1809883a 	mov	r4,r3
 8017bf4:	8013a840 	call	8013a84 <__divsi3>
 8017bf8:	e0bfec15 	stw	r2,-80(fp)
				int sector_index = search_data.current_sector_in_cluster;
 8017bfc:	008200b4 	movhi	r2,2050
 8017c00:	10bb0804 	addi	r2,r2,-5088
 8017c04:	10800217 	ldw	r2,8(r2)
 8017c08:	e0bfe815 	stw	r2,-96(fp)
				int file_counter = search_data.file_index_in_sector+1;
 8017c0c:	008200b4 	movhi	r2,2050
 8017c10:	10bb0804 	addi	r2,r2,-5088
 8017c14:	1080030b 	ldhu	r2,12(r2)
 8017c18:	10bfffcc 	andi	r2,r2,65535
 8017c1c:	10a0001c 	xori	r2,r2,32768
 8017c20:	10a00004 	addi	r2,r2,-32768
 8017c24:	10800044 	addi	r2,r2,1
 8017c28:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 8017c2c:	00003606 	br	8017d08 <alt_up_sd_card_find_next+0x194>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 8017c30:	008200b4 	movhi	r2,2050
 8017c34:	10bb0d04 	addi	r2,r2,-5068
 8017c38:	10c01317 	ldw	r3,76(r2)
 8017c3c:	e0bfe817 	ldw	r2,-96(fp)
 8017c40:	1885883a 	add	r2,r3,r2
 8017c44:	1007883a 	mov	r3,r2
 8017c48:	d0a6f317 	ldw	r2,-25652(gp)
 8017c4c:	100b883a 	mov	r5,r2
 8017c50:	1809883a 	mov	r4,r3
 8017c54:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8017c58:	10002f26 	beq	r2,zero,8017d18 <alt_up_sd_card_find_next+0x1a4>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 8017c5c:	00002306 	br	8017cec <alt_up_sd_card_find_next+0x178>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 8017c60:	e0bfe917 	ldw	r2,-92(fp)
 8017c64:	1004917a 	slli	r2,r2,5
 8017c68:	e13fe817 	ldw	r4,-96(fp)
 8017c6c:	e0ffef04 	addi	r3,fp,-68
 8017c70:	200f883a 	mov	r7,r4
 8017c74:	000d883a 	mov	r6,zero
 8017c78:	180b883a 	mov	r5,r3
 8017c7c:	1009883a 	mov	r4,r2
 8017c80:	80150e40 	call	80150e4 <Read_File_Record_At_Offset>
 8017c84:	10001626 	beq	r2,zero,8017ce0 <alt_up_sd_card_find_next+0x16c>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 8017c88:	e0bfef03 	ldbu	r2,-68(fp)
 8017c8c:	10803fcc 	andi	r2,r2,255
 8017c90:	10001326 	beq	r2,zero,8017ce0 <alt_up_sd_card_find_next+0x16c>
 8017c94:	e0bfef03 	ldbu	r2,-68(fp)
 8017c98:	10803fcc 	andi	r2,r2,255
 8017c9c:	10803960 	cmpeqi	r2,r2,229
 8017ca0:	10000f1e 	bne	r2,zero,8017ce0 <alt_up_sd_card_find_next+0x16c>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 8017ca4:	e0bfe917 	ldw	r2,-92(fp)
 8017ca8:	1007883a 	mov	r3,r2
 8017cac:	008200b4 	movhi	r2,2050
 8017cb0:	10bb0804 	addi	r2,r2,-5088
 8017cb4:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 8017cb8:	e0ffe817 	ldw	r3,-96(fp)
 8017cbc:	008200b4 	movhi	r2,2050
 8017cc0:	10bb0804 	addi	r2,r2,-5088
 8017cc4:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 8017cc8:	e0bfef04 	addi	r2,fp,-68
 8017ccc:	e17fff17 	ldw	r5,-4(fp)
 8017cd0:	1009883a 	mov	r4,r2
 8017cd4:	80177700 	call	8017770 <copy_file_record_name_to_string>
									return 0;
 8017cd8:	0005883a 	mov	r2,zero
 8017cdc:	00009206 	br	8017f28 <alt_up_sd_card_find_next+0x3b4>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 8017ce0:	e0bfe917 	ldw	r2,-92(fp)
 8017ce4:	10800044 	addi	r2,r2,1
 8017ce8:	e0bfe915 	stw	r2,-92(fp)
 8017cec:	e0bfe917 	ldw	r2,-92(fp)
 8017cf0:	10800410 	cmplti	r2,r2,16
 8017cf4:	103fda1e 	bne	r2,zero,8017c60 <_gp+0xffff2c58>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 8017cf8:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 8017cfc:	e0bfe817 	ldw	r2,-96(fp)
 8017d00:	10800044 	addi	r2,r2,1
 8017d04:	e0bfe815 	stw	r2,-96(fp)
 8017d08:	e0ffe817 	ldw	r3,-96(fp)
 8017d0c:	e0bfec17 	ldw	r2,-80(fp)
 8017d10:	18bfc716 	blt	r3,r2,8017c30 <_gp+0xffff2c28>
 8017d14:	00000106 	br	8017d1c <alt_up_sd_card_find_next+0x1a8>
						}
						file_counter = 0;
					}
					else
					{
						break;
 8017d18:	0001883a 	nop
					}
				}
				result = -1;
 8017d1c:	00bfffc4 	movi	r2,-1
 8017d20:	e0bfe60d 	sth	r2,-104(fp)
 8017d24:	00007f06 	br	8017f24 <alt_up_sd_card_find_next+0x3b0>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 8017d28:	008200b4 	movhi	r2,2050
 8017d2c:	10bb0804 	addi	r2,r2,-5088
 8017d30:	1080030b 	ldhu	r2,12(r2)
 8017d34:	10bfffcc 	andi	r2,r2,65535
 8017d38:	10a0001c 	xori	r2,r2,32768
 8017d3c:	10a00004 	addi	r2,r2,-32768
 8017d40:	10800044 	addi	r2,r2,1
 8017d44:	e0bfea15 	stw	r2,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 8017d48:	e0bfe717 	ldw	r2,-100(fp)
 8017d4c:	10ffff84 	addi	r3,r2,-2
 8017d50:	008200b4 	movhi	r2,2050
 8017d54:	10bb0d04 	addi	r2,r2,-5068
 8017d58:	10800383 	ldbu	r2,14(r2)
 8017d5c:	10803fcc 	andi	r2,r2,255
 8017d60:	100b883a 	mov	r5,r2
 8017d64:	1809883a 	mov	r4,r3
 8017d68:	8013c380 	call	8013c38 <__mulsi3>
 8017d6c:	1007883a 	mov	r3,r2
 8017d70:	008200b4 	movhi	r2,2050
 8017d74:	10bb0d04 	addi	r2,r2,-5068
 8017d78:	10801417 	ldw	r2,80(r2)
 8017d7c:	1885883a 	add	r2,r3,r2
 8017d80:	e0bfed15 	stw	r2,-76(fp)
					int sector_index = search_data.current_sector_in_cluster;
 8017d84:	008200b4 	movhi	r2,2050
 8017d88:	10bb0804 	addi	r2,r2,-5088
 8017d8c:	10800217 	ldw	r2,8(r2)
 8017d90:	e0bfeb15 	stw	r2,-84(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8017d94:	00003806 	br	8017e78 <alt_up_sd_card_find_next+0x304>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 8017d98:	e0ffeb17 	ldw	r3,-84(fp)
 8017d9c:	e0bfed17 	ldw	r2,-76(fp)
 8017da0:	1885883a 	add	r2,r3,r2
 8017da4:	d0e6f317 	ldw	r3,-25652(gp)
 8017da8:	180b883a 	mov	r5,r3
 8017dac:	1009883a 	mov	r4,r2
 8017db0:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8017db4:	10003726 	beq	r2,zero,8017e94 <alt_up_sd_card_find_next+0x320>
						{        
							for (; file_counter < 16; file_counter++)
 8017db8:	00002806 	br	8017e5c <alt_up_sd_card_find_next+0x2e8>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 8017dbc:	e0bfea17 	ldw	r2,-88(fp)
 8017dc0:	1004917a 	slli	r2,r2,5
 8017dc4:	e13fe717 	ldw	r4,-100(fp)
 8017dc8:	e17feb17 	ldw	r5,-84(fp)
 8017dcc:	e0ffef04 	addi	r3,fp,-68
 8017dd0:	280f883a 	mov	r7,r5
 8017dd4:	200d883a 	mov	r6,r4
 8017dd8:	180b883a 	mov	r5,r3
 8017ddc:	1009883a 	mov	r4,r2
 8017de0:	80150e40 	call	80150e4 <Read_File_Record_At_Offset>
 8017de4:	10001a26 	beq	r2,zero,8017e50 <alt_up_sd_card_find_next+0x2dc>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 8017de8:	e0bfef03 	ldbu	r2,-68(fp)
 8017dec:	10803fcc 	andi	r2,r2,255
 8017df0:	10001726 	beq	r2,zero,8017e50 <alt_up_sd_card_find_next+0x2dc>
 8017df4:	e0bfef03 	ldbu	r2,-68(fp)
 8017df8:	10803fcc 	andi	r2,r2,255
 8017dfc:	10803960 	cmpeqi	r2,r2,229
 8017e00:	1000131e 	bne	r2,zero,8017e50 <alt_up_sd_card_find_next+0x2dc>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 8017e04:	e0ffe717 	ldw	r3,-100(fp)
 8017e08:	008200b4 	movhi	r2,2050
 8017e0c:	10bb0804 	addi	r2,r2,-5088
 8017e10:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 8017e14:	e0bfea17 	ldw	r2,-88(fp)
 8017e18:	1007883a 	mov	r3,r2
 8017e1c:	008200b4 	movhi	r2,2050
 8017e20:	10bb0804 	addi	r2,r2,-5088
 8017e24:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 8017e28:	e0ffeb17 	ldw	r3,-84(fp)
 8017e2c:	008200b4 	movhi	r2,2050
 8017e30:	10bb0804 	addi	r2,r2,-5088
 8017e34:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 8017e38:	e0bfef04 	addi	r2,fp,-68
 8017e3c:	e17fff17 	ldw	r5,-4(fp)
 8017e40:	1009883a 	mov	r4,r2
 8017e44:	80177700 	call	8017770 <copy_file_record_name_to_string>
										return 0;
 8017e48:	0005883a 	mov	r2,zero
 8017e4c:	00003606 	br	8017f28 <alt_up_sd_card_find_next+0x3b4>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 8017e50:	e0bfea17 	ldw	r2,-88(fp)
 8017e54:	10800044 	addi	r2,r2,1
 8017e58:	e0bfea15 	stw	r2,-88(fp)
 8017e5c:	e0bfea17 	ldw	r2,-88(fp)
 8017e60:	10800410 	cmplti	r2,r2,16
 8017e64:	103fd51e 	bne	r2,zero,8017dbc <_gp+0xffff2db4>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 8017e68:	e03fea15 	stw	zero,-88(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 8017e6c:	e0bfeb17 	ldw	r2,-84(fp)
 8017e70:	10800044 	addi	r2,r2,1
 8017e74:	e0bfeb15 	stw	r2,-84(fp)
 8017e78:	008200b4 	movhi	r2,2050
 8017e7c:	10bb0d04 	addi	r2,r2,-5068
 8017e80:	10800383 	ldbu	r2,14(r2)
 8017e84:	10803fcc 	andi	r2,r2,255
 8017e88:	e0ffeb17 	ldw	r3,-84(fp)
 8017e8c:	18bfc216 	blt	r3,r2,8017d98 <_gp+0xffff2d90>
 8017e90:	00000106 	br	8017e98 <alt_up_sd_card_find_next+0x324>
							}
							file_counter = 0;
						}
						else
						{
							break;
 8017e94:	0001883a 	nop
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 8017e98:	008200b4 	movhi	r2,2050
 8017e9c:	10bb0d04 	addi	r2,r2,-5068
 8017ea0:	10800383 	ldbu	r2,14(r2)
 8017ea4:	10803fcc 	andi	r2,r2,255
 8017ea8:	e0ffeb17 	ldw	r3,-84(fp)
 8017eac:	18801716 	blt	r3,r2,8017f0c <alt_up_sd_card_find_next+0x398>
					{
						unsigned short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 8017eb0:	e0bfe717 	ldw	r2,-100(fp)
 8017eb4:	e0ffee04 	addi	r3,fp,-72
 8017eb8:	180b883a 	mov	r5,r3
 8017ebc:	1009883a 	mov	r4,r2
 8017ec0:	8014dac0 	call	8014dac <get_cluster_flag>
 8017ec4:	10000f26 	beq	r2,zero,8017f04 <alt_up_sd_card_find_next+0x390>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 8017ec8:	e0bfee0b 	ldhu	r2,-72(fp)
 8017ecc:	10bfffcc 	andi	r2,r2,65535
 8017ed0:	10fffe0c 	andi	r3,r2,65528
 8017ed4:	00bffe14 	movui	r2,65528
 8017ed8:	1880051e 	bne	r3,r2,8017ef0 <alt_up_sd_card_find_next+0x37c>
							{
								result = -1;
 8017edc:	00bfffc4 	movi	r2,-1
 8017ee0:	e0bfe60d 	sth	r2,-104(fp)
								search_data.valid = false;
 8017ee4:	008200b4 	movhi	r2,2050
 8017ee8:	10bb0804 	addi	r2,r2,-5088
 8017eec:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 8017ef0:	e0bfee0b 	ldhu	r2,-72(fp)
 8017ef4:	10bfffcc 	andi	r2,r2,65535
 8017ef8:	10bffe0c 	andi	r2,r2,65528
 8017efc:	e0bfe715 	stw	r2,-100(fp)
 8017f00:	00000206 	br	8017f0c <alt_up_sd_card_find_next+0x398>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 8017f04:	00bfffc4 	movi	r2,-1
 8017f08:	e0bfe60d 	sth	r2,-104(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 8017f0c:	e0bfe717 	ldw	r2,-100(fp)
 8017f10:	00fffdd4 	movui	r3,65527
 8017f14:	18bf8c0e 	bge	r3,r2,8017d48 <_gp+0xffff2d40>
 8017f18:	00000206 	br	8017f24 <alt_up_sd_card_find_next+0x3b0>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 8017f1c:	008000c4 	movi	r2,3
 8017f20:	e0bfe60d 	sth	r2,-104(fp)
		}
	}
	return result;
 8017f24:	e0bfe60b 	ldhu	r2,-104(fp)
}
 8017f28:	e037883a 	mov	sp,fp
 8017f2c:	dfc00117 	ldw	ra,4(sp)
 8017f30:	df000017 	ldw	fp,0(sp)
 8017f34:	dec00204 	addi	sp,sp,8
 8017f38:	f800283a 	ret

08017f3c <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 8017f3c:	deffe904 	addi	sp,sp,-92
 8017f40:	dfc01615 	stw	ra,88(sp)
 8017f44:	df001515 	stw	fp,84(sp)
 8017f48:	df001504 	addi	fp,sp,84
 8017f4c:	e13ffe15 	stw	r4,-8(fp)
 8017f50:	e17fff15 	stw	r5,-4(fp)
	short int file_record_index = -1;
 8017f54:	00bfffc4 	movi	r2,-1
 8017f58:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8017f5c:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8017f60:	1000cf26 	beq	r2,zero,80182a0 <alt_up_sd_card_fopen+0x364>
 8017f64:	d0a6ec17 	ldw	r2,-25680(gp)
 8017f68:	1000cd26 	beq	r2,zero,80182a0 <alt_up_sd_card_fopen+0x364>
	{
        unsigned int home_directory_cluster = 0;
 8017f6c:	e03fed15 	stw	zero,-76(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 8017f70:	e13ffe17 	ldw	r4,-8(fp)
 8017f74:	8015d780 	call	8015d78 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 8017f78:	e13ffe17 	ldw	r4,-8(fp)
 8017f7c:	8015e3c0 	call	8015e3c <check_file_name_for_FAT16_compliance>
 8017f80:	1000c726 	beq	r2,zero,80182a0 <alt_up_sd_card_fopen+0x364>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, (int *) &home_directory_cluster, &home_dir))
 8017f84:	e0ffee04 	addi	r3,fp,-72
 8017f88:	e0bfed04 	addi	r2,fp,-76
 8017f8c:	180d883a 	mov	r6,r3
 8017f90:	100b883a 	mov	r5,r2
 8017f94:	e13ffe17 	ldw	r4,-8(fp)
 8017f98:	80163fc0 	call	80163fc <get_home_directory_cluster_for_file>
 8017f9c:	1000021e 	bne	r2,zero,8017fa8 <alt_up_sd_card_fopen+0x6c>
            {
                return file_record_index;
 8017fa0:	e0bfeb0b 	ldhu	r2,-84(fp)
 8017fa4:	0000bf06 	br	80182a4 <alt_up_sd_card_fopen+0x368>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 8017fa8:	e03fec15 	stw	zero,-80(fp)
 8017fac:	00000e06 	br	8017fe8 <alt_up_sd_card_fopen+0xac>
    		{
    			if (active_files[index].in_use == false)
 8017fb0:	008200b4 	movhi	r2,2050
 8017fb4:	10bb2204 	addi	r2,r2,-4984
 8017fb8:	e0ffec17 	ldw	r3,-80(fp)
 8017fbc:	180691ba 	slli	r3,r3,6
 8017fc0:	10c5883a 	add	r2,r2,r3
 8017fc4:	10800f04 	addi	r2,r2,60
 8017fc8:	10800017 	ldw	r2,0(r2)
 8017fcc:	1000031e 	bne	r2,zero,8017fdc <alt_up_sd_card_fopen+0xa0>
    			{
    				file_record_index = index;
 8017fd0:	e0bfec17 	ldw	r2,-80(fp)
 8017fd4:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 8017fd8:	00000606 	br	8017ff4 <alt_up_sd_card_fopen+0xb8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 8017fdc:	e0bfec17 	ldw	r2,-80(fp)
 8017fe0:	10800044 	addi	r2,r2,1
 8017fe4:	e0bfec15 	stw	r2,-80(fp)
 8017fe8:	e0bfec17 	ldw	r2,-80(fp)
 8017fec:	10800510 	cmplti	r2,r2,20
 8017ff0:	103fef1e 	bne	r2,zero,8017fb0 <_gp+0xffff2fa8>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 8017ff4:	e0bfeb0f 	ldh	r2,-84(fp)
 8017ff8:	1000a916 	blt	r2,zero,80182a0 <alt_up_sd_card_fopen+0x364>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 8017ffc:	e0bfed17 	ldw	r2,-76(fp)
 8018000:	1009883a 	mov	r4,r2
 8018004:	e0bfeb0f 	ldh	r2,-84(fp)
 8018008:	100691ba 	slli	r3,r2,6
 801800c:	008200b4 	movhi	r2,2050
 8018010:	10bb2204 	addi	r2,r2,-4984
 8018014:	1885883a 	add	r2,r3,r2
 8018018:	100d883a 	mov	r6,r2
 801801c:	e17ffe17 	ldw	r5,-8(fp)
 8018020:	80169440 	call	8016944 <find_file_in_directory>
 8018024:	10007b26 	beq	r2,zero,8018214 <alt_up_sd_card_fopen+0x2d8>
                {
                    if (create)
 8018028:	e0bfff17 	ldw	r2,-4(fp)
 801802c:	10000226 	beq	r2,zero,8018038 <alt_up_sd_card_fopen+0xfc>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 8018030:	00bfffc4 	movi	r2,-1
 8018034:	00009b06 	br	80182a4 <alt_up_sd_card_fopen+0x368>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 8018038:	e13feb0f 	ldh	r4,-84(fp)
 801803c:	e0ffeb0f 	ldh	r3,-84(fp)
 8018040:	008200b4 	movhi	r2,2050
 8018044:	10bb2204 	addi	r2,r2,-4984
 8018048:	180691ba 	slli	r3,r3,6
 801804c:	10c5883a 	add	r2,r2,r3
 8018050:	10800584 	addi	r2,r2,22
 8018054:	1080000b 	ldhu	r2,0(r2)
 8018058:	10ffffcc 	andi	r3,r2,65535
 801805c:	008200b4 	movhi	r2,2050
 8018060:	10bb2204 	addi	r2,r2,-4984
 8018064:	200891ba 	slli	r4,r4,6
 8018068:	1105883a 	add	r2,r2,r4
 801806c:	10800704 	addi	r2,r2,28
 8018070:	10c00015 	stw	r3,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 8018074:	e0ffeb0f 	ldh	r3,-84(fp)
 8018078:	008200b4 	movhi	r2,2050
 801807c:	10bb2204 	addi	r2,r2,-4984
 8018080:	180691ba 	slli	r3,r3,6
 8018084:	10c5883a 	add	r2,r2,r3
 8018088:	10800804 	addi	r2,r2,32
 801808c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 8018090:	e0ffeb0f 	ldh	r3,-84(fp)
 8018094:	008200b4 	movhi	r2,2050
 8018098:	10bb2204 	addi	r2,r2,-4984
 801809c:	180691ba 	slli	r3,r3,6
 80180a0:	10c5883a 	add	r2,r2,r3
 80180a4:	10800904 	addi	r2,r2,36
 80180a8:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 80180ac:	e0ffeb0f 	ldh	r3,-84(fp)
 80180b0:	008200b4 	movhi	r2,2050
 80180b4:	10bb2204 	addi	r2,r2,-4984
 80180b8:	180691ba 	slli	r3,r3,6
 80180bc:	10c5883a 	add	r2,r2,r3
 80180c0:	10800f04 	addi	r2,r2,60
 80180c4:	00c00044 	movi	r3,1
 80180c8:	10c00015 	stw	r3,0(r2)
    				active_files[file_record_index].modified = false;
 80180cc:	e0ffeb0f 	ldh	r3,-84(fp)
 80180d0:	008200b4 	movhi	r2,2050
 80180d4:	10bb2204 	addi	r2,r2,-4984
 80180d8:	180691ba 	slli	r3,r3,6
 80180dc:	10c5883a 	add	r2,r2,r3
 80180e0:	10800e04 	addi	r2,r2,56
 80180e4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 80180e8:	e03fec15 	stw	zero,-80(fp)
 80180ec:	00004506 	br	8018204 <alt_up_sd_card_fopen+0x2c8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 80180f0:	e0ffeb0f 	ldh	r3,-84(fp)
 80180f4:	e0bfec17 	ldw	r2,-80(fp)
 80180f8:	18803f26 	beq	r3,r2,80181f8 <alt_up_sd_card_fopen+0x2bc>
 80180fc:	008200b4 	movhi	r2,2050
 8018100:	10bb2204 	addi	r2,r2,-4984
 8018104:	e0ffec17 	ldw	r3,-80(fp)
 8018108:	180691ba 	slli	r3,r3,6
 801810c:	10c5883a 	add	r2,r2,r3
 8018110:	10800f04 	addi	r2,r2,60
 8018114:	10800017 	ldw	r2,0(r2)
 8018118:	10800058 	cmpnei	r2,r2,1
 801811c:	1000361e 	bne	r2,zero,80181f8 <alt_up_sd_card_fopen+0x2bc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 8018120:	e0ffeb0f 	ldh	r3,-84(fp)
 8018124:	008200b4 	movhi	r2,2050
 8018128:	10bb2204 	addi	r2,r2,-4984
 801812c:	180691ba 	slli	r3,r3,6
 8018130:	10c5883a 	add	r2,r2,r3
 8018134:	10800a04 	addi	r2,r2,40
 8018138:	10c00017 	ldw	r3,0(r2)
 801813c:	008200b4 	movhi	r2,2050
 8018140:	10bb2204 	addi	r2,r2,-4984
 8018144:	e13fec17 	ldw	r4,-80(fp)
 8018148:	200891ba 	slli	r4,r4,6
 801814c:	1105883a 	add	r2,r2,r4
 8018150:	10800a04 	addi	r2,r2,40
 8018154:	10800017 	ldw	r2,0(r2)
 8018158:	1880271e 	bne	r3,r2,80181f8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 801815c:	e0ffeb0f 	ldh	r3,-84(fp)
 8018160:	008200b4 	movhi	r2,2050
 8018164:	10bb2204 	addi	r2,r2,-4984
 8018168:	180691ba 	slli	r3,r3,6
 801816c:	10c5883a 	add	r2,r2,r3
 8018170:	10800b04 	addi	r2,r2,44
 8018174:	10c00017 	ldw	r3,0(r2)
 8018178:	008200b4 	movhi	r2,2050
 801817c:	10bb2204 	addi	r2,r2,-4984
 8018180:	e13fec17 	ldw	r4,-80(fp)
 8018184:	200891ba 	slli	r4,r4,6
 8018188:	1105883a 	add	r2,r2,r4
 801818c:	10800b04 	addi	r2,r2,44
 8018190:	10800017 	ldw	r2,0(r2)
					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 8018194:	1880181e 	bne	r3,r2,80181f8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
 8018198:	e0ffeb0f 	ldh	r3,-84(fp)
 801819c:	008200b4 	movhi	r2,2050
 80181a0:	10bb2204 	addi	r2,r2,-4984
 80181a4:	180691ba 	slli	r3,r3,6
 80181a8:	10c5883a 	add	r2,r2,r3
 80181ac:	10800c04 	addi	r2,r2,48
 80181b0:	1100000b 	ldhu	r4,0(r2)
 80181b4:	008200b4 	movhi	r2,2050
 80181b8:	10bb2204 	addi	r2,r2,-4984
 80181bc:	e0ffec17 	ldw	r3,-80(fp)
 80181c0:	180691ba 	slli	r3,r3,6
 80181c4:	10c5883a 	add	r2,r2,r3
 80181c8:	10800c04 	addi	r2,r2,48
 80181cc:	1080000b 	ldhu	r2,0(r2)
					for (index = 0; index < MAX_FILES_OPENED; index++)
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
 80181d0:	20ffffcc 	andi	r3,r4,65535
 80181d4:	18e0001c 	xori	r3,r3,32768
 80181d8:	18e00004 	addi	r3,r3,-32768
 80181dc:	10bfffcc 	andi	r2,r2,65535
 80181e0:	10a0001c 	xori	r2,r2,32768
 80181e4:	10a00004 	addi	r2,r2,-32768
 80181e8:	1880031e 	bne	r3,r2,80181f8 <alt_up_sd_card_fopen+0x2bc>
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 80181ec:	00bfff84 	movi	r2,-2
 80181f0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 80181f4:	00002a06 	br	80182a0 <alt_up_sd_card_fopen+0x364>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 80181f8:	e0bfec17 	ldw	r2,-80(fp)
 80181fc:	10800044 	addi	r2,r2,1
 8018200:	e0bfec15 	stw	r2,-80(fp)
 8018204:	e0bfec17 	ldw	r2,-80(fp)
 8018208:	10800510 	cmplti	r2,r2,20
 801820c:	103fb81e 	bne	r2,zero,80180f0 <_gp+0xffff30e8>
 8018210:	00002306 	br	80182a0 <alt_up_sd_card_fopen+0x364>
							}
						}
					}

                }
                else if (create)
 8018214:	e0bfff17 	ldw	r2,-4(fp)
 8018218:	10001f26 	beq	r2,zero,8018298 <alt_up_sd_card_fopen+0x35c>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 801821c:	e0bfeb0f 	ldh	r2,-84(fp)
 8018220:	100691ba 	slli	r3,r2,6
 8018224:	008200b4 	movhi	r2,2050
 8018228:	10bb2204 	addi	r2,r2,-4984
 801822c:	1885883a 	add	r2,r3,r2
 8018230:	e0ffee04 	addi	r3,fp,-72
 8018234:	180d883a 	mov	r6,r3
 8018238:	100b883a 	mov	r5,r2
 801823c:	e13ffe17 	ldw	r4,-8(fp)
 8018240:	80174980 	call	8017498 <create_file>
 8018244:	10001126 	beq	r2,zero,801828c <alt_up_sd_card_fopen+0x350>
                    {
                        active_files[file_record_index].in_use = true;
 8018248:	e0ffeb0f 	ldh	r3,-84(fp)
 801824c:	008200b4 	movhi	r2,2050
 8018250:	10bb2204 	addi	r2,r2,-4984
 8018254:	180691ba 	slli	r3,r3,6
 8018258:	10c5883a 	add	r2,r2,r3
 801825c:	10800f04 	addi	r2,r2,60
 8018260:	00c00044 	movi	r3,1
 8018264:	10c00015 	stw	r3,0(r2)
    					active_files[file_record_index].modified = true;
 8018268:	e0ffeb0f 	ldh	r3,-84(fp)
 801826c:	008200b4 	movhi	r2,2050
 8018270:	10bb2204 	addi	r2,r2,-4984
 8018274:	180691ba 	slli	r3,r3,6
 8018278:	10c5883a 	add	r2,r2,r3
 801827c:	10800e04 	addi	r2,r2,56
 8018280:	00c00044 	movi	r3,1
 8018284:	10c00015 	stw	r3,0(r2)
 8018288:	00000506 	br	80182a0 <alt_up_sd_card_fopen+0x364>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 801828c:	00bfffc4 	movi	r2,-1
 8018290:	e0bfeb0d 	sth	r2,-84(fp)
 8018294:	00000206 	br	80182a0 <alt_up_sd_card_fopen+0x364>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 8018298:	00bfffc4 	movi	r2,-1
 801829c:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
 80182a0:	e0bfeb0b 	ldhu	r2,-84(fp)
}
 80182a4:	e037883a 	mov	sp,fp
 80182a8:	dfc00117 	ldw	ra,4(sp)
 80182ac:	df000017 	ldw	fp,0(sp)
 80182b0:	dec00204 	addi	sp,sp,8
 80182b4:	f800283a 	ret

080182b8 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 80182b8:	defffd04 	addi	sp,sp,-12
 80182bc:	df000215 	stw	fp,8(sp)
 80182c0:	df000204 	addi	fp,sp,8
 80182c4:	2007883a 	mov	r3,r4
 80182c8:	2805883a 	mov	r2,r5
 80182cc:	e0fffe0d 	sth	r3,-8(fp)
 80182d0:	e0bfff0d 	sth	r2,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 80182d4:	e0bffe0f 	ldh	r2,-8(fp)
 80182d8:	10001416 	blt	r2,zero,801832c <alt_up_sd_card_set_attributes+0x74>
 80182dc:	e0bffe0f 	ldh	r2,-8(fp)
 80182e0:	10800508 	cmpgei	r2,r2,20
 80182e4:	1000111e 	bne	r2,zero,801832c <alt_up_sd_card_set_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 80182e8:	e0fffe0f 	ldh	r3,-8(fp)
 80182ec:	008200b4 	movhi	r2,2050
 80182f0:	10bb2204 	addi	r2,r2,-4984
 80182f4:	180691ba 	slli	r3,r3,6
 80182f8:	10c5883a 	add	r2,r2,r3
 80182fc:	10800f04 	addi	r2,r2,60
 8018300:	10800017 	ldw	r2,0(r2)
 8018304:	10000926 	beq	r2,zero,801832c <alt_up_sd_card_set_attributes+0x74>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 8018308:	e0fffe0f 	ldh	r3,-8(fp)
 801830c:	e0bfff0b 	ldhu	r2,-4(fp)
 8018310:	1009883a 	mov	r4,r2
 8018314:	008200b4 	movhi	r2,2050
 8018318:	10bb2204 	addi	r2,r2,-4984
 801831c:	180691ba 	slli	r3,r3,6
 8018320:	10c5883a 	add	r2,r2,r3
 8018324:	108002c4 	addi	r2,r2,11
 8018328:	11000005 	stb	r4,0(r2)
        }
    }
}
 801832c:	0001883a 	nop
 8018330:	e037883a 	mov	sp,fp
 8018334:	df000017 	ldw	fp,0(sp)
 8018338:	dec00104 	addi	sp,sp,4
 801833c:	f800283a 	ret

08018340 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 8018340:	defffd04 	addi	sp,sp,-12
 8018344:	df000215 	stw	fp,8(sp)
 8018348:	df000204 	addi	fp,sp,8
 801834c:	2005883a 	mov	r2,r4
 8018350:	e0bfff0d 	sth	r2,-4(fp)
	short int result = -1;
 8018354:	00bfffc4 	movi	r2,-1
 8018358:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 801835c:	e0bfff0f 	ldh	r2,-4(fp)
 8018360:	10001416 	blt	r2,zero,80183b4 <alt_up_sd_card_get_attributes+0x74>
 8018364:	e0bfff0f 	ldh	r2,-4(fp)
 8018368:	10800508 	cmpgei	r2,r2,20
 801836c:	1000111e 	bne	r2,zero,80183b4 <alt_up_sd_card_get_attributes+0x74>
    {
        if (active_files[file_handle].in_use)
 8018370:	e0ffff0f 	ldh	r3,-4(fp)
 8018374:	008200b4 	movhi	r2,2050
 8018378:	10bb2204 	addi	r2,r2,-4984
 801837c:	180691ba 	slli	r3,r3,6
 8018380:	10c5883a 	add	r2,r2,r3
 8018384:	10800f04 	addi	r2,r2,60
 8018388:	10800017 	ldw	r2,0(r2)
 801838c:	10000926 	beq	r2,zero,80183b4 <alt_up_sd_card_get_attributes+0x74>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 8018390:	e0ffff0f 	ldh	r3,-4(fp)
 8018394:	008200b4 	movhi	r2,2050
 8018398:	10bb2204 	addi	r2,r2,-4984
 801839c:	180691ba 	slli	r3,r3,6
 80183a0:	10c5883a 	add	r2,r2,r3
 80183a4:	108002c4 	addi	r2,r2,11
 80183a8:	10800003 	ldbu	r2,0(r2)
 80183ac:	10803fcc 	andi	r2,r2,255
 80183b0:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 80183b4:	e0bffe0b 	ldhu	r2,-8(fp)
}
 80183b8:	e037883a 	mov	sp,fp
 80183bc:	df000017 	ldw	fp,0(sp)
 80183c0:	dec00104 	addi	sp,sp,4
 80183c4:	f800283a 	ret

080183c8 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 80183c8:	defff904 	addi	sp,sp,-28
 80183cc:	dfc00615 	stw	ra,24(sp)
 80183d0:	df000515 	stw	fp,20(sp)
 80183d4:	dc000415 	stw	r16,16(sp)
 80183d8:	df000504 	addi	fp,sp,20
 80183dc:	2005883a 	mov	r2,r4
 80183e0:	e0bffe0d 	sth	r2,-8(fp)
    short int ch = -1;
 80183e4:	00bfffc4 	movi	r2,-1
 80183e8:	e0bffb0d 	sth	r2,-20(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 80183ec:	e0bffe0f 	ldh	r2,-8(fp)
 80183f0:	1000d216 	blt	r2,zero,801873c <alt_up_sd_card_read+0x374>
 80183f4:	e0bffe0f 	ldh	r2,-8(fp)
 80183f8:	10800508 	cmpgei	r2,r2,20
 80183fc:	1000cf1e 	bne	r2,zero,801873c <alt_up_sd_card_read+0x374>
    {
        if (active_files[file_handle].in_use)
 8018400:	e0fffe0f 	ldh	r3,-8(fp)
 8018404:	008200b4 	movhi	r2,2050
 8018408:	10bb2204 	addi	r2,r2,-4984
 801840c:	180691ba 	slli	r3,r3,6
 8018410:	10c5883a 	add	r2,r2,r3
 8018414:	10800f04 	addi	r2,r2,60
 8018418:	10800017 	ldw	r2,0(r2)
 801841c:	1000c726 	beq	r2,zero,801873c <alt_up_sd_card_read+0x374>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 8018420:	e0fffe0f 	ldh	r3,-8(fp)
 8018424:	008200b4 	movhi	r2,2050
 8018428:	10bb2204 	addi	r2,r2,-4984
 801842c:	180691ba 	slli	r3,r3,6
 8018430:	10c5883a 	add	r2,r2,r3
 8018434:	10800904 	addi	r2,r2,36
 8018438:	10c00017 	ldw	r3,0(r2)
 801843c:	e13ffe0f 	ldh	r4,-8(fp)
 8018440:	008200b4 	movhi	r2,2050
 8018444:	10bb2204 	addi	r2,r2,-4984
 8018448:	200891ba 	slli	r4,r4,6
 801844c:	1105883a 	add	r2,r2,r4
 8018450:	10800604 	addi	r2,r2,24
 8018454:	10800017 	ldw	r2,0(r2)
 8018458:	1880b82e 	bgeu	r3,r2,801873c <alt_up_sd_card_read+0x374>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 801845c:	008200b4 	movhi	r2,2050
 8018460:	10bb0d04 	addi	r2,r2,-5068
 8018464:	14001417 	ldw	r16,80(r2)
 8018468:	e0fffe0f 	ldh	r3,-8(fp)
 801846c:	008200b4 	movhi	r2,2050
 8018470:	10bb2204 	addi	r2,r2,-4984
 8018474:	180691ba 	slli	r3,r3,6
 8018478:	10c5883a 	add	r2,r2,r3
 801847c:	10800704 	addi	r2,r2,28
 8018480:	10800017 	ldw	r2,0(r2)
 8018484:	10ffff84 	addi	r3,r2,-2
 8018488:	008200b4 	movhi	r2,2050
 801848c:	10bb0d04 	addi	r2,r2,-5068
 8018490:	10800383 	ldbu	r2,14(r2)
 8018494:	10803fcc 	andi	r2,r2,255
 8018498:	100b883a 	mov	r5,r2
 801849c:	1809883a 	mov	r4,r3
 80184a0:	8013c380 	call	8013c38 <__mulsi3>
 80184a4:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;
 80184a8:	e13ffe0f 	ldh	r4,-8(fp)
 80184ac:	008200b4 	movhi	r2,2050
 80184b0:	10bb2204 	addi	r2,r2,-4984
 80184b4:	200891ba 	slli	r4,r4,6
 80184b8:	1105883a 	add	r2,r2,r4
 80184bc:	10800804 	addi	r2,r2,32
 80184c0:	10800017 	ldw	r2,0(r2)
    {
        if (active_files[file_handle].in_use)
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80184c4:	1885883a 	add	r2,r3,r2
 80184c8:	e0bffc15 	stw	r2,-16(fp)
                                  active_files[file_handle].current_sector_in_cluster;
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 80184cc:	e0fffe0f 	ldh	r3,-8(fp)
 80184d0:	008200b4 	movhi	r2,2050
 80184d4:	10bb2204 	addi	r2,r2,-4984
 80184d8:	180691ba 	slli	r3,r3,6
 80184dc:	10c5883a 	add	r2,r2,r3
 80184e0:	10800904 	addi	r2,r2,36
 80184e4:	10800017 	ldw	r2,0(r2)
 80184e8:	10006a26 	beq	r2,zero,8018694 <alt_up_sd_card_read+0x2cc>
 80184ec:	e0fffe0f 	ldh	r3,-8(fp)
 80184f0:	008200b4 	movhi	r2,2050
 80184f4:	10bb2204 	addi	r2,r2,-4984
 80184f8:	180691ba 	slli	r3,r3,6
 80184fc:	10c5883a 	add	r2,r2,r3
 8018500:	10800904 	addi	r2,r2,36
 8018504:	10800017 	ldw	r2,0(r2)
 8018508:	10807fcc 	andi	r2,r2,511
 801850c:	1000611e 	bne	r2,zero,8018694 <alt_up_sd_card_read+0x2cc>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8018510:	e0fffe0f 	ldh	r3,-8(fp)
 8018514:	008200b4 	movhi	r2,2050
 8018518:	10bb2204 	addi	r2,r2,-4984
 801851c:	180691ba 	slli	r3,r3,6
 8018520:	10c5883a 	add	r2,r2,r3
 8018524:	10800804 	addi	r2,r2,32
 8018528:	10c00017 	ldw	r3,0(r2)
 801852c:	008200b4 	movhi	r2,2050
 8018530:	10bb0d04 	addi	r2,r2,-5068
 8018534:	10800383 	ldbu	r2,14(r2)
 8018538:	10803fcc 	andi	r2,r2,255
 801853c:	10bfffc4 	addi	r2,r2,-1
 8018540:	1880421e 	bne	r3,r2,801864c <alt_up_sd_card_read+0x284>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 8018544:	e0fffe0f 	ldh	r3,-8(fp)
 8018548:	008200b4 	movhi	r2,2050
 801854c:	10bb2204 	addi	r2,r2,-4984
 8018550:	180691ba 	slli	r3,r3,6
 8018554:	10c5883a 	add	r2,r2,r3
 8018558:	10800704 	addi	r2,r2,28
 801855c:	10800017 	ldw	r2,0(r2)
 8018560:	e0fffd04 	addi	r3,fp,-12
 8018564:	180b883a 	mov	r5,r3
 8018568:	1009883a 	mov	r4,r2
 801856c:	8014dac0 	call	8014dac <get_cluster_flag>
 8018570:	10003426 	beq	r2,zero,8018644 <alt_up_sd_card_read+0x27c>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 8018574:	e0bffd0b 	ldhu	r2,-12(fp)
 8018578:	10bfffcc 	andi	r2,r2,65535
 801857c:	10fffe0c 	andi	r3,r2,65528
 8018580:	00bffe14 	movui	r2,65528
 8018584:	1880021e 	bne	r3,r2,8018590 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
 8018588:	00bfffc4 	movi	r2,-1
 801858c:	00006c06 	br	8018740 <alt_up_sd_card_read+0x378>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 8018590:	e13ffe0f 	ldh	r4,-8(fp)
 8018594:	e0bffd0b 	ldhu	r2,-12(fp)
 8018598:	10ffffcc 	andi	r3,r2,65535
 801859c:	008200b4 	movhi	r2,2050
 80185a0:	10bb2204 	addi	r2,r2,-4984
 80185a4:	200891ba 	slli	r4,r4,6
 80185a8:	1105883a 	add	r2,r2,r4
 80185ac:	10800704 	addi	r2,r2,28
 80185b0:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 80185b4:	e0fffe0f 	ldh	r3,-8(fp)
 80185b8:	008200b4 	movhi	r2,2050
 80185bc:	10bb2204 	addi	r2,r2,-4984
 80185c0:	180691ba 	slli	r3,r3,6
 80185c4:	10c5883a 	add	r2,r2,r3
 80185c8:	10800804 	addi	r2,r2,32
 80185cc:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80185d0:	008200b4 	movhi	r2,2050
 80185d4:	10bb0d04 	addi	r2,r2,-5068
 80185d8:	14001417 	ldw	r16,80(r2)
 80185dc:	e0fffe0f 	ldh	r3,-8(fp)
 80185e0:	008200b4 	movhi	r2,2050
 80185e4:	10bb2204 	addi	r2,r2,-4984
 80185e8:	180691ba 	slli	r3,r3,6
 80185ec:	10c5883a 	add	r2,r2,r3
 80185f0:	10800704 	addi	r2,r2,28
 80185f4:	10800017 	ldw	r2,0(r2)
 80185f8:	10ffff84 	addi	r3,r2,-2
 80185fc:	008200b4 	movhi	r2,2050
 8018600:	10bb0d04 	addi	r2,r2,-5068
 8018604:	10800383 	ldbu	r2,14(r2)
 8018608:	10803fcc 	andi	r2,r2,255
 801860c:	100b883a 	mov	r5,r2
 8018610:	1809883a 	mov	r4,r3
 8018614:	8013c380 	call	8013c38 <__mulsi3>
 8018618:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 801861c:	e13ffe0f 	ldh	r4,-8(fp)
 8018620:	008200b4 	movhi	r2,2050
 8018624:	10bb2204 	addi	r2,r2,-4984
 8018628:	200891ba 	slli	r4,r4,6
 801862c:	1105883a 	add	r2,r2,r4
 8018630:	10800804 	addi	r2,r2,32
 8018634:	10800017 	ldw	r2,0(r2)
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8018638:	1885883a 	add	r2,r3,r2
 801863c:	e0bffc15 	stw	r2,-16(fp)
 8018640:	00001406 	br	8018694 <alt_up_sd_card_read+0x2cc>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 8018644:	00bfff84 	movi	r2,-2
 8018648:	00003d06 	br	8018740 <alt_up_sd_card_read+0x378>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 801864c:	e13ffe0f 	ldh	r4,-8(fp)
 8018650:	e0fffe0f 	ldh	r3,-8(fp)
 8018654:	008200b4 	movhi	r2,2050
 8018658:	10bb2204 	addi	r2,r2,-4984
 801865c:	180691ba 	slli	r3,r3,6
 8018660:	10c5883a 	add	r2,r2,r3
 8018664:	10800804 	addi	r2,r2,32
 8018668:	10800017 	ldw	r2,0(r2)
 801866c:	10c00044 	addi	r3,r2,1
 8018670:	008200b4 	movhi	r2,2050
 8018674:	10bb2204 	addi	r2,r2,-4984
 8018678:	200891ba 	slli	r4,r4,6
 801867c:	1105883a 	add	r2,r2,r4
 8018680:	10800804 	addi	r2,r2,32
 8018684:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 8018688:	e0bffc17 	ldw	r2,-16(fp)
 801868c:	10800044 	addi	r2,r2,1
 8018690:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 8018694:	d0e6f317 	ldw	r3,-25652(gp)
 8018698:	e0bffc17 	ldw	r2,-16(fp)
 801869c:	1885883a 	add	r2,r3,r2
 80186a0:	1007883a 	mov	r3,r2
 80186a4:	d0a6f717 	ldw	r2,-25636(gp)
 80186a8:	18800726 	beq	r3,r2,80186c8 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 80186ac:	d0a6f317 	ldw	r2,-25652(gp)
 80186b0:	100b883a 	mov	r5,r2
 80186b4:	e13ffc17 	ldw	r4,-16(fp)
 80186b8:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 80186bc:	1000021e 	bne	r2,zero,80186c8 <alt_up_sd_card_read+0x300>
                    {
						return -2;
 80186c0:	00bfff84 	movi	r2,-2
 80186c4:	00001e06 	br	8018740 <alt_up_sd_card_read+0x378>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 80186c8:	d0e6f217 	ldw	r3,-25656(gp)
 80186cc:	e13ffe0f 	ldh	r4,-8(fp)
 80186d0:	008200b4 	movhi	r2,2050
 80186d4:	10bb2204 	addi	r2,r2,-4984
 80186d8:	200891ba 	slli	r4,r4,6
 80186dc:	1105883a 	add	r2,r2,r4
 80186e0:	10800904 	addi	r2,r2,36
 80186e4:	10800017 	ldw	r2,0(r2)
 80186e8:	10807fcc 	andi	r2,r2,511
 80186ec:	1885883a 	add	r2,r3,r2
 80186f0:	10800023 	ldbuio	r2,0(r2)
 80186f4:	10803fcc 	andi	r2,r2,255
 80186f8:	10803fcc 	andi	r2,r2,255
 80186fc:	e0bffb0d 	sth	r2,-20(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 8018700:	e13ffe0f 	ldh	r4,-8(fp)
 8018704:	e0fffe0f 	ldh	r3,-8(fp)
 8018708:	008200b4 	movhi	r2,2050
 801870c:	10bb2204 	addi	r2,r2,-4984
 8018710:	180691ba 	slli	r3,r3,6
 8018714:	10c5883a 	add	r2,r2,r3
 8018718:	10800904 	addi	r2,r2,36
 801871c:	10800017 	ldw	r2,0(r2)
 8018720:	10c00044 	addi	r3,r2,1
 8018724:	008200b4 	movhi	r2,2050
 8018728:	10bb2204 	addi	r2,r2,-4984
 801872c:	200891ba 	slli	r4,r4,6
 8018730:	1105883a 	add	r2,r2,r4
 8018734:	10800904 	addi	r2,r2,36
 8018738:	10c00015 	stw	r3,0(r2)
            }
        }
    }
    
    return ch;
 801873c:	e0bffb0b 	ldhu	r2,-20(fp)
}
 8018740:	e6ffff04 	addi	sp,fp,-4
 8018744:	dfc00217 	ldw	ra,8(sp)
 8018748:	df000117 	ldw	fp,4(sp)
 801874c:	dc000017 	ldw	r16,0(sp)
 8018750:	dec00304 	addi	sp,sp,12
 8018754:	f800283a 	ret

08018758 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 8018758:	defff704 	addi	sp,sp,-36
 801875c:	dfc00815 	stw	ra,32(sp)
 8018760:	df000715 	stw	fp,28(sp)
 8018764:	dc000615 	stw	r16,24(sp)
 8018768:	df000704 	addi	fp,sp,28
 801876c:	2007883a 	mov	r3,r4
 8018770:	2805883a 	mov	r2,r5
 8018774:	e0fffd0d 	sth	r3,-12(fp)
 8018778:	e0bffe05 	stb	r2,-8(fp)
    bool result = false;
 801877c:	e03ff915 	stw	zero,-28(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 8018780:	e0bffd0f 	ldh	r2,-12(fp)
 8018784:	10018016 	blt	r2,zero,8018d88 <alt_up_sd_card_write+0x630>
 8018788:	e0bffd0f 	ldh	r2,-12(fp)
 801878c:	10800508 	cmpgei	r2,r2,20
 8018790:	10017d1e 	bne	r2,zero,8018d88 <alt_up_sd_card_write+0x630>
    {
        if (active_files[file_handle].in_use)
 8018794:	e0fffd0f 	ldh	r3,-12(fp)
 8018798:	008200b4 	movhi	r2,2050
 801879c:	10bb2204 	addi	r2,r2,-4984
 80187a0:	180691ba 	slli	r3,r3,6
 80187a4:	10c5883a 	add	r2,r2,r3
 80187a8:	10800f04 	addi	r2,r2,60
 80187ac:	10800017 	ldw	r2,0(r2)
 80187b0:	10017526 	beq	r2,zero,8018d88 <alt_up_sd_card_write+0x630>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80187b4:	008200b4 	movhi	r2,2050
 80187b8:	10bb0d04 	addi	r2,r2,-5068
 80187bc:	14001417 	ldw	r16,80(r2)
 80187c0:	e0fffd0f 	ldh	r3,-12(fp)
 80187c4:	008200b4 	movhi	r2,2050
 80187c8:	10bb2204 	addi	r2,r2,-4984
 80187cc:	180691ba 	slli	r3,r3,6
 80187d0:	10c5883a 	add	r2,r2,r3
 80187d4:	10800704 	addi	r2,r2,28
 80187d8:	10800017 	ldw	r2,0(r2)
 80187dc:	10ffff84 	addi	r3,r2,-2
 80187e0:	008200b4 	movhi	r2,2050
 80187e4:	10bb0d04 	addi	r2,r2,-5068
 80187e8:	10800383 	ldbu	r2,14(r2)
 80187ec:	10803fcc 	andi	r2,r2,255
 80187f0:	100b883a 	mov	r5,r2
 80187f4:	1809883a 	mov	r4,r3
 80187f8:	8013c380 	call	8013c38 <__mulsi3>
 80187fc:	8087883a 	add	r3,r16,r2
                              active_files[file_handle].current_sector_in_cluster;
 8018800:	e13ffd0f 	ldh	r4,-12(fp)
 8018804:	008200b4 	movhi	r2,2050
 8018808:	10bb2204 	addi	r2,r2,-4984
 801880c:	200891ba 	slli	r4,r4,6
 8018810:	1105883a 	add	r2,r2,r4
 8018814:	10800804 	addi	r2,r2,32
 8018818:	10800017 	ldw	r2,0(r2)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
    {
        if (active_files[file_handle].in_use)
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 801881c:	1885883a 	add	r2,r3,r2
 8018820:	e0bffa15 	stw	r2,-24(fp)
                              active_files[file_handle].current_sector_in_cluster;
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 8018824:	e0fffd0f 	ldh	r3,-12(fp)
 8018828:	008200b4 	movhi	r2,2050
 801882c:	10bb2204 	addi	r2,r2,-4984
 8018830:	180691ba 	slli	r3,r3,6
 8018834:	10c5883a 	add	r2,r2,r3
 8018838:	10800904 	addi	r2,r2,36
 801883c:	10c00017 	ldw	r3,0(r2)
 8018840:	008200b4 	movhi	r2,2050
 8018844:	10bb0d04 	addi	r2,r2,-5068
 8018848:	1080030b 	ldhu	r2,12(r2)
 801884c:	10bfffcc 	andi	r2,r2,65535
 8018850:	100b883a 	mov	r5,r2
 8018854:	1809883a 	mov	r4,r3
 8018858:	8013be00 	call	8013be0 <__umodsi3>
 801885c:	e0bffb0d 	sth	r2,-20(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 8018860:	e0fffd0f 	ldh	r3,-12(fp)
 8018864:	008200b4 	movhi	r2,2050
 8018868:	10bb2204 	addi	r2,r2,-4984
 801886c:	180691ba 	slli	r3,r3,6
 8018870:	10c5883a 	add	r2,r2,r3
 8018874:	10800904 	addi	r2,r2,36
 8018878:	10c00017 	ldw	r3,0(r2)
 801887c:	e13ffd0f 	ldh	r4,-12(fp)
 8018880:	008200b4 	movhi	r2,2050
 8018884:	10bb2204 	addi	r2,r2,-4984
 8018888:	200891ba 	slli	r4,r4,6
 801888c:	1105883a 	add	r2,r2,r4
 8018890:	10800604 	addi	r2,r2,24
 8018894:	10800017 	ldw	r2,0(r2)
 8018898:	1880692e 	bgeu	r3,r2,8018a40 <alt_up_sd_card_write+0x2e8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 801889c:	e0fffd0f 	ldh	r3,-12(fp)
 80188a0:	008200b4 	movhi	r2,2050
 80188a4:	10bb2204 	addi	r2,r2,-4984
 80188a8:	180691ba 	slli	r3,r3,6
 80188ac:	10c5883a 	add	r2,r2,r3
 80188b0:	10800904 	addi	r2,r2,36
 80188b4:	10800017 	ldw	r2,0(r2)
 80188b8:	1000e826 	beq	r2,zero,8018c5c <alt_up_sd_card_write+0x504>
 80188bc:	e0bffb0f 	ldh	r2,-20(fp)
 80188c0:	1000e61e 	bne	r2,zero,8018c5c <alt_up_sd_card_write+0x504>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 80188c4:	e0fffd0f 	ldh	r3,-12(fp)
 80188c8:	008200b4 	movhi	r2,2050
 80188cc:	10bb2204 	addi	r2,r2,-4984
 80188d0:	180691ba 	slli	r3,r3,6
 80188d4:	10c5883a 	add	r2,r2,r3
 80188d8:	10800804 	addi	r2,r2,32
 80188dc:	10c00017 	ldw	r3,0(r2)
 80188e0:	008200b4 	movhi	r2,2050
 80188e4:	10bb0d04 	addi	r2,r2,-5068
 80188e8:	10800383 	ldbu	r2,14(r2)
 80188ec:	10803fcc 	andi	r2,r2,255
 80188f0:	10bfffc4 	addi	r2,r2,-1
 80188f4:	18803f1e 	bne	r3,r2,80189f4 <alt_up_sd_card_write+0x29c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 80188f8:	e0fffd0f 	ldh	r3,-12(fp)
 80188fc:	008200b4 	movhi	r2,2050
 8018900:	10bb2204 	addi	r2,r2,-4984
 8018904:	180691ba 	slli	r3,r3,6
 8018908:	10c5883a 	add	r2,r2,r3
 801890c:	10800704 	addi	r2,r2,28
 8018910:	10800017 	ldw	r2,0(r2)
 8018914:	e0fffb84 	addi	r3,fp,-18
 8018918:	180b883a 	mov	r5,r3
 801891c:	1009883a 	mov	r4,r2
 8018920:	8014dac0 	call	8014dac <get_cluster_flag>
 8018924:	10003126 	beq	r2,zero,80189ec <alt_up_sd_card_write+0x294>
                        {
                            if (next_cluster < 0x0000fff8)
 8018928:	e0bffb8b 	ldhu	r2,-18(fp)
 801892c:	10bfffcc 	andi	r2,r2,65535
 8018930:	10bffe28 	cmpgeui	r2,r2,65528
 8018934:	1000c91e 	bne	r2,zero,8018c5c <alt_up_sd_card_write+0x504>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 8018938:	e13ffd0f 	ldh	r4,-12(fp)
 801893c:	e0bffb8b 	ldhu	r2,-18(fp)
 8018940:	10ffffcc 	andi	r3,r2,65535
 8018944:	008200b4 	movhi	r2,2050
 8018948:	10bb2204 	addi	r2,r2,-4984
 801894c:	200891ba 	slli	r4,r4,6
 8018950:	1105883a 	add	r2,r2,r4
 8018954:	10800704 	addi	r2,r2,28
 8018958:	10c00015 	stw	r3,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 801895c:	e0fffd0f 	ldh	r3,-12(fp)
 8018960:	008200b4 	movhi	r2,2050
 8018964:	10bb2204 	addi	r2,r2,-4984
 8018968:	180691ba 	slli	r3,r3,6
 801896c:	10c5883a 	add	r2,r2,r3
 8018970:	10800804 	addi	r2,r2,32
 8018974:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8018978:	008200b4 	movhi	r2,2050
 801897c:	10bb0d04 	addi	r2,r2,-5068
 8018980:	14001417 	ldw	r16,80(r2)
 8018984:	e0fffd0f 	ldh	r3,-12(fp)
 8018988:	008200b4 	movhi	r2,2050
 801898c:	10bb2204 	addi	r2,r2,-4984
 8018990:	180691ba 	slli	r3,r3,6
 8018994:	10c5883a 	add	r2,r2,r3
 8018998:	10800704 	addi	r2,r2,28
 801899c:	10800017 	ldw	r2,0(r2)
 80189a0:	10ffff84 	addi	r3,r2,-2
 80189a4:	008200b4 	movhi	r2,2050
 80189a8:	10bb0d04 	addi	r2,r2,-5068
 80189ac:	10800383 	ldbu	r2,14(r2)
 80189b0:	10803fcc 	andi	r2,r2,255
 80189b4:	100b883a 	mov	r5,r2
 80189b8:	1809883a 	mov	r4,r3
 80189bc:	8013c380 	call	8013c38 <__mulsi3>
 80189c0:	8087883a 	add	r3,r16,r2
                                  active_files[file_handle].current_sector_in_cluster;                                
 80189c4:	e13ffd0f 	ldh	r4,-12(fp)
 80189c8:	008200b4 	movhi	r2,2050
 80189cc:	10bb2204 	addi	r2,r2,-4984
 80189d0:	200891ba 	slli	r4,r4,6
 80189d4:	1105883a 	add	r2,r2,r4
 80189d8:	10800804 	addi	r2,r2,32
 80189dc:	10800017 	ldw	r2,0(r2)
                        {
                            if (next_cluster < 0x0000fff8)
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
								active_files[file_handle].current_sector_in_cluster = 0;
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 80189e0:	1885883a 	add	r2,r3,r2
 80189e4:	e0bffa15 	stw	r2,-24(fp)
 80189e8:	00009c06 	br	8018c5c <alt_up_sd_card_write+0x504>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 80189ec:	0005883a 	mov	r2,zero
 80189f0:	0000e606 	br	8018d8c <alt_up_sd_card_write+0x634>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 80189f4:	e13ffd0f 	ldh	r4,-12(fp)
 80189f8:	e0fffd0f 	ldh	r3,-12(fp)
 80189fc:	008200b4 	movhi	r2,2050
 8018a00:	10bb2204 	addi	r2,r2,-4984
 8018a04:	180691ba 	slli	r3,r3,6
 8018a08:	10c5883a 	add	r2,r2,r3
 8018a0c:	10800804 	addi	r2,r2,32
 8018a10:	10800017 	ldw	r2,0(r2)
 8018a14:	10c00044 	addi	r3,r2,1
 8018a18:	008200b4 	movhi	r2,2050
 8018a1c:	10bb2204 	addi	r2,r2,-4984
 8018a20:	200891ba 	slli	r4,r4,6
 8018a24:	1105883a 	add	r2,r2,r4
 8018a28:	10800804 	addi	r2,r2,32
 8018a2c:	10c00015 	stw	r3,0(r2)
                        data_sector = data_sector + 1;
 8018a30:	e0bffa17 	ldw	r2,-24(fp)
 8018a34:	10800044 	addi	r2,r2,1
 8018a38:	e0bffa15 	stw	r2,-24(fp)
 8018a3c:	00008706 	br	8018c5c <alt_up_sd_card_write+0x504>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 8018a40:	e0fffd0f 	ldh	r3,-12(fp)
 8018a44:	008200b4 	movhi	r2,2050
 8018a48:	10bb2204 	addi	r2,r2,-4984
 8018a4c:	180691ba 	slli	r3,r3,6
 8018a50:	10c5883a 	add	r2,r2,r3
 8018a54:	10800904 	addi	r2,r2,36
 8018a58:	10800017 	ldw	r2,0(r2)
 8018a5c:	10007f26 	beq	r2,zero,8018c5c <alt_up_sd_card_write+0x504>
 8018a60:	e0bffb0f 	ldh	r2,-20(fp)
 8018a64:	10007d1e 	bne	r2,zero,8018c5c <alt_up_sd_card_write+0x504>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 8018a68:	e0fffd0f 	ldh	r3,-12(fp)
 8018a6c:	008200b4 	movhi	r2,2050
 8018a70:	10bb2204 	addi	r2,r2,-4984
 8018a74:	180691ba 	slli	r3,r3,6
 8018a78:	10c5883a 	add	r2,r2,r3
 8018a7c:	10800804 	addi	r2,r2,32
 8018a80:	10c00017 	ldw	r3,0(r2)
 8018a84:	008200b4 	movhi	r2,2050
 8018a88:	10bb0d04 	addi	r2,r2,-5068
 8018a8c:	10800383 	ldbu	r2,14(r2)
 8018a90:	10803fcc 	andi	r2,r2,255
 8018a94:	10bfffc4 	addi	r2,r2,-1
 8018a98:	18803e1e 	bne	r3,r2,8018b94 <alt_up_sd_card_write+0x43c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 8018a9c:	e0bffc04 	addi	r2,fp,-16
 8018aa0:	1009883a 	mov	r4,r2
 8018aa4:	8016dc80 	call	8016dc8 <find_first_empty_cluster>
 8018aa8:	10003826 	beq	r2,zero,8018b8c <alt_up_sd_card_write+0x434>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 8018aac:	e0fffd0f 	ldh	r3,-12(fp)
 8018ab0:	008200b4 	movhi	r2,2050
 8018ab4:	10bb2204 	addi	r2,r2,-4984
 8018ab8:	180691ba 	slli	r3,r3,6
 8018abc:	10c5883a 	add	r2,r2,r3
 8018ac0:	10800704 	addi	r2,r2,28
 8018ac4:	10800017 	ldw	r2,0(r2)
 8018ac8:	e0fffc17 	ldw	r3,-16(fp)
 8018acc:	18ffffcc 	andi	r3,r3,65535
 8018ad0:	18e0001c 	xori	r3,r3,32768
 8018ad4:	18e00004 	addi	r3,r3,-32768
 8018ad8:	01800044 	movi	r6,1
 8018adc:	180b883a 	mov	r5,r3
 8018ae0:	1009883a 	mov	r4,r2
 8018ae4:	8014e600 	call	8014e60 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 8018ae8:	e0bffc17 	ldw	r2,-16(fp)
 8018aec:	01800044 	movi	r6,1
 8018af0:	017fffc4 	movi	r5,-1
 8018af4:	1009883a 	mov	r4,r2
 8018af8:	8014e600 	call	8014e60 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 8018afc:	e0fffd0f 	ldh	r3,-12(fp)
 8018b00:	008200b4 	movhi	r2,2050
 8018b04:	10bb2204 	addi	r2,r2,-4984
 8018b08:	180691ba 	slli	r3,r3,6
 8018b0c:	10c5883a 	add	r2,r2,r3
 8018b10:	10800704 	addi	r2,r2,28
 8018b14:	10800017 	ldw	r2,0(r2)
 8018b18:	e0fffc17 	ldw	r3,-16(fp)
 8018b1c:	18ffffcc 	andi	r3,r3,65535
 8018b20:	18e0001c 	xori	r3,r3,32768
 8018b24:	18e00004 	addi	r3,r3,-32768
 8018b28:	000d883a 	mov	r6,zero
 8018b2c:	180b883a 	mov	r5,r3
 8018b30:	1009883a 	mov	r4,r2
 8018b34:	8014e600 	call	8014e60 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 8018b38:	e0bffc17 	ldw	r2,-16(fp)
 8018b3c:	000d883a 	mov	r6,zero
 8018b40:	017fffc4 	movi	r5,-1
 8018b44:	1009883a 	mov	r4,r2
 8018b48:	8014e600 	call	8014e60 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 8018b4c:	e13ffd0f 	ldh	r4,-12(fp)
 8018b50:	e0fffc17 	ldw	r3,-16(fp)
 8018b54:	008200b4 	movhi	r2,2050
 8018b58:	10bb2204 	addi	r2,r2,-4984
 8018b5c:	200891ba 	slli	r4,r4,6
 8018b60:	1105883a 	add	r2,r2,r4
 8018b64:	10800704 	addi	r2,r2,28
 8018b68:	10c00015 	stw	r3,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 8018b6c:	e0fffd0f 	ldh	r3,-12(fp)
 8018b70:	008200b4 	movhi	r2,2050
 8018b74:	10bb2204 	addi	r2,r2,-4984
 8018b78:	180691ba 	slli	r3,r3,6
 8018b7c:	10c5883a 	add	r2,r2,r3
 8018b80:	10800804 	addi	r2,r2,32
 8018b84:	10000015 	stw	zero,0(r2)
 8018b88:	00001806 	br	8018bec <alt_up_sd_card_write+0x494>
						}
						else
						{
							return false;
 8018b8c:	0005883a 	mov	r2,zero
 8018b90:	00007e06 	br	8018d8c <alt_up_sd_card_write+0x634>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 8018b94:	e43ffd0f 	ldh	r16,-12(fp)
 8018b98:	e0fffd0f 	ldh	r3,-12(fp)
 8018b9c:	008200b4 	movhi	r2,2050
 8018ba0:	10bb2204 	addi	r2,r2,-4984
 8018ba4:	180691ba 	slli	r3,r3,6
 8018ba8:	10c5883a 	add	r2,r2,r3
 8018bac:	10800904 	addi	r2,r2,36
 8018bb0:	10c00017 	ldw	r3,0(r2)
 8018bb4:	008200b4 	movhi	r2,2050
 8018bb8:	10bb0d04 	addi	r2,r2,-5068
 8018bbc:	1080030b 	ldhu	r2,12(r2)
 8018bc0:	10bfffcc 	andi	r2,r2,65535
 8018bc4:	100b883a 	mov	r5,r2
 8018bc8:	1809883a 	mov	r4,r3
 8018bcc:	8013b7c0 	call	8013b7c <__udivsi3>
 8018bd0:	1009883a 	mov	r4,r2
 8018bd4:	008200b4 	movhi	r2,2050
 8018bd8:	10bb2204 	addi	r2,r2,-4984
 8018bdc:	800691ba 	slli	r3,r16,6
 8018be0:	10c5883a 	add	r2,r2,r3
 8018be4:	10800804 	addi	r2,r2,32
 8018be8:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8018bec:	008200b4 	movhi	r2,2050
 8018bf0:	10bb0d04 	addi	r2,r2,-5068
 8018bf4:	14001417 	ldw	r16,80(r2)
 8018bf8:	e0fffd0f 	ldh	r3,-12(fp)
 8018bfc:	008200b4 	movhi	r2,2050
 8018c00:	10bb2204 	addi	r2,r2,-4984
 8018c04:	180691ba 	slli	r3,r3,6
 8018c08:	10c5883a 	add	r2,r2,r3
 8018c0c:	10800704 	addi	r2,r2,28
 8018c10:	10800017 	ldw	r2,0(r2)
 8018c14:	10ffff84 	addi	r3,r2,-2
 8018c18:	008200b4 	movhi	r2,2050
 8018c1c:	10bb0d04 	addi	r2,r2,-5068
 8018c20:	10800383 	ldbu	r2,14(r2)
 8018c24:	10803fcc 	andi	r2,r2,255
 8018c28:	100b883a 	mov	r5,r2
 8018c2c:	1809883a 	mov	r4,r3
 8018c30:	8013c380 	call	8013c38 <__mulsi3>
 8018c34:	8087883a 	add	r3,r16,r2
                          active_files[file_handle].current_sector_in_cluster;
 8018c38:	e13ffd0f 	ldh	r4,-12(fp)
 8018c3c:	008200b4 	movhi	r2,2050
 8018c40:	10bb2204 	addi	r2,r2,-4984
 8018c44:	200891ba 	slli	r4,r4,6
 8018c48:	1105883a 	add	r2,r2,r4
 8018c4c:	10800804 	addi	r2,r2,32
 8018c50:	10800017 	ldw	r2,0(r2)
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 8018c54:	1885883a 	add	r2,r3,r2
 8018c58:	e0bffa15 	stw	r2,-24(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 8018c5c:	d0e6f317 	ldw	r3,-25652(gp)
 8018c60:	e0bffa17 	ldw	r2,-24(fp)
 8018c64:	1885883a 	add	r2,r3,r2
 8018c68:	1007883a 	mov	r3,r2
 8018c6c:	d0a6f717 	ldw	r2,-25636(gp)
 8018c70:	18800726 	beq	r3,r2,8018c90 <alt_up_sd_card_write+0x538>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 8018c74:	d0a6f317 	ldw	r2,-25652(gp)
 8018c78:	100b883a 	mov	r5,r2
 8018c7c:	e13ffa17 	ldw	r4,-24(fp)
 8018c80:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8018c84:	1000021e 	bne	r2,zero,8018c90 <alt_up_sd_card_write+0x538>
                {
					return false;
 8018c88:	0005883a 	mov	r2,zero
 8018c8c:	00003f06 	br	8018d8c <alt_up_sd_card_write+0x634>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 8018c90:	d0e6f217 	ldw	r3,-25656(gp)
 8018c94:	e0bffb0f 	ldh	r2,-20(fp)
 8018c98:	1885883a 	add	r2,r3,r2
 8018c9c:	e0fffe07 	ldb	r3,-8(fp)
 8018ca0:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 8018ca4:	e13ffd0f 	ldh	r4,-12(fp)
 8018ca8:	e0fffd0f 	ldh	r3,-12(fp)
 8018cac:	008200b4 	movhi	r2,2050
 8018cb0:	10bb2204 	addi	r2,r2,-4984
 8018cb4:	180691ba 	slli	r3,r3,6
 8018cb8:	10c5883a 	add	r2,r2,r3
 8018cbc:	10800904 	addi	r2,r2,36
 8018cc0:	10800017 	ldw	r2,0(r2)
 8018cc4:	10c00044 	addi	r3,r2,1
 8018cc8:	008200b4 	movhi	r2,2050
 8018ccc:	10bb2204 	addi	r2,r2,-4984
 8018cd0:	200891ba 	slli	r4,r4,6
 8018cd4:	1105883a 	add	r2,r2,r4
 8018cd8:	10800904 	addi	r2,r2,36
 8018cdc:	10c00015 	stw	r3,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 8018ce0:	e0fffd0f 	ldh	r3,-12(fp)
 8018ce4:	008200b4 	movhi	r2,2050
 8018ce8:	10bb2204 	addi	r2,r2,-4984
 8018cec:	180691ba 	slli	r3,r3,6
 8018cf0:	10c5883a 	add	r2,r2,r3
 8018cf4:	10800904 	addi	r2,r2,36
 8018cf8:	10c00017 	ldw	r3,0(r2)
 8018cfc:	e13ffd0f 	ldh	r4,-12(fp)
 8018d00:	008200b4 	movhi	r2,2050
 8018d04:	10bb2204 	addi	r2,r2,-4984
 8018d08:	200891ba 	slli	r4,r4,6
 8018d0c:	1105883a 	add	r2,r2,r4
 8018d10:	10800604 	addi	r2,r2,24
 8018d14:	10800017 	ldw	r2,0(r2)
 8018d18:	18801736 	bltu	r3,r2,8018d78 <alt_up_sd_card_write+0x620>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 8018d1c:	e13ffd0f 	ldh	r4,-12(fp)
 8018d20:	e0fffd0f 	ldh	r3,-12(fp)
 8018d24:	008200b4 	movhi	r2,2050
 8018d28:	10bb2204 	addi	r2,r2,-4984
 8018d2c:	180691ba 	slli	r3,r3,6
 8018d30:	10c5883a 	add	r2,r2,r3
 8018d34:	10800604 	addi	r2,r2,24
 8018d38:	10800017 	ldw	r2,0(r2)
 8018d3c:	10c00044 	addi	r3,r2,1
 8018d40:	008200b4 	movhi	r2,2050
 8018d44:	10bb2204 	addi	r2,r2,-4984
 8018d48:	200891ba 	slli	r4,r4,6
 8018d4c:	1105883a 	add	r2,r2,r4
 8018d50:	10800604 	addi	r2,r2,24
 8018d54:	10c00015 	stw	r3,0(r2)
				active_files[file_handle].modified = true;
 8018d58:	e0fffd0f 	ldh	r3,-12(fp)
 8018d5c:	008200b4 	movhi	r2,2050
 8018d60:	10bb2204 	addi	r2,r2,-4984
 8018d64:	180691ba 	slli	r3,r3,6
 8018d68:	10c5883a 	add	r2,r2,r3
 8018d6c:	10800e04 	addi	r2,r2,56
 8018d70:	00c00044 	movi	r3,1
 8018d74:	10c00015 	stw	r3,0(r2)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 8018d78:	00800044 	movi	r2,1
 8018d7c:	d0a6f615 	stw	r2,-25640(gp)
			result = true;
 8018d80:	00800044 	movi	r2,1
 8018d84:	e0bff915 	stw	r2,-28(fp)
		}
    }
    
    return result;
 8018d88:	e0bff917 	ldw	r2,-28(fp)
}
 8018d8c:	e6ffff04 	addi	sp,fp,-4
 8018d90:	dfc00217 	ldw	ra,8(sp)
 8018d94:	df000117 	ldw	fp,4(sp)
 8018d98:	dc000017 	ldw	r16,0(sp)
 8018d9c:	dec00304 	addi	sp,sp,12
 8018da0:	f800283a 	ret

08018da4 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 8018da4:	defffa04 	addi	sp,sp,-24
 8018da8:	dfc00515 	stw	ra,20(sp)
 8018dac:	df000415 	stw	fp,16(sp)
 8018db0:	dc000315 	stw	r16,12(sp)
 8018db4:	df000404 	addi	fp,sp,16
 8018db8:	2005883a 	mov	r2,r4
 8018dbc:	e0bffe0d 	sth	r2,-8(fp)
    bool result = false;
 8018dc0:	e03ffc15 	stw	zero,-16(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 8018dc4:	80179740 	call	8017974 <alt_up_sd_card_is_Present>
 8018dc8:	10006226 	beq	r2,zero,8018f54 <alt_up_sd_card_fclose+0x1b0>
 8018dcc:	d0a6ec17 	ldw	r2,-25680(gp)
 8018dd0:	10006026 	beq	r2,zero,8018f54 <alt_up_sd_card_fclose+0x1b0>
    {
        if (active_files[file_handle].in_use) 
 8018dd4:	e0fffe0f 	ldh	r3,-8(fp)
 8018dd8:	008200b4 	movhi	r2,2050
 8018ddc:	10bb2204 	addi	r2,r2,-4984
 8018de0:	180691ba 	slli	r3,r3,6
 8018de4:	10c5883a 	add	r2,r2,r3
 8018de8:	10800f04 	addi	r2,r2,60
 8018dec:	10800017 	ldw	r2,0(r2)
 8018df0:	10005826 	beq	r2,zero,8018f54 <alt_up_sd_card_fclose+0x1b0>
        {
			if (active_files[file_handle].modified)
 8018df4:	e0fffe0f 	ldh	r3,-8(fp)
 8018df8:	008200b4 	movhi	r2,2050
 8018dfc:	10bb2204 	addi	r2,r2,-4984
 8018e00:	180691ba 	slli	r3,r3,6
 8018e04:	10c5883a 	add	r2,r2,r3
 8018e08:	10800e04 	addi	r2,r2,56
 8018e0c:	10800017 	ldw	r2,0(r2)
 8018e10:	10004726 	beq	r2,zero,8018f30 <alt_up_sd_card_fclose+0x18c>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 8018e14:	e0fffe0f 	ldh	r3,-8(fp)
 8018e18:	008200b4 	movhi	r2,2050
 8018e1c:	10bb2204 	addi	r2,r2,-4984
 8018e20:	180691ba 	slli	r3,r3,6
 8018e24:	10c5883a 	add	r2,r2,r3
 8018e28:	10800b04 	addi	r2,r2,44
 8018e2c:	10800017 	ldw	r2,0(r2)
 8018e30:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 8018e34:	e0fffe0f 	ldh	r3,-8(fp)
 8018e38:	008200b4 	movhi	r2,2050
 8018e3c:	10bb2204 	addi	r2,r2,-4984
 8018e40:	180691ba 	slli	r3,r3,6
 8018e44:	10c5883a 	add	r2,r2,r3
 8018e48:	10800a04 	addi	r2,r2,40
 8018e4c:	10800017 	ldw	r2,0(r2)
 8018e50:	1000071e 	bne	r2,zero,8018e70 <alt_up_sd_card_fclose+0xcc>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 8018e54:	008200b4 	movhi	r2,2050
 8018e58:	10bb0d04 	addi	r2,r2,-5068
 8018e5c:	10801317 	ldw	r2,76(r2)
 8018e60:	e0fffd17 	ldw	r3,-12(fp)
 8018e64:	1885883a 	add	r2,r3,r2
 8018e68:	e0bffd15 	stw	r2,-12(fp)
 8018e6c:	00001606 	br	8018ec8 <alt_up_sd_card_fclose+0x124>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 8018e70:	008200b4 	movhi	r2,2050
 8018e74:	10bb0d04 	addi	r2,r2,-5068
 8018e78:	10c01417 	ldw	r3,80(r2)
 8018e7c:	e0bffd17 	ldw	r2,-12(fp)
 8018e80:	18a1883a 	add	r16,r3,r2
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
 8018e84:	e0fffe0f 	ldh	r3,-8(fp)
 8018e88:	008200b4 	movhi	r2,2050
 8018e8c:	10bb2204 	addi	r2,r2,-4984
 8018e90:	180691ba 	slli	r3,r3,6
 8018e94:	10c5883a 	add	r2,r2,r3
 8018e98:	10800a04 	addi	r2,r2,40
 8018e9c:	10800017 	ldw	r2,0(r2)
 8018ea0:	10ffff84 	addi	r3,r2,-2
 8018ea4:	008200b4 	movhi	r2,2050
 8018ea8:	10bb0d04 	addi	r2,r2,-5068
 8018eac:	10800383 	ldbu	r2,14(r2)
 8018eb0:	10803fcc 	andi	r2,r2,255
 8018eb4:	100b883a 	mov	r5,r2
 8018eb8:	1809883a 	mov	r4,r3
 8018ebc:	8013c380 	call	8013c38 <__mulsi3>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 8018ec0:	8085883a 	add	r2,r16,r2
 8018ec4:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 8018ec8:	e0bffd17 	ldw	r2,-12(fp)
 8018ecc:	d0e6f317 	ldw	r3,-25652(gp)
 8018ed0:	180b883a 	mov	r5,r3
 8018ed4:	1009883a 	mov	r4,r2
 8018ed8:	8014cd40 	call	8014cd4 <Read_Sector_Data>
 8018edc:	10001426 	beq	r2,zero,8018f30 <alt_up_sd_card_fclose+0x18c>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 8018ee0:	e0fffe0f 	ldh	r3,-8(fp)
 8018ee4:	008200b4 	movhi	r2,2050
 8018ee8:	10bb2204 	addi	r2,r2,-4984
 8018eec:	180691ba 	slli	r3,r3,6
 8018ef0:	10c5883a 	add	r2,r2,r3
 8018ef4:	10800c04 	addi	r2,r2,48
 8018ef8:	1080000b 	ldhu	r2,0(r2)
 8018efc:	113fffcc 	andi	r4,r2,65535
 8018f00:	2120001c 	xori	r4,r4,32768
 8018f04:	21200004 	addi	r4,r4,-32768
 8018f08:	e0bffe0f 	ldh	r2,-8(fp)
 8018f0c:	100691ba 	slli	r3,r2,6
 8018f10:	008200b4 	movhi	r2,2050
 8018f14:	10bb2204 	addi	r2,r2,-4984
 8018f18:	1885883a 	add	r2,r3,r2
 8018f1c:	100b883a 	mov	r5,r2
 8018f20:	80153600 	call	8015360 <Write_File_Record_At_Offset>
 8018f24:	10000226 	beq	r2,zero,8018f30 <alt_up_sd_card_fclose+0x18c>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 8018f28:	8014c880 	call	8014c88 <Save_Modified_Sector>
 8018f2c:	e0bffc15 	stw	r2,-16(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 8018f30:	e0fffe0f 	ldh	r3,-8(fp)
 8018f34:	008200b4 	movhi	r2,2050
 8018f38:	10bb2204 	addi	r2,r2,-4984
 8018f3c:	180691ba 	slli	r3,r3,6
 8018f40:	10c5883a 	add	r2,r2,r3
 8018f44:	10800f04 	addi	r2,r2,60
 8018f48:	10000015 	stw	zero,0(r2)
			result = true;
 8018f4c:	00800044 	movi	r2,1
 8018f50:	e0bffc15 	stw	r2,-16(fp)
        }
    }
    
    return result;
 8018f54:	e0bffc17 	ldw	r2,-16(fp)
}
 8018f58:	e6ffff04 	addi	sp,fp,-4
 8018f5c:	dfc00217 	ldw	ra,8(sp)
 8018f60:	df000117 	ldw	fp,4(sp)
 8018f64:	dc000017 	ldw	r16,0(sp)
 8018f68:	dec00304 	addi	sp,sp,12
 8018f6c:	f800283a 	ret

08018f70 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8018f70:	defffa04 	addi	sp,sp,-24
 8018f74:	dfc00515 	stw	ra,20(sp)
 8018f78:	df000415 	stw	fp,16(sp)
 8018f7c:	df000404 	addi	fp,sp,16
 8018f80:	e13ffd15 	stw	r4,-12(fp)
 8018f84:	e17ffe15 	stw	r5,-8(fp)
 8018f88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8018f8c:	e0bffd17 	ldw	r2,-12(fp)
 8018f90:	10800017 	ldw	r2,0(r2)
 8018f94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8018f98:	e0bffc17 	ldw	r2,-16(fp)
 8018f9c:	10c00a04 	addi	r3,r2,40
 8018fa0:	e0bffd17 	ldw	r2,-12(fp)
 8018fa4:	10800217 	ldw	r2,8(r2)
 8018fa8:	100f883a 	mov	r7,r2
 8018fac:	e1bfff17 	ldw	r6,-4(fp)
 8018fb0:	e17ffe17 	ldw	r5,-8(fp)
 8018fb4:	1809883a 	mov	r4,r3
 8018fb8:	80195980 	call	8019598 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8018fbc:	e037883a 	mov	sp,fp
 8018fc0:	dfc00117 	ldw	ra,4(sp)
 8018fc4:	df000017 	ldw	fp,0(sp)
 8018fc8:	dec00204 	addi	sp,sp,8
 8018fcc:	f800283a 	ret

08018fd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8018fd0:	defffa04 	addi	sp,sp,-24
 8018fd4:	dfc00515 	stw	ra,20(sp)
 8018fd8:	df000415 	stw	fp,16(sp)
 8018fdc:	df000404 	addi	fp,sp,16
 8018fe0:	e13ffd15 	stw	r4,-12(fp)
 8018fe4:	e17ffe15 	stw	r5,-8(fp)
 8018fe8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8018fec:	e0bffd17 	ldw	r2,-12(fp)
 8018ff0:	10800017 	ldw	r2,0(r2)
 8018ff4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8018ff8:	e0bffc17 	ldw	r2,-16(fp)
 8018ffc:	10c00a04 	addi	r3,r2,40
 8019000:	e0bffd17 	ldw	r2,-12(fp)
 8019004:	10800217 	ldw	r2,8(r2)
 8019008:	100f883a 	mov	r7,r2
 801900c:	e1bfff17 	ldw	r6,-4(fp)
 8019010:	e17ffe17 	ldw	r5,-8(fp)
 8019014:	1809883a 	mov	r4,r3
 8019018:	80197b40 	call	80197b4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801901c:	e037883a 	mov	sp,fp
 8019020:	dfc00117 	ldw	ra,4(sp)
 8019024:	df000017 	ldw	fp,0(sp)
 8019028:	dec00204 	addi	sp,sp,8
 801902c:	f800283a 	ret

08019030 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8019030:	defffc04 	addi	sp,sp,-16
 8019034:	dfc00315 	stw	ra,12(sp)
 8019038:	df000215 	stw	fp,8(sp)
 801903c:	df000204 	addi	fp,sp,8
 8019040:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8019044:	e0bfff17 	ldw	r2,-4(fp)
 8019048:	10800017 	ldw	r2,0(r2)
 801904c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8019050:	e0bffe17 	ldw	r2,-8(fp)
 8019054:	10c00a04 	addi	r3,r2,40
 8019058:	e0bfff17 	ldw	r2,-4(fp)
 801905c:	10800217 	ldw	r2,8(r2)
 8019060:	100b883a 	mov	r5,r2
 8019064:	1809883a 	mov	r4,r3
 8019068:	80194400 	call	8019440 <altera_avalon_jtag_uart_close>
}
 801906c:	e037883a 	mov	sp,fp
 8019070:	dfc00117 	ldw	ra,4(sp)
 8019074:	df000017 	ldw	fp,0(sp)
 8019078:	dec00204 	addi	sp,sp,8
 801907c:	f800283a 	ret

08019080 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8019080:	defffa04 	addi	sp,sp,-24
 8019084:	dfc00515 	stw	ra,20(sp)
 8019088:	df000415 	stw	fp,16(sp)
 801908c:	df000404 	addi	fp,sp,16
 8019090:	e13ffd15 	stw	r4,-12(fp)
 8019094:	e17ffe15 	stw	r5,-8(fp)
 8019098:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801909c:	e0bffd17 	ldw	r2,-12(fp)
 80190a0:	10800017 	ldw	r2,0(r2)
 80190a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80190a8:	e0bffc17 	ldw	r2,-16(fp)
 80190ac:	10800a04 	addi	r2,r2,40
 80190b0:	e1bfff17 	ldw	r6,-4(fp)
 80190b4:	e17ffe17 	ldw	r5,-8(fp)
 80190b8:	1009883a 	mov	r4,r2
 80190bc:	80194a80 	call	80194a8 <altera_avalon_jtag_uart_ioctl>
}
 80190c0:	e037883a 	mov	sp,fp
 80190c4:	dfc00117 	ldw	ra,4(sp)
 80190c8:	df000017 	ldw	fp,0(sp)
 80190cc:	dec00204 	addi	sp,sp,8
 80190d0:	f800283a 	ret

080190d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80190d4:	defffa04 	addi	sp,sp,-24
 80190d8:	dfc00515 	stw	ra,20(sp)
 80190dc:	df000415 	stw	fp,16(sp)
 80190e0:	df000404 	addi	fp,sp,16
 80190e4:	e13ffd15 	stw	r4,-12(fp)
 80190e8:	e17ffe15 	stw	r5,-8(fp)
 80190ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80190f0:	e0bffd17 	ldw	r2,-12(fp)
 80190f4:	00c00044 	movi	r3,1
 80190f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80190fc:	e0bffd17 	ldw	r2,-12(fp)
 8019100:	10800017 	ldw	r2,0(r2)
 8019104:	10800104 	addi	r2,r2,4
 8019108:	1007883a 	mov	r3,r2
 801910c:	e0bffd17 	ldw	r2,-12(fp)
 8019110:	10800817 	ldw	r2,32(r2)
 8019114:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8019118:	e0bffe17 	ldw	r2,-8(fp)
 801911c:	e0ffff17 	ldw	r3,-4(fp)
 8019120:	d8000015 	stw	zero,0(sp)
 8019124:	e1fffd17 	ldw	r7,-12(fp)
 8019128:	018200b4 	movhi	r6,2050
 801912c:	31a46504 	addi	r6,r6,-28268
 8019130:	180b883a 	mov	r5,r3
 8019134:	1009883a 	mov	r4,r2
 8019138:	801a3840 	call	801a384 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801913c:	e0bffd17 	ldw	r2,-12(fp)
 8019140:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8019144:	e0bffd17 	ldw	r2,-12(fp)
 8019148:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801914c:	d0e6f917 	ldw	r3,-25628(gp)
 8019150:	e1fffd17 	ldw	r7,-12(fp)
 8019154:	018200b4 	movhi	r6,2050
 8019158:	31a4e804 	addi	r6,r6,-27744
 801915c:	180b883a 	mov	r5,r3
 8019160:	1009883a 	mov	r4,r2
 8019164:	8019e5c0 	call	8019e5c <alt_alarm_start>
 8019168:	1000040e 	bge	r2,zero,801917c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801916c:	e0fffd17 	ldw	r3,-12(fp)
 8019170:	00a00034 	movhi	r2,32768
 8019174:	10bfffc4 	addi	r2,r2,-1
 8019178:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801917c:	0001883a 	nop
 8019180:	e037883a 	mov	sp,fp
 8019184:	dfc00117 	ldw	ra,4(sp)
 8019188:	df000017 	ldw	fp,0(sp)
 801918c:	dec00204 	addi	sp,sp,8
 8019190:	f800283a 	ret

08019194 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8019194:	defff804 	addi	sp,sp,-32
 8019198:	df000715 	stw	fp,28(sp)
 801919c:	df000704 	addi	fp,sp,28
 80191a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80191a4:	e0bfff17 	ldw	r2,-4(fp)
 80191a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80191ac:	e0bffb17 	ldw	r2,-20(fp)
 80191b0:	10800017 	ldw	r2,0(r2)
 80191b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80191b8:	e0bffc17 	ldw	r2,-16(fp)
 80191bc:	10800104 	addi	r2,r2,4
 80191c0:	10800037 	ldwio	r2,0(r2)
 80191c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80191c8:	e0bffd17 	ldw	r2,-12(fp)
 80191cc:	1080c00c 	andi	r2,r2,768
 80191d0:	10006d26 	beq	r2,zero,8019388 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80191d4:	e0bffd17 	ldw	r2,-12(fp)
 80191d8:	1080400c 	andi	r2,r2,256
 80191dc:	10003526 	beq	r2,zero,80192b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80191e0:	00800074 	movhi	r2,1
 80191e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80191e8:	e0bffb17 	ldw	r2,-20(fp)
 80191ec:	10800a17 	ldw	r2,40(r2)
 80191f0:	10800044 	addi	r2,r2,1
 80191f4:	1081ffcc 	andi	r2,r2,2047
 80191f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 80191fc:	e0bffb17 	ldw	r2,-20(fp)
 8019200:	10c00b17 	ldw	r3,44(r2)
 8019204:	e0bffe17 	ldw	r2,-8(fp)
 8019208:	18801526 	beq	r3,r2,8019260 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801920c:	e0bffc17 	ldw	r2,-16(fp)
 8019210:	10800037 	ldwio	r2,0(r2)
 8019214:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8019218:	e0bff917 	ldw	r2,-28(fp)
 801921c:	10a0000c 	andi	r2,r2,32768
 8019220:	10001126 	beq	r2,zero,8019268 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8019224:	e0bffb17 	ldw	r2,-20(fp)
 8019228:	10800a17 	ldw	r2,40(r2)
 801922c:	e0fff917 	ldw	r3,-28(fp)
 8019230:	1809883a 	mov	r4,r3
 8019234:	e0fffb17 	ldw	r3,-20(fp)
 8019238:	1885883a 	add	r2,r3,r2
 801923c:	10800e04 	addi	r2,r2,56
 8019240:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8019244:	e0bffb17 	ldw	r2,-20(fp)
 8019248:	10800a17 	ldw	r2,40(r2)
 801924c:	10800044 	addi	r2,r2,1
 8019250:	10c1ffcc 	andi	r3,r2,2047
 8019254:	e0bffb17 	ldw	r2,-20(fp)
 8019258:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801925c:	003fe206 	br	80191e8 <_gp+0xffff41e0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8019260:	0001883a 	nop
 8019264:	00000106 	br	801926c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 8019268:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801926c:	e0bff917 	ldw	r2,-28(fp)
 8019270:	10bfffec 	andhi	r2,r2,65535
 8019274:	10000f26 	beq	r2,zero,80192b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8019278:	e0bffb17 	ldw	r2,-20(fp)
 801927c:	10c00817 	ldw	r3,32(r2)
 8019280:	00bfff84 	movi	r2,-2
 8019284:	1886703a 	and	r3,r3,r2
 8019288:	e0bffb17 	ldw	r2,-20(fp)
 801928c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8019290:	e0bffc17 	ldw	r2,-16(fp)
 8019294:	10800104 	addi	r2,r2,4
 8019298:	1007883a 	mov	r3,r2
 801929c:	e0bffb17 	ldw	r2,-20(fp)
 80192a0:	10800817 	ldw	r2,32(r2)
 80192a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80192a8:	e0bffc17 	ldw	r2,-16(fp)
 80192ac:	10800104 	addi	r2,r2,4
 80192b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80192b4:	e0bffd17 	ldw	r2,-12(fp)
 80192b8:	1080800c 	andi	r2,r2,512
 80192bc:	103fbe26 	beq	r2,zero,80191b8 <_gp+0xffff41b0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80192c0:	e0bffd17 	ldw	r2,-12(fp)
 80192c4:	1004d43a 	srli	r2,r2,16
 80192c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80192cc:	00001406 	br	8019320 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80192d0:	e0bffc17 	ldw	r2,-16(fp)
 80192d4:	e0fffb17 	ldw	r3,-20(fp)
 80192d8:	18c00d17 	ldw	r3,52(r3)
 80192dc:	e13ffb17 	ldw	r4,-20(fp)
 80192e0:	20c7883a 	add	r3,r4,r3
 80192e4:	18c20e04 	addi	r3,r3,2104
 80192e8:	18c00003 	ldbu	r3,0(r3)
 80192ec:	18c03fcc 	andi	r3,r3,255
 80192f0:	18c0201c 	xori	r3,r3,128
 80192f4:	18ffe004 	addi	r3,r3,-128
 80192f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80192fc:	e0bffb17 	ldw	r2,-20(fp)
 8019300:	10800d17 	ldw	r2,52(r2)
 8019304:	10800044 	addi	r2,r2,1
 8019308:	10c1ffcc 	andi	r3,r2,2047
 801930c:	e0bffb17 	ldw	r2,-20(fp)
 8019310:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8019314:	e0bffa17 	ldw	r2,-24(fp)
 8019318:	10bfffc4 	addi	r2,r2,-1
 801931c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8019320:	e0bffa17 	ldw	r2,-24(fp)
 8019324:	10000526 	beq	r2,zero,801933c <altera_avalon_jtag_uart_irq+0x1a8>
 8019328:	e0bffb17 	ldw	r2,-20(fp)
 801932c:	10c00d17 	ldw	r3,52(r2)
 8019330:	e0bffb17 	ldw	r2,-20(fp)
 8019334:	10800c17 	ldw	r2,48(r2)
 8019338:	18bfe51e 	bne	r3,r2,80192d0 <_gp+0xffff42c8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801933c:	e0bffa17 	ldw	r2,-24(fp)
 8019340:	103f9d26 	beq	r2,zero,80191b8 <_gp+0xffff41b0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8019344:	e0bffb17 	ldw	r2,-20(fp)
 8019348:	10c00817 	ldw	r3,32(r2)
 801934c:	00bfff44 	movi	r2,-3
 8019350:	1886703a 	and	r3,r3,r2
 8019354:	e0bffb17 	ldw	r2,-20(fp)
 8019358:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801935c:	e0bffb17 	ldw	r2,-20(fp)
 8019360:	10800017 	ldw	r2,0(r2)
 8019364:	10800104 	addi	r2,r2,4
 8019368:	1007883a 	mov	r3,r2
 801936c:	e0bffb17 	ldw	r2,-20(fp)
 8019370:	10800817 	ldw	r2,32(r2)
 8019374:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8019378:	e0bffc17 	ldw	r2,-16(fp)
 801937c:	10800104 	addi	r2,r2,4
 8019380:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8019384:	003f8c06 	br	80191b8 <_gp+0xffff41b0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 8019388:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 801938c:	0001883a 	nop
 8019390:	e037883a 	mov	sp,fp
 8019394:	df000017 	ldw	fp,0(sp)
 8019398:	dec00104 	addi	sp,sp,4
 801939c:	f800283a 	ret

080193a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80193a0:	defff804 	addi	sp,sp,-32
 80193a4:	df000715 	stw	fp,28(sp)
 80193a8:	df000704 	addi	fp,sp,28
 80193ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80193b0:	e0bffb17 	ldw	r2,-20(fp)
 80193b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80193b8:	e0bff917 	ldw	r2,-28(fp)
 80193bc:	10800017 	ldw	r2,0(r2)
 80193c0:	10800104 	addi	r2,r2,4
 80193c4:	10800037 	ldwio	r2,0(r2)
 80193c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80193cc:	e0bffa17 	ldw	r2,-24(fp)
 80193d0:	1081000c 	andi	r2,r2,1024
 80193d4:	10000b26 	beq	r2,zero,8019404 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80193d8:	e0bff917 	ldw	r2,-28(fp)
 80193dc:	10800017 	ldw	r2,0(r2)
 80193e0:	10800104 	addi	r2,r2,4
 80193e4:	1007883a 	mov	r3,r2
 80193e8:	e0bff917 	ldw	r2,-28(fp)
 80193ec:	10800817 	ldw	r2,32(r2)
 80193f0:	10810014 	ori	r2,r2,1024
 80193f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80193f8:	e0bff917 	ldw	r2,-28(fp)
 80193fc:	10000915 	stw	zero,36(r2)
 8019400:	00000a06 	br	801942c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8019404:	e0bff917 	ldw	r2,-28(fp)
 8019408:	10c00917 	ldw	r3,36(r2)
 801940c:	00a00034 	movhi	r2,32768
 8019410:	10bfff04 	addi	r2,r2,-4
 8019414:	10c00536 	bltu	r2,r3,801942c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8019418:	e0bff917 	ldw	r2,-28(fp)
 801941c:	10800917 	ldw	r2,36(r2)
 8019420:	10c00044 	addi	r3,r2,1
 8019424:	e0bff917 	ldw	r2,-28(fp)
 8019428:	10c00915 	stw	r3,36(r2)
 801942c:	d0a6f917 	ldw	r2,-25628(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8019430:	e037883a 	mov	sp,fp
 8019434:	df000017 	ldw	fp,0(sp)
 8019438:	dec00104 	addi	sp,sp,4
 801943c:	f800283a 	ret

08019440 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8019440:	defffd04 	addi	sp,sp,-12
 8019444:	df000215 	stw	fp,8(sp)
 8019448:	df000204 	addi	fp,sp,8
 801944c:	e13ffe15 	stw	r4,-8(fp)
 8019450:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8019454:	00000506 	br	801946c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8019458:	e0bfff17 	ldw	r2,-4(fp)
 801945c:	1090000c 	andi	r2,r2,16384
 8019460:	10000226 	beq	r2,zero,801946c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8019464:	00bffd44 	movi	r2,-11
 8019468:	00000b06 	br	8019498 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801946c:	e0bffe17 	ldw	r2,-8(fp)
 8019470:	10c00d17 	ldw	r3,52(r2)
 8019474:	e0bffe17 	ldw	r2,-8(fp)
 8019478:	10800c17 	ldw	r2,48(r2)
 801947c:	18800526 	beq	r3,r2,8019494 <altera_avalon_jtag_uart_close+0x54>
 8019480:	e0bffe17 	ldw	r2,-8(fp)
 8019484:	10c00917 	ldw	r3,36(r2)
 8019488:	e0bffe17 	ldw	r2,-8(fp)
 801948c:	10800117 	ldw	r2,4(r2)
 8019490:	18bff136 	bltu	r3,r2,8019458 <_gp+0xffff4450>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8019494:	0005883a 	mov	r2,zero
}
 8019498:	e037883a 	mov	sp,fp
 801949c:	df000017 	ldw	fp,0(sp)
 80194a0:	dec00104 	addi	sp,sp,4
 80194a4:	f800283a 	ret

080194a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80194a8:	defffa04 	addi	sp,sp,-24
 80194ac:	df000515 	stw	fp,20(sp)
 80194b0:	df000504 	addi	fp,sp,20
 80194b4:	e13ffd15 	stw	r4,-12(fp)
 80194b8:	e17ffe15 	stw	r5,-8(fp)
 80194bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80194c0:	00bff9c4 	movi	r2,-25
 80194c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80194c8:	e0bffe17 	ldw	r2,-8(fp)
 80194cc:	10da8060 	cmpeqi	r3,r2,27137
 80194d0:	1800031e 	bne	r3,zero,80194e0 <altera_avalon_jtag_uart_ioctl+0x38>
 80194d4:	109a80a0 	cmpeqi	r2,r2,27138
 80194d8:	1000181e 	bne	r2,zero,801953c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80194dc:	00002906 	br	8019584 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80194e0:	e0bffd17 	ldw	r2,-12(fp)
 80194e4:	10c00117 	ldw	r3,4(r2)
 80194e8:	00a00034 	movhi	r2,32768
 80194ec:	10bfffc4 	addi	r2,r2,-1
 80194f0:	18802126 	beq	r3,r2,8019578 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80194f4:	e0bfff17 	ldw	r2,-4(fp)
 80194f8:	10800017 	ldw	r2,0(r2)
 80194fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8019500:	e0bffc17 	ldw	r2,-16(fp)
 8019504:	10800090 	cmplti	r2,r2,2
 8019508:	1000061e 	bne	r2,zero,8019524 <altera_avalon_jtag_uart_ioctl+0x7c>
 801950c:	e0fffc17 	ldw	r3,-16(fp)
 8019510:	00a00034 	movhi	r2,32768
 8019514:	10bfffc4 	addi	r2,r2,-1
 8019518:	18800226 	beq	r3,r2,8019524 <altera_avalon_jtag_uart_ioctl+0x7c>
 801951c:	e0bffc17 	ldw	r2,-16(fp)
 8019520:	00000206 	br	801952c <altera_avalon_jtag_uart_ioctl+0x84>
 8019524:	00a00034 	movhi	r2,32768
 8019528:	10bfff84 	addi	r2,r2,-2
 801952c:	e0fffd17 	ldw	r3,-12(fp)
 8019530:	18800115 	stw	r2,4(r3)
      rc = 0;
 8019534:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8019538:	00000f06 	br	8019578 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 801953c:	e0bffd17 	ldw	r2,-12(fp)
 8019540:	10c00117 	ldw	r3,4(r2)
 8019544:	00a00034 	movhi	r2,32768
 8019548:	10bfffc4 	addi	r2,r2,-1
 801954c:	18800c26 	beq	r3,r2,8019580 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8019550:	e0bffd17 	ldw	r2,-12(fp)
 8019554:	10c00917 	ldw	r3,36(r2)
 8019558:	e0bffd17 	ldw	r2,-12(fp)
 801955c:	10800117 	ldw	r2,4(r2)
 8019560:	1885803a 	cmpltu	r2,r3,r2
 8019564:	10c03fcc 	andi	r3,r2,255
 8019568:	e0bfff17 	ldw	r2,-4(fp)
 801956c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8019570:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8019574:	00000206 	br	8019580 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 8019578:	0001883a 	nop
 801957c:	00000106 	br	8019584 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8019580:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8019584:	e0bffb17 	ldw	r2,-20(fp)
}
 8019588:	e037883a 	mov	sp,fp
 801958c:	df000017 	ldw	fp,0(sp)
 8019590:	dec00104 	addi	sp,sp,4
 8019594:	f800283a 	ret

08019598 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8019598:	defff304 	addi	sp,sp,-52
 801959c:	dfc00c15 	stw	ra,48(sp)
 80195a0:	df000b15 	stw	fp,44(sp)
 80195a4:	df000b04 	addi	fp,sp,44
 80195a8:	e13ffc15 	stw	r4,-16(fp)
 80195ac:	e17ffd15 	stw	r5,-12(fp)
 80195b0:	e1bffe15 	stw	r6,-8(fp)
 80195b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80195b8:	e0bffd17 	ldw	r2,-12(fp)
 80195bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80195c0:	00004706 	br	80196e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80195c4:	e0bffc17 	ldw	r2,-16(fp)
 80195c8:	10800a17 	ldw	r2,40(r2)
 80195cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80195d0:	e0bffc17 	ldw	r2,-16(fp)
 80195d4:	10800b17 	ldw	r2,44(r2)
 80195d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80195dc:	e0fff717 	ldw	r3,-36(fp)
 80195e0:	e0bff817 	ldw	r2,-32(fp)
 80195e4:	18800536 	bltu	r3,r2,80195fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80195e8:	e0fff717 	ldw	r3,-36(fp)
 80195ec:	e0bff817 	ldw	r2,-32(fp)
 80195f0:	1885c83a 	sub	r2,r3,r2
 80195f4:	e0bff615 	stw	r2,-40(fp)
 80195f8:	00000406 	br	801960c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80195fc:	00c20004 	movi	r3,2048
 8019600:	e0bff817 	ldw	r2,-32(fp)
 8019604:	1885c83a 	sub	r2,r3,r2
 8019608:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801960c:	e0bff617 	ldw	r2,-40(fp)
 8019610:	10001e26 	beq	r2,zero,801968c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8019614:	e0fffe17 	ldw	r3,-8(fp)
 8019618:	e0bff617 	ldw	r2,-40(fp)
 801961c:	1880022e 	bgeu	r3,r2,8019628 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8019620:	e0bffe17 	ldw	r2,-8(fp)
 8019624:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 8019628:	e0bffc17 	ldw	r2,-16(fp)
 801962c:	10c00e04 	addi	r3,r2,56
 8019630:	e0bff817 	ldw	r2,-32(fp)
 8019634:	1885883a 	add	r2,r3,r2
 8019638:	e1bff617 	ldw	r6,-40(fp)
 801963c:	100b883a 	mov	r5,r2
 8019640:	e13ff517 	ldw	r4,-44(fp)
 8019644:	80122800 	call	8012280 <memcpy>
      ptr   += n;
 8019648:	e0fff517 	ldw	r3,-44(fp)
 801964c:	e0bff617 	ldw	r2,-40(fp)
 8019650:	1885883a 	add	r2,r3,r2
 8019654:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 8019658:	e0fffe17 	ldw	r3,-8(fp)
 801965c:	e0bff617 	ldw	r2,-40(fp)
 8019660:	1885c83a 	sub	r2,r3,r2
 8019664:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8019668:	e0fff817 	ldw	r3,-32(fp)
 801966c:	e0bff617 	ldw	r2,-40(fp)
 8019670:	1885883a 	add	r2,r3,r2
 8019674:	10c1ffcc 	andi	r3,r2,2047
 8019678:	e0bffc17 	ldw	r2,-16(fp)
 801967c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8019680:	e0bffe17 	ldw	r2,-8(fp)
 8019684:	00bfcf16 	blt	zero,r2,80195c4 <_gp+0xffff45bc>
 8019688:	00000106 	br	8019690 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 801968c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8019690:	e0fff517 	ldw	r3,-44(fp)
 8019694:	e0bffd17 	ldw	r2,-12(fp)
 8019698:	1880141e 	bne	r3,r2,80196ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801969c:	e0bfff17 	ldw	r2,-4(fp)
 80196a0:	1090000c 	andi	r2,r2,16384
 80196a4:	1000131e 	bne	r2,zero,80196f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80196a8:	0001883a 	nop
 80196ac:	e0bffc17 	ldw	r2,-16(fp)
 80196b0:	10c00a17 	ldw	r3,40(r2)
 80196b4:	e0bff717 	ldw	r2,-36(fp)
 80196b8:	1880051e 	bne	r3,r2,80196d0 <altera_avalon_jtag_uart_read+0x138>
 80196bc:	e0bffc17 	ldw	r2,-16(fp)
 80196c0:	10c00917 	ldw	r3,36(r2)
 80196c4:	e0bffc17 	ldw	r2,-16(fp)
 80196c8:	10800117 	ldw	r2,4(r2)
 80196cc:	18bff736 	bltu	r3,r2,80196ac <_gp+0xffff46a4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80196d0:	e0bffc17 	ldw	r2,-16(fp)
 80196d4:	10c00a17 	ldw	r3,40(r2)
 80196d8:	e0bff717 	ldw	r2,-36(fp)
 80196dc:	18800726 	beq	r3,r2,80196fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80196e0:	e0bffe17 	ldw	r2,-8(fp)
 80196e4:	00bfb716 	blt	zero,r2,80195c4 <_gp+0xffff45bc>
 80196e8:	00000506 	br	8019700 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80196ec:	0001883a 	nop
 80196f0:	00000306 	br	8019700 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80196f4:	0001883a 	nop
 80196f8:	00000106 	br	8019700 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 80196fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8019700:	e0fff517 	ldw	r3,-44(fp)
 8019704:	e0bffd17 	ldw	r2,-12(fp)
 8019708:	18801826 	beq	r3,r2,801976c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801970c:	0005303a 	rdctl	r2,status
 8019710:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019714:	e0fffb17 	ldw	r3,-20(fp)
 8019718:	00bfff84 	movi	r2,-2
 801971c:	1884703a 	and	r2,r3,r2
 8019720:	1001703a 	wrctl	status,r2
  
  return context;
 8019724:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8019728:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801972c:	e0bffc17 	ldw	r2,-16(fp)
 8019730:	10800817 	ldw	r2,32(r2)
 8019734:	10c00054 	ori	r3,r2,1
 8019738:	e0bffc17 	ldw	r2,-16(fp)
 801973c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8019740:	e0bffc17 	ldw	r2,-16(fp)
 8019744:	10800017 	ldw	r2,0(r2)
 8019748:	10800104 	addi	r2,r2,4
 801974c:	1007883a 	mov	r3,r2
 8019750:	e0bffc17 	ldw	r2,-16(fp)
 8019754:	10800817 	ldw	r2,32(r2)
 8019758:	18800035 	stwio	r2,0(r3)
 801975c:	e0bffa17 	ldw	r2,-24(fp)
 8019760:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019764:	e0bff917 	ldw	r2,-28(fp)
 8019768:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801976c:	e0fff517 	ldw	r3,-44(fp)
 8019770:	e0bffd17 	ldw	r2,-12(fp)
 8019774:	18800426 	beq	r3,r2,8019788 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8019778:	e0fff517 	ldw	r3,-44(fp)
 801977c:	e0bffd17 	ldw	r2,-12(fp)
 8019780:	1885c83a 	sub	r2,r3,r2
 8019784:	00000606 	br	80197a0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8019788:	e0bfff17 	ldw	r2,-4(fp)
 801978c:	1090000c 	andi	r2,r2,16384
 8019790:	10000226 	beq	r2,zero,801979c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8019794:	00bffd44 	movi	r2,-11
 8019798:	00000106 	br	80197a0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 801979c:	00bffec4 	movi	r2,-5
}
 80197a0:	e037883a 	mov	sp,fp
 80197a4:	dfc00117 	ldw	ra,4(sp)
 80197a8:	df000017 	ldw	fp,0(sp)
 80197ac:	dec00204 	addi	sp,sp,8
 80197b0:	f800283a 	ret

080197b4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80197b4:	defff304 	addi	sp,sp,-52
 80197b8:	dfc00c15 	stw	ra,48(sp)
 80197bc:	df000b15 	stw	fp,44(sp)
 80197c0:	df000b04 	addi	fp,sp,44
 80197c4:	e13ffc15 	stw	r4,-16(fp)
 80197c8:	e17ffd15 	stw	r5,-12(fp)
 80197cc:	e1bffe15 	stw	r6,-8(fp)
 80197d0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80197d4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80197d8:	e0bffd17 	ldw	r2,-12(fp)
 80197dc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80197e0:	00003706 	br	80198c0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80197e4:	e0bffc17 	ldw	r2,-16(fp)
 80197e8:	10800c17 	ldw	r2,48(r2)
 80197ec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80197f0:	e0bffc17 	ldw	r2,-16(fp)
 80197f4:	10800d17 	ldw	r2,52(r2)
 80197f8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 80197fc:	e0fff917 	ldw	r3,-28(fp)
 8019800:	e0bff517 	ldw	r2,-44(fp)
 8019804:	1880062e 	bgeu	r3,r2,8019820 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8019808:	e0fff517 	ldw	r3,-44(fp)
 801980c:	e0bff917 	ldw	r2,-28(fp)
 8019810:	1885c83a 	sub	r2,r3,r2
 8019814:	10bfffc4 	addi	r2,r2,-1
 8019818:	e0bff615 	stw	r2,-40(fp)
 801981c:	00000b06 	br	801984c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8019820:	e0bff517 	ldw	r2,-44(fp)
 8019824:	10000526 	beq	r2,zero,801983c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8019828:	00c20004 	movi	r3,2048
 801982c:	e0bff917 	ldw	r2,-28(fp)
 8019830:	1885c83a 	sub	r2,r3,r2
 8019834:	e0bff615 	stw	r2,-40(fp)
 8019838:	00000406 	br	801984c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801983c:	00c1ffc4 	movi	r3,2047
 8019840:	e0bff917 	ldw	r2,-28(fp)
 8019844:	1885c83a 	sub	r2,r3,r2
 8019848:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801984c:	e0bff617 	ldw	r2,-40(fp)
 8019850:	10001e26 	beq	r2,zero,80198cc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8019854:	e0fffe17 	ldw	r3,-8(fp)
 8019858:	e0bff617 	ldw	r2,-40(fp)
 801985c:	1880022e 	bgeu	r3,r2,8019868 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8019860:	e0bffe17 	ldw	r2,-8(fp)
 8019864:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8019868:	e0bffc17 	ldw	r2,-16(fp)
 801986c:	10c20e04 	addi	r3,r2,2104
 8019870:	e0bff917 	ldw	r2,-28(fp)
 8019874:	1885883a 	add	r2,r3,r2
 8019878:	e1bff617 	ldw	r6,-40(fp)
 801987c:	e17ffd17 	ldw	r5,-12(fp)
 8019880:	1009883a 	mov	r4,r2
 8019884:	80122800 	call	8012280 <memcpy>
      ptr   += n;
 8019888:	e0fffd17 	ldw	r3,-12(fp)
 801988c:	e0bff617 	ldw	r2,-40(fp)
 8019890:	1885883a 	add	r2,r3,r2
 8019894:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8019898:	e0fffe17 	ldw	r3,-8(fp)
 801989c:	e0bff617 	ldw	r2,-40(fp)
 80198a0:	1885c83a 	sub	r2,r3,r2
 80198a4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80198a8:	e0fff917 	ldw	r3,-28(fp)
 80198ac:	e0bff617 	ldw	r2,-40(fp)
 80198b0:	1885883a 	add	r2,r3,r2
 80198b4:	10c1ffcc 	andi	r3,r2,2047
 80198b8:	e0bffc17 	ldw	r2,-16(fp)
 80198bc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80198c0:	e0bffe17 	ldw	r2,-8(fp)
 80198c4:	00bfc716 	blt	zero,r2,80197e4 <_gp+0xffff47dc>
 80198c8:	00000106 	br	80198d0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80198cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80198d0:	0005303a 	rdctl	r2,status
 80198d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80198d8:	e0fffb17 	ldw	r3,-20(fp)
 80198dc:	00bfff84 	movi	r2,-2
 80198e0:	1884703a 	and	r2,r3,r2
 80198e4:	1001703a 	wrctl	status,r2
  
  return context;
 80198e8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80198ec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80198f0:	e0bffc17 	ldw	r2,-16(fp)
 80198f4:	10800817 	ldw	r2,32(r2)
 80198f8:	10c00094 	ori	r3,r2,2
 80198fc:	e0bffc17 	ldw	r2,-16(fp)
 8019900:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8019904:	e0bffc17 	ldw	r2,-16(fp)
 8019908:	10800017 	ldw	r2,0(r2)
 801990c:	10800104 	addi	r2,r2,4
 8019910:	1007883a 	mov	r3,r2
 8019914:	e0bffc17 	ldw	r2,-16(fp)
 8019918:	10800817 	ldw	r2,32(r2)
 801991c:	18800035 	stwio	r2,0(r3)
 8019920:	e0bffa17 	ldw	r2,-24(fp)
 8019924:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019928:	e0bff817 	ldw	r2,-32(fp)
 801992c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8019930:	e0bffe17 	ldw	r2,-8(fp)
 8019934:	0080100e 	bge	zero,r2,8019978 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8019938:	e0bfff17 	ldw	r2,-4(fp)
 801993c:	1090000c 	andi	r2,r2,16384
 8019940:	1000101e 	bne	r2,zero,8019984 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8019944:	0001883a 	nop
 8019948:	e0bffc17 	ldw	r2,-16(fp)
 801994c:	10c00d17 	ldw	r3,52(r2)
 8019950:	e0bff517 	ldw	r2,-44(fp)
 8019954:	1880051e 	bne	r3,r2,801996c <altera_avalon_jtag_uart_write+0x1b8>
 8019958:	e0bffc17 	ldw	r2,-16(fp)
 801995c:	10c00917 	ldw	r3,36(r2)
 8019960:	e0bffc17 	ldw	r2,-16(fp)
 8019964:	10800117 	ldw	r2,4(r2)
 8019968:	18bff736 	bltu	r3,r2,8019948 <_gp+0xffff4940>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801996c:	e0bffc17 	ldw	r2,-16(fp)
 8019970:	10800917 	ldw	r2,36(r2)
 8019974:	1000051e 	bne	r2,zero,801998c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8019978:	e0bffe17 	ldw	r2,-8(fp)
 801997c:	00bfd016 	blt	zero,r2,80198c0 <_gp+0xffff48b8>
 8019980:	00000306 	br	8019990 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8019984:	0001883a 	nop
 8019988:	00000106 	br	8019990 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 801998c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8019990:	e0fffd17 	ldw	r3,-12(fp)
 8019994:	e0bff717 	ldw	r2,-36(fp)
 8019998:	18800426 	beq	r3,r2,80199ac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 801999c:	e0fffd17 	ldw	r3,-12(fp)
 80199a0:	e0bff717 	ldw	r2,-36(fp)
 80199a4:	1885c83a 	sub	r2,r3,r2
 80199a8:	00000606 	br	80199c4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 80199ac:	e0bfff17 	ldw	r2,-4(fp)
 80199b0:	1090000c 	andi	r2,r2,16384
 80199b4:	10000226 	beq	r2,zero,80199c0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 80199b8:	00bffd44 	movi	r2,-11
 80199bc:	00000106 	br	80199c4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 80199c0:	00bffec4 	movi	r2,-5
}
 80199c4:	e037883a 	mov	sp,fp
 80199c8:	dfc00117 	ldw	ra,4(sp)
 80199cc:	df000017 	ldw	fp,0(sp)
 80199d0:	dec00204 	addi	sp,sp,8
 80199d4:	f800283a 	ret

080199d8 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 80199d8:	defff404 	addi	sp,sp,-48
 80199dc:	df000b15 	stw	fp,44(sp)
 80199e0:	df000b04 	addi	fp,sp,44
 80199e4:	e13ffc15 	stw	r4,-16(fp)
 80199e8:	e17ffd15 	stw	r5,-12(fp)
 80199ec:	e1bffe15 	stw	r6,-8(fp)
 80199f0:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 80199f4:	e0bffc17 	ldw	r2,-16(fp)
 80199f8:	10800017 	ldw	r2,0(r2)
 80199fc:	e0bff515 	stw	r2,-44(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 8019a00:	e0bff517 	ldw	r2,-44(fp)
 8019a04:	10800217 	ldw	r2,8(r2)
 8019a08:	e0bff615 	stw	r2,-40(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 8019a0c:	e0bff617 	ldw	r2,-40(fp)
 8019a10:	10bfffc4 	addi	r2,r2,-1
 8019a14:	e0bffb15 	stw	r2,-20(fp)

  while (*++ptr != 0)
 8019a18:	e0bffb17 	ldw	r2,-20(fp)
 8019a1c:	10800044 	addi	r2,r2,1
 8019a20:	e0bffb15 	stw	r2,-20(fp)
 8019a24:	e0bffb17 	ldw	r2,-20(fp)
 8019a28:	10800003 	ldbu	r2,0(r2)
 8019a2c:	10803fcc 	andi	r2,r2,255
 8019a30:	1080201c 	xori	r2,r2,128
 8019a34:	10bfe004 	addi	r2,r2,-128
 8019a38:	103ff71e 	bne	r2,zero,8019a18 <_gp+0xffff4a10>
    ;

  return ptr - string;
 8019a3c:	e0fffb17 	ldw	r3,-20(fp)
 8019a40:	e0bff617 	ldw	r2,-40(fp)
 8019a44:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 8019a48:	10800044 	addi	r2,r2,1
 8019a4c:	1007883a 	mov	r3,r2
 8019a50:	e0bffd17 	ldw	r2,-12(fp)
 8019a54:	10c5883a 	add	r2,r2,r3
 8019a58:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 8019a5c:	d0a00c04 	addi	r2,gp,-32720
 8019a60:	1007883a 	mov	r3,r2
  r4 = (int)name;
 8019a64:	e0bffd17 	ldw	r2,-12(fp)
 8019a68:	1009883a 	mov	r4,r2
  r5 = flags;
 8019a6c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = mode;
 8019a70:	e1bfff17 	ldw	r6,-4(fp)
 8019a74:	e0bffd17 	ldw	r2,-12(fp)
 8019a78:	e0bff915 	stw	r2,-28(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 8019a7c:	e0bff917 	ldw	r2,-28(fp)
 8019a80:	10bfffc4 	addi	r2,r2,-1
 8019a84:	e0bffa15 	stw	r2,-24(fp)

  while (*++ptr != 0)
 8019a88:	e0bffa17 	ldw	r2,-24(fp)
 8019a8c:	10800044 	addi	r2,r2,1
 8019a90:	e0bffa15 	stw	r2,-24(fp)
 8019a94:	e0bffa17 	ldw	r2,-24(fp)
 8019a98:	10800003 	ldbu	r2,0(r2)
 8019a9c:	10803fcc 	andi	r2,r2,255
 8019aa0:	1080201c 	xori	r2,r2,128
 8019aa4:	10bfe004 	addi	r2,r2,-128
 8019aa8:	103ff71e 	bne	r2,zero,8019a88 <_gp+0xffff4a80>
    ;

  return ptr - string;
 8019aac:	e1fffa17 	ldw	r7,-24(fp)
 8019ab0:	e0bff917 	ldw	r2,-28(fp)
 8019ab4:	3885c83a 	sub	r2,r7,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 8019ab8:	100f883a 	mov	r7,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6), "r" (r7) : "memory" );
 8019abc:	003da07a 	break	1

  handle = (void *)r2;
 8019ac0:	e0bff715 	stw	r2,-36(fp)
  error = r3;
 8019ac4:	e0fff815 	stw	r3,-32(fp)

  if (error == 0)
 8019ac8:	e0bff817 	ldw	r2,-32(fp)
 8019acc:	1000031e 	bne	r2,zero,8019adc <alt_hostfs_open+0x104>
    fd->priv = handle;
 8019ad0:	e0bffc17 	ldw	r2,-16(fp)
 8019ad4:	e0fff717 	ldw	r3,-36(fp)
 8019ad8:	10c00115 	stw	r3,4(r2)

  return -error;
 8019adc:	e0bff817 	ldw	r2,-32(fp)
 8019ae0:	0085c83a 	sub	r2,zero,r2
}
 8019ae4:	e037883a 	mov	sp,fp
 8019ae8:	df000017 	ldw	fp,0(sp)
 8019aec:	dec00104 	addi	sp,sp,4
 8019af0:	f800283a 	ret

08019af4 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 8019af4:	defffd04 	addi	sp,sp,-12
 8019af8:	df000215 	stw	fp,8(sp)
 8019afc:	df000204 	addi	fp,sp,8
 8019b00:	e13fff15 	stw	r4,-4(fp)

  /* Input and output parameters for the hostcall */
  register int r3 asm ("r3");
  register int r4 asm ("r4");

  r3 = (int)&hcinfo;
 8019b04:	d0a00f04 	addi	r2,gp,-32708
 8019b08:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8019b0c:	e0bfff17 	ldw	r2,-4(fp)
 8019b10:	10800117 	ldw	r2,4(r2)
 8019b14:	1009883a 	mov	r4,r2

  __asm__ volatile("break 1" : "+r" (r3) : "r" (r4) );
 8019b18:	003da07a 	break	1

  error = r3;
 8019b1c:	e0fffe15 	stw	r3,-8(fp)

  return -error;
 8019b20:	e0bffe17 	ldw	r2,-8(fp)
 8019b24:	0085c83a 	sub	r2,zero,r2
}
 8019b28:	e037883a 	mov	sp,fp
 8019b2c:	df000017 	ldw	fp,0(sp)
 8019b30:	dec00104 	addi	sp,sp,4
 8019b34:	f800283a 	ret

08019b38 <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 8019b38:	defffa04 	addi	sp,sp,-24
 8019b3c:	df000515 	stw	fp,20(sp)
 8019b40:	df000504 	addi	fp,sp,20
 8019b44:	e13ffd15 	stw	r4,-12(fp)
 8019b48:	e17ffe15 	stw	r5,-8(fp)
 8019b4c:	e1bfff15 	stw	r6,-4(fp)
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");


  r3 = (int)&hcinfo;
 8019b50:	d0a01204 	addi	r2,gp,-32696
 8019b54:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8019b58:	e0bffd17 	ldw	r2,-12(fp)
 8019b5c:	10800117 	ldw	r2,4(r2)
 8019b60:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 8019b64:	e0bffe17 	ldw	r2,-8(fp)
 8019b68:	100b883a 	mov	r5,r2
  r6 = len;
 8019b6c:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 8019b70:	003da07a 	break	1

  rc = r2;
 8019b74:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 8019b78:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 8019b7c:	e0bffc17 	ldw	r2,-16(fp)
 8019b80:	10000326 	beq	r2,zero,8019b90 <alt_hostfs_read+0x58>
 8019b84:	e0bffc17 	ldw	r2,-16(fp)
 8019b88:	0085c83a 	sub	r2,zero,r2
 8019b8c:	00000106 	br	8019b94 <alt_hostfs_read+0x5c>
 8019b90:	e0bffb17 	ldw	r2,-20(fp)
}
 8019b94:	e037883a 	mov	sp,fp
 8019b98:	df000017 	ldw	fp,0(sp)
 8019b9c:	dec00104 	addi	sp,sp,4
 8019ba0:	f800283a 	ret

08019ba4 <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 8019ba4:	defffa04 	addi	sp,sp,-24
 8019ba8:	df000515 	stw	fp,20(sp)
 8019bac:	df000504 	addi	fp,sp,20
 8019bb0:	e13ffd15 	stw	r4,-12(fp)
 8019bb4:	e17ffe15 	stw	r5,-8(fp)
 8019bb8:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 8019bbc:	d0a01504 	addi	r2,gp,-32684
 8019bc0:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8019bc4:	e0bffd17 	ldw	r2,-12(fp)
 8019bc8:	10800117 	ldw	r2,4(r2)
 8019bcc:	1009883a 	mov	r4,r2
  r5 = (int)ptr;
 8019bd0:	e0bffe17 	ldw	r2,-8(fp)
 8019bd4:	100b883a 	mov	r5,r2
  r6 = len;
 8019bd8:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 8019bdc:	003da07a 	break	1

  rc = r2;
 8019be0:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 8019be4:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 8019be8:	e0bffc17 	ldw	r2,-16(fp)
 8019bec:	10000326 	beq	r2,zero,8019bfc <alt_hostfs_write+0x58>
 8019bf0:	e0bffc17 	ldw	r2,-16(fp)
 8019bf4:	0085c83a 	sub	r2,zero,r2
 8019bf8:	00000106 	br	8019c00 <alt_hostfs_write+0x5c>
 8019bfc:	e0bffb17 	ldw	r2,-20(fp)
}
 8019c00:	e037883a 	mov	sp,fp
 8019c04:	df000017 	ldw	fp,0(sp)
 8019c08:	dec00104 	addi	sp,sp,4
 8019c0c:	f800283a 	ret

08019c10 <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 8019c10:	defffa04 	addi	sp,sp,-24
 8019c14:	df000515 	stw	fp,20(sp)
 8019c18:	df000504 	addi	fp,sp,20
 8019c1c:	e13ffd15 	stw	r4,-12(fp)
 8019c20:	e17ffe15 	stw	r5,-8(fp)
 8019c24:	e1bfff15 	stw	r6,-4(fp)
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");
  register int r6 asm ("r6");

  r3 = (int)&hcinfo;
 8019c28:	d0a01804 	addi	r2,gp,-32672
 8019c2c:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8019c30:	e0bffd17 	ldw	r2,-12(fp)
 8019c34:	10800117 	ldw	r2,4(r2)
 8019c38:	1009883a 	mov	r4,r2
  r5 = ptr;
 8019c3c:	e17ffe17 	ldw	r5,-8(fp)
  r6 = dir;
 8019c40:	e1bfff17 	ldw	r6,-4(fp)

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5), "r" (r6) : "memory" );
 8019c44:	003da07a 	break	1

  rc = r2;
 8019c48:	e0bffb15 	stw	r2,-20(fp)
  error = r3;
 8019c4c:	e0fffc15 	stw	r3,-16(fp)

  return (error == 0) ? rc : -error;
 8019c50:	e0bffc17 	ldw	r2,-16(fp)
 8019c54:	10000326 	beq	r2,zero,8019c64 <alt_hostfs_seek+0x54>
 8019c58:	e0bffc17 	ldw	r2,-16(fp)
 8019c5c:	0085c83a 	sub	r2,zero,r2
 8019c60:	00000106 	br	8019c68 <alt_hostfs_seek+0x58>
 8019c64:	e0bffb17 	ldw	r2,-20(fp)
}
 8019c68:	e037883a 	mov	sp,fp
 8019c6c:	df000017 	ldw	fp,0(sp)
 8019c70:	dec00104 	addi	sp,sp,4
 8019c74:	f800283a 	ret

08019c78 <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 8019c78:	deffe904 	addi	sp,sp,-92
 8019c7c:	df001615 	stw	fp,88(sp)
 8019c80:	df001604 	addi	fp,sp,88
 8019c84:	e13ffe15 	stw	r4,-8(fp)
 8019c88:	e17fff15 	stw	r5,-4(fp)
  register int r2 asm ("r2");
  register int r3 asm ("r3");
  register int r4 asm ("r4");
  register int r5 asm ("r5");

  r3 = (int)&hcinfo;
 8019c8c:	d0a01b04 	addi	r2,gp,-32660
 8019c90:	1007883a 	mov	r3,r2
  r4 = (int)fd->priv;
 8019c94:	e0bffe17 	ldw	r2,-8(fp)
 8019c98:	10800117 	ldw	r2,4(r2)
 8019c9c:	1009883a 	mov	r4,r2
  r5 = (int)&hoststat;
 8019ca0:	e0bfee04 	addi	r2,fp,-72
 8019ca4:	100b883a 	mov	r5,r2

  __asm__ volatile("break 1" : "=r" (r2), "+r" (r3) : "r" (r4), "r" (r5) : "memory" );
 8019ca8:	003da07a 	break	1

  rc = r2;
 8019cac:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 8019cb0:	e0ffec15 	stw	r3,-80(fp)

  if (error == 0)
 8019cb4:	e0bfec17 	ldw	r2,-80(fp)
 8019cb8:	1000621e 	bne	r2,zero,8019e44 <alt_hostfs_fstat+0x1cc>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 8019cbc:	e0bfee04 	addi	r2,fp,-72
 8019cc0:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 8019cc4:	e0bfea17 	ldw	r2,-88(fp)
 8019cc8:	10801004 	addi	r2,r2,64
 8019ccc:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 8019cd0:	00001606 	br	8019d2c <alt_hostfs_fstat+0xb4>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 8019cd4:	e0bfea17 	ldw	r2,-88(fp)
 8019cd8:	10800017 	ldw	r2,0(r2)
 8019cdc:	1006d63a 	srli	r3,r2,24
             ((*ptr & 0x00FF0000) >> 8)  |
 8019ce0:	e0bfea17 	ldw	r2,-88(fp)
 8019ce4:	10800017 	ldw	r2,0(r2)
 8019ce8:	10803fec 	andhi	r2,r2,255
 8019cec:	1004d23a 	srli	r2,r2,8

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 8019cf0:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 8019cf4:	e0bfea17 	ldw	r2,-88(fp)
 8019cf8:	10800017 	ldw	r2,0(r2)
 8019cfc:	10bfc00c 	andi	r2,r2,65280
 8019d00:	1004923a 	slli	r2,r2,8
#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
 8019d04:	1886b03a 	or	r3,r3,r2
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
 8019d08:	e0bfea17 	ldw	r2,-88(fp)
 8019d0c:	10800017 	ldw	r2,0(r2)
 8019d10:	1004963a 	slli	r2,r2,24
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
             ((*ptr & 0x00FF0000) >> 8)  |
             ((*ptr & 0x0000FF00) << 8)  |
 8019d14:	1886b03a 	or	r3,r3,r2

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 8019d18:	e0bfea17 	ldw	r2,-88(fp)
 8019d1c:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 8019d20:	e0bfea17 	ldw	r2,-88(fp)
 8019d24:	10800104 	addi	r2,r2,4
 8019d28:	e0bfea15 	stw	r2,-88(fp)
 8019d2c:	e0ffea17 	ldw	r3,-88(fp)
 8019d30:	e0bfed17 	ldw	r2,-76(fp)
 8019d34:	18bfe736 	bltu	r3,r2,8019cd4 <_gp+0xffff4ccc>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 8019d38:	e0bfff17 	ldw	r2,-4(fp)
 8019d3c:	e0bfea15 	stw	r2,-88(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 8019d40:	e0bfea17 	ldw	r2,-88(fp)
 8019d44:	10800f04 	addi	r2,r2,60
 8019d48:	e0bfed15 	stw	r2,-76(fp)
    for ( ; ptr < end ; ptr++)
 8019d4c:	00000506 	br	8019d64 <alt_hostfs_fstat+0xec>
      *ptr = 0;
 8019d50:	e0bfea17 	ldw	r2,-88(fp)
 8019d54:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 8019d58:	e0bfea17 	ldw	r2,-88(fp)
 8019d5c:	10800104 	addi	r2,r2,4
 8019d60:	e0bfea15 	stw	r2,-88(fp)
 8019d64:	e0ffea17 	ldw	r3,-88(fp)
 8019d68:	e0bfed17 	ldw	r2,-76(fp)
 8019d6c:	18bff836 	bltu	r3,r2,8019d50 <_gp+0xffff4d48>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 8019d70:	e0bfee17 	ldw	r2,-72(fp)
 8019d74:	1007883a 	mov	r3,r2
 8019d78:	e0bfff17 	ldw	r2,-4(fp)
 8019d7c:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 8019d80:	e0bfef17 	ldw	r2,-68(fp)
 8019d84:	1007883a 	mov	r3,r2
 8019d88:	e0bfff17 	ldw	r2,-4(fp)
 8019d8c:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 8019d90:	e0fff017 	ldw	r3,-64(fp)
 8019d94:	e0bfff17 	ldw	r2,-4(fp)
 8019d98:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 8019d9c:	e0bff117 	ldw	r2,-60(fp)
 8019da0:	1007883a 	mov	r3,r2
 8019da4:	e0bfff17 	ldw	r2,-4(fp)
 8019da8:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 8019dac:	e0bff217 	ldw	r2,-56(fp)
 8019db0:	1007883a 	mov	r3,r2
 8019db4:	e0bfff17 	ldw	r2,-4(fp)
 8019db8:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 8019dbc:	e0bff317 	ldw	r2,-52(fp)
 8019dc0:	1007883a 	mov	r3,r2
 8019dc4:	e0bfff17 	ldw	r2,-4(fp)
 8019dc8:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 8019dcc:	e0bff417 	ldw	r2,-48(fp)
 8019dd0:	1007883a 	mov	r3,r2
 8019dd4:	e0bfff17 	ldw	r2,-4(fp)
 8019dd8:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 8019ddc:	e0bff617 	ldw	r2,-40(fp)
 8019de0:	1007883a 	mov	r3,r2
 8019de4:	e0bfff17 	ldw	r2,-4(fp)
 8019de8:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 8019dec:	e0bffb17 	ldw	r2,-20(fp)
 8019df0:	1007883a 	mov	r3,r2
 8019df4:	e0bfff17 	ldw	r2,-4(fp)
 8019df8:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 8019dfc:	e0bffc17 	ldw	r2,-16(fp)
 8019e00:	1007883a 	mov	r3,r2
 8019e04:	e0bfff17 	ldw	r2,-4(fp)
 8019e08:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 8019e0c:	e0bffd17 	ldw	r2,-12(fp)
 8019e10:	1007883a 	mov	r3,r2
 8019e14:	e0bfff17 	ldw	r2,-4(fp)
 8019e18:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 8019e1c:	e0bff817 	ldw	r2,-32(fp)
 8019e20:	1007883a 	mov	r3,r2
 8019e24:	e0bfff17 	ldw	r2,-4(fp)
 8019e28:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 8019e2c:	e0bffa17 	ldw	r2,-24(fp)
 8019e30:	1007883a 	mov	r3,r2
 8019e34:	e0bfff17 	ldw	r2,-4(fp)
 8019e38:	10c00c15 	stw	r3,48(r2)

    return rc;
 8019e3c:	e0bfeb17 	ldw	r2,-84(fp)
 8019e40:	00000206 	br	8019e4c <alt_hostfs_fstat+0x1d4>
  }
  else
    return -error;
 8019e44:	e0bfec17 	ldw	r2,-80(fp)
 8019e48:	0085c83a 	sub	r2,zero,r2
}
 8019e4c:	e037883a 	mov	sp,fp
 8019e50:	df000017 	ldw	fp,0(sp)
 8019e54:	dec00104 	addi	sp,sp,4
 8019e58:	f800283a 	ret

08019e5c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8019e5c:	defff504 	addi	sp,sp,-44
 8019e60:	df000a15 	stw	fp,40(sp)
 8019e64:	df000a04 	addi	fp,sp,40
 8019e68:	e13ffc15 	stw	r4,-16(fp)
 8019e6c:	e17ffd15 	stw	r5,-12(fp)
 8019e70:	e1bffe15 	stw	r6,-8(fp)
 8019e74:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8019e78:	e03ff615 	stw	zero,-40(fp)
 8019e7c:	d0a6f917 	ldw	r2,-25628(gp)
  
  if (alt_ticks_per_second ())
 8019e80:	10003c26 	beq	r2,zero,8019f74 <alt_alarm_start+0x118>
  {
    if (alarm)
 8019e84:	e0bffc17 	ldw	r2,-16(fp)
 8019e88:	10003826 	beq	r2,zero,8019f6c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8019e8c:	e0bffc17 	ldw	r2,-16(fp)
 8019e90:	e0fffe17 	ldw	r3,-8(fp)
 8019e94:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8019e98:	e0bffc17 	ldw	r2,-16(fp)
 8019e9c:	e0ffff17 	ldw	r3,-4(fp)
 8019ea0:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8019ea4:	0005303a 	rdctl	r2,status
 8019ea8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8019eac:	e0fff917 	ldw	r3,-28(fp)
 8019eb0:	00bfff84 	movi	r2,-2
 8019eb4:	1884703a 	and	r2,r3,r2
 8019eb8:	1001703a 	wrctl	status,r2
  
  return context;
 8019ebc:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8019ec0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8019ec4:	d0a6fa17 	ldw	r2,-25624(gp)
      
      current_nticks = alt_nticks();
 8019ec8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8019ecc:	e0fffd17 	ldw	r3,-12(fp)
 8019ed0:	e0bff617 	ldw	r2,-40(fp)
 8019ed4:	1885883a 	add	r2,r3,r2
 8019ed8:	10c00044 	addi	r3,r2,1
 8019edc:	e0bffc17 	ldw	r2,-16(fp)
 8019ee0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8019ee4:	e0bffc17 	ldw	r2,-16(fp)
 8019ee8:	10c00217 	ldw	r3,8(r2)
 8019eec:	e0bff617 	ldw	r2,-40(fp)
 8019ef0:	1880042e 	bgeu	r3,r2,8019f04 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8019ef4:	e0bffc17 	ldw	r2,-16(fp)
 8019ef8:	00c00044 	movi	r3,1
 8019efc:	10c00405 	stb	r3,16(r2)
 8019f00:	00000206 	br	8019f0c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8019f04:	e0bffc17 	ldw	r2,-16(fp)
 8019f08:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8019f0c:	e0bffc17 	ldw	r2,-16(fp)
 8019f10:	d0e01f04 	addi	r3,gp,-32644
 8019f14:	e0fffa15 	stw	r3,-24(fp)
 8019f18:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8019f1c:	e0bffb17 	ldw	r2,-20(fp)
 8019f20:	e0fffa17 	ldw	r3,-24(fp)
 8019f24:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8019f28:	e0bffa17 	ldw	r2,-24(fp)
 8019f2c:	10c00017 	ldw	r3,0(r2)
 8019f30:	e0bffb17 	ldw	r2,-20(fp)
 8019f34:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8019f38:	e0bffa17 	ldw	r2,-24(fp)
 8019f3c:	10800017 	ldw	r2,0(r2)
 8019f40:	e0fffb17 	ldw	r3,-20(fp)
 8019f44:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8019f48:	e0bffa17 	ldw	r2,-24(fp)
 8019f4c:	e0fffb17 	ldw	r3,-20(fp)
 8019f50:	10c00015 	stw	r3,0(r2)
 8019f54:	e0bff817 	ldw	r2,-32(fp)
 8019f58:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8019f5c:	e0bff717 	ldw	r2,-36(fp)
 8019f60:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8019f64:	0005883a 	mov	r2,zero
 8019f68:	00000306 	br	8019f78 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8019f6c:	00bffa84 	movi	r2,-22
 8019f70:	00000106 	br	8019f78 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8019f74:	00bfde84 	movi	r2,-134
  }
}
 8019f78:	e037883a 	mov	sp,fp
 8019f7c:	df000017 	ldw	fp,0(sp)
 8019f80:	dec00104 	addi	sp,sp,4
 8019f84:	f800283a 	ret

08019f88 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8019f88:	deffff04 	addi	sp,sp,-4
 8019f8c:	df000015 	stw	fp,0(sp)
 8019f90:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8019f94:	0001883a 	nop
 8019f98:	e037883a 	mov	sp,fp
 8019f9c:	df000017 	ldw	fp,0(sp)
 8019fa0:	dec00104 	addi	sp,sp,4
 8019fa4:	f800283a 	ret

08019fa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8019fa8:	defffe04 	addi	sp,sp,-8
 8019fac:	dfc00115 	stw	ra,4(sp)
 8019fb0:	df000015 	stw	fp,0(sp)
 8019fb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8019fb8:	d0a00a17 	ldw	r2,-32728(gp)
 8019fbc:	10000326 	beq	r2,zero,8019fcc <alt_get_errno+0x24>
 8019fc0:	d0a00a17 	ldw	r2,-32728(gp)
 8019fc4:	103ee83a 	callr	r2
 8019fc8:	00000106 	br	8019fd0 <alt_get_errno+0x28>
 8019fcc:	d0a6e404 	addi	r2,gp,-25712
}
 8019fd0:	e037883a 	mov	sp,fp
 8019fd4:	dfc00117 	ldw	ra,4(sp)
 8019fd8:	df000017 	ldw	fp,0(sp)
 8019fdc:	dec00204 	addi	sp,sp,8
 8019fe0:	f800283a 	ret

08019fe4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8019fe4:	defffa04 	addi	sp,sp,-24
 8019fe8:	dfc00515 	stw	ra,20(sp)
 8019fec:	df000415 	stw	fp,16(sp)
 8019ff0:	df000404 	addi	fp,sp,16
 8019ff4:	e13ffe15 	stw	r4,-8(fp)
 8019ff8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8019ffc:	e0bffe17 	ldw	r2,-8(fp)
 801a000:	10000326 	beq	r2,zero,801a010 <alt_dev_llist_insert+0x2c>
 801a004:	e0bffe17 	ldw	r2,-8(fp)
 801a008:	10800217 	ldw	r2,8(r2)
 801a00c:	1000061e 	bne	r2,zero,801a028 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 801a010:	8019fa80 	call	8019fa8 <alt_get_errno>
 801a014:	1007883a 	mov	r3,r2
 801a018:	00800584 	movi	r2,22
 801a01c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 801a020:	00bffa84 	movi	r2,-22
 801a024:	00001306 	br	801a074 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 801a028:	e0bffe17 	ldw	r2,-8(fp)
 801a02c:	e0ffff17 	ldw	r3,-4(fp)
 801a030:	e0fffc15 	stw	r3,-16(fp)
 801a034:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801a038:	e0bffd17 	ldw	r2,-12(fp)
 801a03c:	e0fffc17 	ldw	r3,-16(fp)
 801a040:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801a044:	e0bffc17 	ldw	r2,-16(fp)
 801a048:	10c00017 	ldw	r3,0(r2)
 801a04c:	e0bffd17 	ldw	r2,-12(fp)
 801a050:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801a054:	e0bffc17 	ldw	r2,-16(fp)
 801a058:	10800017 	ldw	r2,0(r2)
 801a05c:	e0fffd17 	ldw	r3,-12(fp)
 801a060:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801a064:	e0bffc17 	ldw	r2,-16(fp)
 801a068:	e0fffd17 	ldw	r3,-12(fp)
 801a06c:	10c00015 	stw	r3,0(r2)

  return 0;  
 801a070:	0005883a 	mov	r2,zero
}
 801a074:	e037883a 	mov	sp,fp
 801a078:	dfc00117 	ldw	ra,4(sp)
 801a07c:	df000017 	ldw	fp,0(sp)
 801a080:	dec00204 	addi	sp,sp,8
 801a084:	f800283a 	ret

0801a088 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801a088:	defffa04 	addi	sp,sp,-24
 801a08c:	dfc00515 	stw	ra,20(sp)
 801a090:	df000415 	stw	fp,16(sp)
 801a094:	df000404 	addi	fp,sp,16
 801a098:	e13ffe15 	stw	r4,-8(fp)
 801a09c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801a0a0:	e0bfff17 	ldw	r2,-4(fp)
 801a0a4:	10800017 	ldw	r2,0(r2)
 801a0a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801a0ac:	e13ffe17 	ldw	r4,-8(fp)
 801a0b0:	801abcc0 	call	801abcc <strlen>
 801a0b4:	10800044 	addi	r2,r2,1
 801a0b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801a0bc:	00000d06 	br	801a0f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801a0c0:	e0bffc17 	ldw	r2,-16(fp)
 801a0c4:	10800217 	ldw	r2,8(r2)
 801a0c8:	e0fffd17 	ldw	r3,-12(fp)
 801a0cc:	180d883a 	mov	r6,r3
 801a0d0:	e17ffe17 	ldw	r5,-8(fp)
 801a0d4:	1009883a 	mov	r4,r2
 801a0d8:	801a9e80 	call	801a9e8 <memcmp>
 801a0dc:	1000021e 	bne	r2,zero,801a0e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801a0e0:	e0bffc17 	ldw	r2,-16(fp)
 801a0e4:	00000706 	br	801a104 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801a0e8:	e0bffc17 	ldw	r2,-16(fp)
 801a0ec:	10800017 	ldw	r2,0(r2)
 801a0f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801a0f4:	e0fffc17 	ldw	r3,-16(fp)
 801a0f8:	e0bfff17 	ldw	r2,-4(fp)
 801a0fc:	18bff01e 	bne	r3,r2,801a0c0 <_gp+0xffff50b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801a100:	0005883a 	mov	r2,zero
}
 801a104:	e037883a 	mov	sp,fp
 801a108:	dfc00117 	ldw	ra,4(sp)
 801a10c:	df000017 	ldw	fp,0(sp)
 801a110:	dec00204 	addi	sp,sp,8
 801a114:	f800283a 	ret

0801a118 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801a118:	defffb04 	addi	sp,sp,-20
 801a11c:	dfc00415 	stw	ra,16(sp)
 801a120:	df000315 	stw	fp,12(sp)
 801a124:	df000304 	addi	fp,sp,12
 801a128:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801a12c:	d0a00517 	ldw	r2,-32748(gp)
 801a130:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801a134:	00003106 	br	801a1fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 801a138:	e0bffd17 	ldw	r2,-12(fp)
 801a13c:	10800217 	ldw	r2,8(r2)
 801a140:	1009883a 	mov	r4,r2
 801a144:	801abcc0 	call	801abcc <strlen>
 801a148:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801a14c:	e0bffd17 	ldw	r2,-12(fp)
 801a150:	10c00217 	ldw	r3,8(r2)
 801a154:	e0bffe17 	ldw	r2,-8(fp)
 801a158:	10bfffc4 	addi	r2,r2,-1
 801a15c:	1885883a 	add	r2,r3,r2
 801a160:	10800003 	ldbu	r2,0(r2)
 801a164:	10803fcc 	andi	r2,r2,255
 801a168:	1080201c 	xori	r2,r2,128
 801a16c:	10bfe004 	addi	r2,r2,-128
 801a170:	10800bd8 	cmpnei	r2,r2,47
 801a174:	1000031e 	bne	r2,zero,801a184 <alt_find_file+0x6c>
    {
      len -= 1;
 801a178:	e0bffe17 	ldw	r2,-8(fp)
 801a17c:	10bfffc4 	addi	r2,r2,-1
 801a180:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801a184:	e0bffe17 	ldw	r2,-8(fp)
 801a188:	e0ffff17 	ldw	r3,-4(fp)
 801a18c:	1885883a 	add	r2,r3,r2
 801a190:	10800003 	ldbu	r2,0(r2)
 801a194:	10803fcc 	andi	r2,r2,255
 801a198:	1080201c 	xori	r2,r2,128
 801a19c:	10bfe004 	addi	r2,r2,-128
 801a1a0:	10800be0 	cmpeqi	r2,r2,47
 801a1a4:	1000081e 	bne	r2,zero,801a1c8 <alt_find_file+0xb0>
 801a1a8:	e0bffe17 	ldw	r2,-8(fp)
 801a1ac:	e0ffff17 	ldw	r3,-4(fp)
 801a1b0:	1885883a 	add	r2,r3,r2
 801a1b4:	10800003 	ldbu	r2,0(r2)
 801a1b8:	10803fcc 	andi	r2,r2,255
 801a1bc:	1080201c 	xori	r2,r2,128
 801a1c0:	10bfe004 	addi	r2,r2,-128
 801a1c4:	10000a1e 	bne	r2,zero,801a1f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 801a1c8:	e0bffd17 	ldw	r2,-12(fp)
 801a1cc:	10800217 	ldw	r2,8(r2)
 801a1d0:	e0fffe17 	ldw	r3,-8(fp)
 801a1d4:	180d883a 	mov	r6,r3
 801a1d8:	e17fff17 	ldw	r5,-4(fp)
 801a1dc:	1009883a 	mov	r4,r2
 801a1e0:	801a9e80 	call	801a9e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801a1e4:	1000021e 	bne	r2,zero,801a1f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801a1e8:	e0bffd17 	ldw	r2,-12(fp)
 801a1ec:	00000706 	br	801a20c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801a1f0:	e0bffd17 	ldw	r2,-12(fp)
 801a1f4:	10800017 	ldw	r2,0(r2)
 801a1f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801a1fc:	e0fffd17 	ldw	r3,-12(fp)
 801a200:	d0a00504 	addi	r2,gp,-32748
 801a204:	18bfcc1e 	bne	r3,r2,801a138 <_gp+0xffff5130>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801a208:	0005883a 	mov	r2,zero
}
 801a20c:	e037883a 	mov	sp,fp
 801a210:	dfc00117 	ldw	ra,4(sp)
 801a214:	df000017 	ldw	fp,0(sp)
 801a218:	dec00204 	addi	sp,sp,8
 801a21c:	f800283a 	ret

0801a220 <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 801a220:	defffc04 	addi	sp,sp,-16
 801a224:	df000315 	stw	fp,12(sp)
 801a228:	df000304 	addi	fp,sp,12
 801a22c:	e13fff15 	stw	r4,-4(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 801a230:	e0bfff17 	ldw	r2,-4(fp)
 801a234:	10800217 	ldw	r2,8(r2)
 801a238:	1000021e 	bne	r2,zero,801a244 <alt_fs_reg+0x24>
  {
    return -ENODEV;
 801a23c:	00bffb44 	movi	r2,-19
 801a240:	00001306 	br	801a290 <alt_fs_reg+0x70>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 801a244:	e0bfff17 	ldw	r2,-4(fp)
 801a248:	d0e00504 	addi	r3,gp,-32748
 801a24c:	e0fffd15 	stw	r3,-12(fp)
 801a250:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801a254:	e0bffe17 	ldw	r2,-8(fp)
 801a258:	e0fffd17 	ldw	r3,-12(fp)
 801a25c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801a260:	e0bffd17 	ldw	r2,-12(fp)
 801a264:	10c00017 	ldw	r3,0(r2)
 801a268:	e0bffe17 	ldw	r2,-8(fp)
 801a26c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801a270:	e0bffd17 	ldw	r2,-12(fp)
 801a274:	10800017 	ldw	r2,0(r2)
 801a278:	e0fffe17 	ldw	r3,-8(fp)
 801a27c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801a280:	e0bffd17 	ldw	r2,-12(fp)
 801a284:	e0fffe17 	ldw	r3,-8(fp)
 801a288:	10c00015 	stw	r3,0(r2)

  return 0;
 801a28c:	0005883a 	mov	r2,zero
} 
 801a290:	e037883a 	mov	sp,fp
 801a294:	df000017 	ldw	fp,0(sp)
 801a298:	dec00104 	addi	sp,sp,4
 801a29c:	f800283a 	ret

0801a2a0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801a2a0:	defffa04 	addi	sp,sp,-24
 801a2a4:	dfc00515 	stw	ra,20(sp)
 801a2a8:	df000415 	stw	fp,16(sp)
 801a2ac:	dc000315 	stw	r16,12(sp)
 801a2b0:	df000404 	addi	fp,sp,16
 801a2b4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 801a2b8:	00bffa04 	movi	r2,-24
 801a2bc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801a2c0:	e03ffc15 	stw	zero,-16(fp)
 801a2c4:	00001d06 	br	801a33c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 801a2c8:	040200b4 	movhi	r16,2050
 801a2cc:	842f7504 	addi	r16,r16,-16940
 801a2d0:	e0bffc17 	ldw	r2,-16(fp)
 801a2d4:	01400304 	movi	r5,12
 801a2d8:	1009883a 	mov	r4,r2
 801a2dc:	8013c380 	call	8013c38 <__mulsi3>
 801a2e0:	8085883a 	add	r2,r16,r2
 801a2e4:	10800017 	ldw	r2,0(r2)
 801a2e8:	1000111e 	bne	r2,zero,801a330 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 801a2ec:	040200b4 	movhi	r16,2050
 801a2f0:	842f7504 	addi	r16,r16,-16940
 801a2f4:	e0bffc17 	ldw	r2,-16(fp)
 801a2f8:	01400304 	movi	r5,12
 801a2fc:	1009883a 	mov	r4,r2
 801a300:	8013c380 	call	8013c38 <__mulsi3>
 801a304:	8085883a 	add	r2,r16,r2
 801a308:	e0fffe17 	ldw	r3,-8(fp)
 801a30c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801a310:	d0e00917 	ldw	r3,-32732(gp)
 801a314:	e0bffc17 	ldw	r2,-16(fp)
 801a318:	1880020e 	bge	r3,r2,801a324 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 801a31c:	e0bffc17 	ldw	r2,-16(fp)
 801a320:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 801a324:	e0bffc17 	ldw	r2,-16(fp)
 801a328:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 801a32c:	00000606 	br	801a348 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801a330:	e0bffc17 	ldw	r2,-16(fp)
 801a334:	10800044 	addi	r2,r2,1
 801a338:	e0bffc15 	stw	r2,-16(fp)
 801a33c:	e0bffc17 	ldw	r2,-16(fp)
 801a340:	10800810 	cmplti	r2,r2,32
 801a344:	103fe01e 	bne	r2,zero,801a2c8 <_gp+0xffff52c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801a348:	e0bffd17 	ldw	r2,-12(fp)
}
 801a34c:	e6ffff04 	addi	sp,fp,-4
 801a350:	dfc00217 	ldw	ra,8(sp)
 801a354:	df000117 	ldw	fp,4(sp)
 801a358:	dc000017 	ldw	r16,0(sp)
 801a35c:	dec00304 	addi	sp,sp,12
 801a360:	f800283a 	ret

0801a364 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801a364:	deffff04 	addi	sp,sp,-4
 801a368:	df000015 	stw	fp,0(sp)
 801a36c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 801a370:	0001883a 	nop
 801a374:	e037883a 	mov	sp,fp
 801a378:	df000017 	ldw	fp,0(sp)
 801a37c:	dec00104 	addi	sp,sp,4
 801a380:	f800283a 	ret

0801a384 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801a384:	defff904 	addi	sp,sp,-28
 801a388:	dfc00615 	stw	ra,24(sp)
 801a38c:	df000515 	stw	fp,20(sp)
 801a390:	df000504 	addi	fp,sp,20
 801a394:	e13ffc15 	stw	r4,-16(fp)
 801a398:	e17ffd15 	stw	r5,-12(fp)
 801a39c:	e1bffe15 	stw	r6,-8(fp)
 801a3a0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801a3a4:	e0800217 	ldw	r2,8(fp)
 801a3a8:	d8800015 	stw	r2,0(sp)
 801a3ac:	e1ffff17 	ldw	r7,-4(fp)
 801a3b0:	e1bffe17 	ldw	r6,-8(fp)
 801a3b4:	e17ffd17 	ldw	r5,-12(fp)
 801a3b8:	e13ffc17 	ldw	r4,-16(fp)
 801a3bc:	801a5340 	call	801a534 <alt_iic_isr_register>
}  
 801a3c0:	e037883a 	mov	sp,fp
 801a3c4:	dfc00117 	ldw	ra,4(sp)
 801a3c8:	df000017 	ldw	fp,0(sp)
 801a3cc:	dec00204 	addi	sp,sp,8
 801a3d0:	f800283a 	ret

0801a3d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801a3d4:	defff904 	addi	sp,sp,-28
 801a3d8:	df000615 	stw	fp,24(sp)
 801a3dc:	df000604 	addi	fp,sp,24
 801a3e0:	e13ffe15 	stw	r4,-8(fp)
 801a3e4:	e17fff15 	stw	r5,-4(fp)
 801a3e8:	e0bfff17 	ldw	r2,-4(fp)
 801a3ec:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a3f0:	0005303a 	rdctl	r2,status
 801a3f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a3f8:	e0fffb17 	ldw	r3,-20(fp)
 801a3fc:	00bfff84 	movi	r2,-2
 801a400:	1884703a 	and	r2,r3,r2
 801a404:	1001703a 	wrctl	status,r2
  
  return context;
 801a408:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801a40c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801a410:	00c00044 	movi	r3,1
 801a414:	e0bffa17 	ldw	r2,-24(fp)
 801a418:	1884983a 	sll	r2,r3,r2
 801a41c:	1007883a 	mov	r3,r2
 801a420:	d0a6f817 	ldw	r2,-25632(gp)
 801a424:	1884b03a 	or	r2,r3,r2
 801a428:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801a42c:	d0a6f817 	ldw	r2,-25632(gp)
 801a430:	100170fa 	wrctl	ienable,r2
 801a434:	e0bffc17 	ldw	r2,-16(fp)
 801a438:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a43c:	e0bffd17 	ldw	r2,-12(fp)
 801a440:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801a444:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801a448:	0001883a 	nop
}
 801a44c:	e037883a 	mov	sp,fp
 801a450:	df000017 	ldw	fp,0(sp)
 801a454:	dec00104 	addi	sp,sp,4
 801a458:	f800283a 	ret

0801a45c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801a45c:	defff904 	addi	sp,sp,-28
 801a460:	df000615 	stw	fp,24(sp)
 801a464:	df000604 	addi	fp,sp,24
 801a468:	e13ffe15 	stw	r4,-8(fp)
 801a46c:	e17fff15 	stw	r5,-4(fp)
 801a470:	e0bfff17 	ldw	r2,-4(fp)
 801a474:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a478:	0005303a 	rdctl	r2,status
 801a47c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a480:	e0fffb17 	ldw	r3,-20(fp)
 801a484:	00bfff84 	movi	r2,-2
 801a488:	1884703a 	and	r2,r3,r2
 801a48c:	1001703a 	wrctl	status,r2
  
  return context;
 801a490:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801a494:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801a498:	00c00044 	movi	r3,1
 801a49c:	e0bffa17 	ldw	r2,-24(fp)
 801a4a0:	1884983a 	sll	r2,r3,r2
 801a4a4:	0084303a 	nor	r2,zero,r2
 801a4a8:	1007883a 	mov	r3,r2
 801a4ac:	d0a6f817 	ldw	r2,-25632(gp)
 801a4b0:	1884703a 	and	r2,r3,r2
 801a4b4:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801a4b8:	d0a6f817 	ldw	r2,-25632(gp)
 801a4bc:	100170fa 	wrctl	ienable,r2
 801a4c0:	e0bffc17 	ldw	r2,-16(fp)
 801a4c4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a4c8:	e0bffd17 	ldw	r2,-12(fp)
 801a4cc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801a4d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801a4d4:	0001883a 	nop
}
 801a4d8:	e037883a 	mov	sp,fp
 801a4dc:	df000017 	ldw	fp,0(sp)
 801a4e0:	dec00104 	addi	sp,sp,4
 801a4e4:	f800283a 	ret

0801a4e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801a4e8:	defffc04 	addi	sp,sp,-16
 801a4ec:	df000315 	stw	fp,12(sp)
 801a4f0:	df000304 	addi	fp,sp,12
 801a4f4:	e13ffe15 	stw	r4,-8(fp)
 801a4f8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801a4fc:	000530fa 	rdctl	r2,ienable
 801a500:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801a504:	00c00044 	movi	r3,1
 801a508:	e0bfff17 	ldw	r2,-4(fp)
 801a50c:	1884983a 	sll	r2,r3,r2
 801a510:	1007883a 	mov	r3,r2
 801a514:	e0bffd17 	ldw	r2,-12(fp)
 801a518:	1884703a 	and	r2,r3,r2
 801a51c:	1004c03a 	cmpne	r2,r2,zero
 801a520:	10803fcc 	andi	r2,r2,255
}
 801a524:	e037883a 	mov	sp,fp
 801a528:	df000017 	ldw	fp,0(sp)
 801a52c:	dec00104 	addi	sp,sp,4
 801a530:	f800283a 	ret

0801a534 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801a534:	defff504 	addi	sp,sp,-44
 801a538:	dfc00a15 	stw	ra,40(sp)
 801a53c:	df000915 	stw	fp,36(sp)
 801a540:	df000904 	addi	fp,sp,36
 801a544:	e13ffc15 	stw	r4,-16(fp)
 801a548:	e17ffd15 	stw	r5,-12(fp)
 801a54c:	e1bffe15 	stw	r6,-8(fp)
 801a550:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801a554:	00bffa84 	movi	r2,-22
 801a558:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801a55c:	e0bffd17 	ldw	r2,-12(fp)
 801a560:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801a564:	e0bff817 	ldw	r2,-32(fp)
 801a568:	10800808 	cmpgei	r2,r2,32
 801a56c:	1000271e 	bne	r2,zero,801a60c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a570:	0005303a 	rdctl	r2,status
 801a574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a578:	e0fffb17 	ldw	r3,-20(fp)
 801a57c:	00bfff84 	movi	r2,-2
 801a580:	1884703a 	and	r2,r3,r2
 801a584:	1001703a 	wrctl	status,r2
  
  return context;
 801a588:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801a58c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 801a590:	008200b4 	movhi	r2,2050
 801a594:	10bc6204 	addi	r2,r2,-3704
 801a598:	e0fff817 	ldw	r3,-32(fp)
 801a59c:	180690fa 	slli	r3,r3,3
 801a5a0:	10c5883a 	add	r2,r2,r3
 801a5a4:	e0fffe17 	ldw	r3,-8(fp)
 801a5a8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801a5ac:	008200b4 	movhi	r2,2050
 801a5b0:	10bc6204 	addi	r2,r2,-3704
 801a5b4:	e0fff817 	ldw	r3,-32(fp)
 801a5b8:	180690fa 	slli	r3,r3,3
 801a5bc:	10c5883a 	add	r2,r2,r3
 801a5c0:	10800104 	addi	r2,r2,4
 801a5c4:	e0ffff17 	ldw	r3,-4(fp)
 801a5c8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801a5cc:	e0bffe17 	ldw	r2,-8(fp)
 801a5d0:	10000526 	beq	r2,zero,801a5e8 <alt_iic_isr_register+0xb4>
 801a5d4:	e0bff817 	ldw	r2,-32(fp)
 801a5d8:	100b883a 	mov	r5,r2
 801a5dc:	e13ffc17 	ldw	r4,-16(fp)
 801a5e0:	801a3d40 	call	801a3d4 <alt_ic_irq_enable>
 801a5e4:	00000406 	br	801a5f8 <alt_iic_isr_register+0xc4>
 801a5e8:	e0bff817 	ldw	r2,-32(fp)
 801a5ec:	100b883a 	mov	r5,r2
 801a5f0:	e13ffc17 	ldw	r4,-16(fp)
 801a5f4:	801a45c0 	call	801a45c <alt_ic_irq_disable>
 801a5f8:	e0bff715 	stw	r2,-36(fp)
 801a5fc:	e0bffa17 	ldw	r2,-24(fp)
 801a600:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a604:	e0bff917 	ldw	r2,-28(fp)
 801a608:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801a60c:	e0bff717 	ldw	r2,-36(fp)
}
 801a610:	e037883a 	mov	sp,fp
 801a614:	dfc00117 	ldw	ra,4(sp)
 801a618:	df000017 	ldw	fp,0(sp)
 801a61c:	dec00204 	addi	sp,sp,8
 801a620:	f800283a 	ret

0801a624 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801a624:	defff804 	addi	sp,sp,-32
 801a628:	dfc00715 	stw	ra,28(sp)
 801a62c:	df000615 	stw	fp,24(sp)
 801a630:	dc000515 	stw	r16,20(sp)
 801a634:	df000604 	addi	fp,sp,24
 801a638:	e13ffb15 	stw	r4,-20(fp)
 801a63c:	e17ffc15 	stw	r5,-16(fp)
 801a640:	e1bffd15 	stw	r6,-12(fp)
 801a644:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 801a648:	e1bffe17 	ldw	r6,-8(fp)
 801a64c:	e17ffd17 	ldw	r5,-12(fp)
 801a650:	e13ffc17 	ldw	r4,-16(fp)
 801a654:	80143900 	call	8014390 <open>
 801a658:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 801a65c:	e0bffa17 	ldw	r2,-24(fp)
 801a660:	10002216 	blt	r2,zero,801a6ec <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801a664:	040200b4 	movhi	r16,2050
 801a668:	842f7504 	addi	r16,r16,-16940
 801a66c:	e0bffa17 	ldw	r2,-24(fp)
 801a670:	01400304 	movi	r5,12
 801a674:	1009883a 	mov	r4,r2
 801a678:	8013c380 	call	8013c38 <__mulsi3>
 801a67c:	8085883a 	add	r2,r16,r2
 801a680:	10c00017 	ldw	r3,0(r2)
 801a684:	e0bffb17 	ldw	r2,-20(fp)
 801a688:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801a68c:	040200b4 	movhi	r16,2050
 801a690:	842f7504 	addi	r16,r16,-16940
 801a694:	e0bffa17 	ldw	r2,-24(fp)
 801a698:	01400304 	movi	r5,12
 801a69c:	1009883a 	mov	r4,r2
 801a6a0:	8013c380 	call	8013c38 <__mulsi3>
 801a6a4:	8085883a 	add	r2,r16,r2
 801a6a8:	10800104 	addi	r2,r2,4
 801a6ac:	10c00017 	ldw	r3,0(r2)
 801a6b0:	e0bffb17 	ldw	r2,-20(fp)
 801a6b4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801a6b8:	040200b4 	movhi	r16,2050
 801a6bc:	842f7504 	addi	r16,r16,-16940
 801a6c0:	e0bffa17 	ldw	r2,-24(fp)
 801a6c4:	01400304 	movi	r5,12
 801a6c8:	1009883a 	mov	r4,r2
 801a6cc:	8013c380 	call	8013c38 <__mulsi3>
 801a6d0:	8085883a 	add	r2,r16,r2
 801a6d4:	10800204 	addi	r2,r2,8
 801a6d8:	10c00017 	ldw	r3,0(r2)
 801a6dc:	e0bffb17 	ldw	r2,-20(fp)
 801a6e0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801a6e4:	e13ffa17 	ldw	r4,-24(fp)
 801a6e8:	80148940 	call	8014894 <alt_release_fd>
  }
} 
 801a6ec:	0001883a 	nop
 801a6f0:	e6ffff04 	addi	sp,fp,-4
 801a6f4:	dfc00217 	ldw	ra,8(sp)
 801a6f8:	df000117 	ldw	fp,4(sp)
 801a6fc:	dc000017 	ldw	r16,0(sp)
 801a700:	dec00304 	addi	sp,sp,12
 801a704:	f800283a 	ret

0801a708 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801a708:	defffb04 	addi	sp,sp,-20
 801a70c:	dfc00415 	stw	ra,16(sp)
 801a710:	df000315 	stw	fp,12(sp)
 801a714:	df000304 	addi	fp,sp,12
 801a718:	e13ffd15 	stw	r4,-12(fp)
 801a71c:	e17ffe15 	stw	r5,-8(fp)
 801a720:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801a724:	01c07fc4 	movi	r7,511
 801a728:	01800044 	movi	r6,1
 801a72c:	e17ffd17 	ldw	r5,-12(fp)
 801a730:	010200b4 	movhi	r4,2050
 801a734:	212f7804 	addi	r4,r4,-16928
 801a738:	801a6240 	call	801a624 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801a73c:	01c07fc4 	movi	r7,511
 801a740:	000d883a 	mov	r6,zero
 801a744:	e17ffe17 	ldw	r5,-8(fp)
 801a748:	010200b4 	movhi	r4,2050
 801a74c:	212f7504 	addi	r4,r4,-16940
 801a750:	801a6240 	call	801a624 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801a754:	01c07fc4 	movi	r7,511
 801a758:	01800044 	movi	r6,1
 801a75c:	e17fff17 	ldw	r5,-4(fp)
 801a760:	010200b4 	movhi	r4,2050
 801a764:	212f7b04 	addi	r4,r4,-16916
 801a768:	801a6240 	call	801a624 <alt_open_fd>
}  
 801a76c:	0001883a 	nop
 801a770:	e037883a 	mov	sp,fp
 801a774:	dfc00117 	ldw	ra,4(sp)
 801a778:	df000017 	ldw	fp,0(sp)
 801a77c:	dec00204 	addi	sp,sp,8
 801a780:	f800283a 	ret

0801a784 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801a784:	defffa04 	addi	sp,sp,-24
 801a788:	df000515 	stw	fp,20(sp)
 801a78c:	df000504 	addi	fp,sp,20
 801a790:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801a794:	0005303a 	rdctl	r2,status
 801a798:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801a79c:	e0fffc17 	ldw	r3,-16(fp)
 801a7a0:	00bfff84 	movi	r2,-2
 801a7a4:	1884703a 	and	r2,r3,r2
 801a7a8:	1001703a 	wrctl	status,r2
  
  return context;
 801a7ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 801a7b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801a7b4:	e0bfff17 	ldw	r2,-4(fp)
 801a7b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801a7bc:	e0bffd17 	ldw	r2,-12(fp)
 801a7c0:	10800017 	ldw	r2,0(r2)
 801a7c4:	e0fffd17 	ldw	r3,-12(fp)
 801a7c8:	18c00117 	ldw	r3,4(r3)
 801a7cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 801a7d0:	e0bffd17 	ldw	r2,-12(fp)
 801a7d4:	10800117 	ldw	r2,4(r2)
 801a7d8:	e0fffd17 	ldw	r3,-12(fp)
 801a7dc:	18c00017 	ldw	r3,0(r3)
 801a7e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801a7e4:	e0bffd17 	ldw	r2,-12(fp)
 801a7e8:	e0fffd17 	ldw	r3,-12(fp)
 801a7ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 801a7f0:	e0bffd17 	ldw	r2,-12(fp)
 801a7f4:	e0fffd17 	ldw	r3,-12(fp)
 801a7f8:	10c00015 	stw	r3,0(r2)
 801a7fc:	e0bffb17 	ldw	r2,-20(fp)
 801a800:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801a804:	e0bffe17 	ldw	r2,-8(fp)
 801a808:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801a80c:	0001883a 	nop
 801a810:	e037883a 	mov	sp,fp
 801a814:	df000017 	ldw	fp,0(sp)
 801a818:	dec00104 	addi	sp,sp,4
 801a81c:	f800283a 	ret

0801a820 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801a820:	defffb04 	addi	sp,sp,-20
 801a824:	dfc00415 	stw	ra,16(sp)
 801a828:	df000315 	stw	fp,12(sp)
 801a82c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801a830:	d0a01f17 	ldw	r2,-32644(gp)
 801a834:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801a838:	d0a6fa17 	ldw	r2,-25624(gp)
 801a83c:	10800044 	addi	r2,r2,1
 801a840:	d0a6fa15 	stw	r2,-25624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801a844:	00002e06 	br	801a900 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 801a848:	e0bffd17 	ldw	r2,-12(fp)
 801a84c:	10800017 	ldw	r2,0(r2)
 801a850:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801a854:	e0bffd17 	ldw	r2,-12(fp)
 801a858:	10800403 	ldbu	r2,16(r2)
 801a85c:	10803fcc 	andi	r2,r2,255
 801a860:	10000426 	beq	r2,zero,801a874 <alt_tick+0x54>
 801a864:	d0a6fa17 	ldw	r2,-25624(gp)
 801a868:	1000021e 	bne	r2,zero,801a874 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801a86c:	e0bffd17 	ldw	r2,-12(fp)
 801a870:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801a874:	e0bffd17 	ldw	r2,-12(fp)
 801a878:	10800217 	ldw	r2,8(r2)
 801a87c:	d0e6fa17 	ldw	r3,-25624(gp)
 801a880:	18801d36 	bltu	r3,r2,801a8f8 <alt_tick+0xd8>
 801a884:	e0bffd17 	ldw	r2,-12(fp)
 801a888:	10800403 	ldbu	r2,16(r2)
 801a88c:	10803fcc 	andi	r2,r2,255
 801a890:	1000191e 	bne	r2,zero,801a8f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801a894:	e0bffd17 	ldw	r2,-12(fp)
 801a898:	10800317 	ldw	r2,12(r2)
 801a89c:	e0fffd17 	ldw	r3,-12(fp)
 801a8a0:	18c00517 	ldw	r3,20(r3)
 801a8a4:	1809883a 	mov	r4,r3
 801a8a8:	103ee83a 	callr	r2
 801a8ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 801a8b0:	e0bfff17 	ldw	r2,-4(fp)
 801a8b4:	1000031e 	bne	r2,zero,801a8c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 801a8b8:	e13ffd17 	ldw	r4,-12(fp)
 801a8bc:	801a7840 	call	801a784 <alt_alarm_stop>
 801a8c0:	00000d06 	br	801a8f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801a8c4:	e0bffd17 	ldw	r2,-12(fp)
 801a8c8:	10c00217 	ldw	r3,8(r2)
 801a8cc:	e0bfff17 	ldw	r2,-4(fp)
 801a8d0:	1887883a 	add	r3,r3,r2
 801a8d4:	e0bffd17 	ldw	r2,-12(fp)
 801a8d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801a8dc:	e0bffd17 	ldw	r2,-12(fp)
 801a8e0:	10c00217 	ldw	r3,8(r2)
 801a8e4:	d0a6fa17 	ldw	r2,-25624(gp)
 801a8e8:	1880032e 	bgeu	r3,r2,801a8f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801a8ec:	e0bffd17 	ldw	r2,-12(fp)
 801a8f0:	00c00044 	movi	r3,1
 801a8f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 801a8f8:	e0bffe17 	ldw	r2,-8(fp)
 801a8fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801a900:	e0fffd17 	ldw	r3,-12(fp)
 801a904:	d0a01f04 	addi	r2,gp,-32644
 801a908:	18bfcf1e 	bne	r3,r2,801a848 <_gp+0xffff5840>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801a90c:	0001883a 	nop
}
 801a910:	0001883a 	nop
 801a914:	e037883a 	mov	sp,fp
 801a918:	dfc00117 	ldw	ra,4(sp)
 801a91c:	df000017 	ldw	fp,0(sp)
 801a920:	dec00204 	addi	sp,sp,8
 801a924:	f800283a 	ret

0801a928 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 801a928:	deffff04 	addi	sp,sp,-4
 801a92c:	df000015 	stw	fp,0(sp)
 801a930:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801a934:	000170fa 	wrctl	ienable,zero
}
 801a938:	0001883a 	nop
 801a93c:	e037883a 	mov	sp,fp
 801a940:	df000017 	ldw	fp,0(sp)
 801a944:	dec00104 	addi	sp,sp,4
 801a948:	f800283a 	ret

0801a94c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801a94c:	defffe04 	addi	sp,sp,-8
 801a950:	df000115 	stw	fp,4(sp)
 801a954:	df000104 	addi	fp,sp,4
 801a958:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801a95c:	e0bfff17 	ldw	r2,-4(fp)
 801a960:	10bffe84 	addi	r2,r2,-6
 801a964:	10c00428 	cmpgeui	r3,r2,16
 801a968:	18001a1e 	bne	r3,zero,801a9d4 <alt_exception_cause_generated_bad_addr+0x88>
 801a96c:	100690ba 	slli	r3,r2,2
 801a970:	008200b4 	movhi	r2,2050
 801a974:	10aa6104 	addi	r2,r2,-22140
 801a978:	1885883a 	add	r2,r3,r2
 801a97c:	10800017 	ldw	r2,0(r2)
 801a980:	1000683a 	jmp	r2
 801a984:	0801a9c4 	addi	zero,at,1703
 801a988:	0801a9c4 	addi	zero,at,1703
 801a98c:	0801a9d4 	ori	zero,at,1703
 801a990:	0801a9d4 	ori	zero,at,1703
 801a994:	0801a9d4 	ori	zero,at,1703
 801a998:	0801a9c4 	addi	zero,at,1703
 801a99c:	0801a9cc 	andi	zero,at,1703
 801a9a0:	0801a9d4 	ori	zero,at,1703
 801a9a4:	0801a9c4 	addi	zero,at,1703
 801a9a8:	0801a9c4 	addi	zero,at,1703
 801a9ac:	0801a9d4 	ori	zero,at,1703
 801a9b0:	0801a9c4 	addi	zero,at,1703
 801a9b4:	0801a9cc 	andi	zero,at,1703
 801a9b8:	0801a9d4 	ori	zero,at,1703
 801a9bc:	0801a9d4 	ori	zero,at,1703
 801a9c0:	0801a9c4 	addi	zero,at,1703
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801a9c4:	00800044 	movi	r2,1
 801a9c8:	00000306 	br	801a9d8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801a9cc:	0005883a 	mov	r2,zero
 801a9d0:	00000106 	br	801a9d8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801a9d4:	0005883a 	mov	r2,zero
  }
}
 801a9d8:	e037883a 	mov	sp,fp
 801a9dc:	df000017 	ldw	fp,0(sp)
 801a9e0:	dec00104 	addi	sp,sp,4
 801a9e4:	f800283a 	ret

0801a9e8 <memcmp>:
 801a9e8:	01c000c4 	movi	r7,3
 801a9ec:	3980192e 	bgeu	r7,r6,801aa54 <memcmp+0x6c>
 801a9f0:	2144b03a 	or	r2,r4,r5
 801a9f4:	11c4703a 	and	r2,r2,r7
 801a9f8:	10000f26 	beq	r2,zero,801aa38 <memcmp+0x50>
 801a9fc:	20800003 	ldbu	r2,0(r4)
 801aa00:	28c00003 	ldbu	r3,0(r5)
 801aa04:	10c0151e 	bne	r2,r3,801aa5c <memcmp+0x74>
 801aa08:	31bfff84 	addi	r6,r6,-2
 801aa0c:	01ffffc4 	movi	r7,-1
 801aa10:	00000406 	br	801aa24 <memcmp+0x3c>
 801aa14:	20800003 	ldbu	r2,0(r4)
 801aa18:	28c00003 	ldbu	r3,0(r5)
 801aa1c:	31bfffc4 	addi	r6,r6,-1
 801aa20:	10c00e1e 	bne	r2,r3,801aa5c <memcmp+0x74>
 801aa24:	21000044 	addi	r4,r4,1
 801aa28:	29400044 	addi	r5,r5,1
 801aa2c:	31fff91e 	bne	r6,r7,801aa14 <_gp+0xffff5a0c>
 801aa30:	0005883a 	mov	r2,zero
 801aa34:	f800283a 	ret
 801aa38:	20c00017 	ldw	r3,0(r4)
 801aa3c:	28800017 	ldw	r2,0(r5)
 801aa40:	18bfee1e 	bne	r3,r2,801a9fc <_gp+0xffff59f4>
 801aa44:	31bfff04 	addi	r6,r6,-4
 801aa48:	21000104 	addi	r4,r4,4
 801aa4c:	29400104 	addi	r5,r5,4
 801aa50:	39bff936 	bltu	r7,r6,801aa38 <_gp+0xffff5a30>
 801aa54:	303fe91e 	bne	r6,zero,801a9fc <_gp+0xffff59f4>
 801aa58:	003ff506 	br	801aa30 <_gp+0xffff5a28>
 801aa5c:	10c5c83a 	sub	r2,r2,r3
 801aa60:	f800283a 	ret

0801aa64 <_putc_r>:
 801aa64:	defffc04 	addi	sp,sp,-16
 801aa68:	dc000215 	stw	r16,8(sp)
 801aa6c:	dfc00315 	stw	ra,12(sp)
 801aa70:	2021883a 	mov	r16,r4
 801aa74:	20000226 	beq	r4,zero,801aa80 <_putc_r+0x1c>
 801aa78:	20800e17 	ldw	r2,56(r4)
 801aa7c:	10001b26 	beq	r2,zero,801aaec <_putc_r+0x88>
 801aa80:	30800217 	ldw	r2,8(r6)
 801aa84:	10bfffc4 	addi	r2,r2,-1
 801aa88:	30800215 	stw	r2,8(r6)
 801aa8c:	10000a16 	blt	r2,zero,801aab8 <_putc_r+0x54>
 801aa90:	30800017 	ldw	r2,0(r6)
 801aa94:	11400005 	stb	r5,0(r2)
 801aa98:	30800017 	ldw	r2,0(r6)
 801aa9c:	10c00044 	addi	r3,r2,1
 801aaa0:	30c00015 	stw	r3,0(r6)
 801aaa4:	10800003 	ldbu	r2,0(r2)
 801aaa8:	dfc00317 	ldw	ra,12(sp)
 801aaac:	dc000217 	ldw	r16,8(sp)
 801aab0:	dec00404 	addi	sp,sp,16
 801aab4:	f800283a 	ret
 801aab8:	30c00617 	ldw	r3,24(r6)
 801aabc:	10c00616 	blt	r2,r3,801aad8 <_putc_r+0x74>
 801aac0:	30800017 	ldw	r2,0(r6)
 801aac4:	00c00284 	movi	r3,10
 801aac8:	11400005 	stb	r5,0(r2)
 801aacc:	30800017 	ldw	r2,0(r6)
 801aad0:	11400003 	ldbu	r5,0(r2)
 801aad4:	28fff11e 	bne	r5,r3,801aa9c <_gp+0xffff5a94>
 801aad8:	8009883a 	mov	r4,r16
 801aadc:	dfc00317 	ldw	ra,12(sp)
 801aae0:	dc000217 	ldw	r16,8(sp)
 801aae4:	dec00404 	addi	sp,sp,16
 801aae8:	801ac641 	jmpi	801ac64 <__swbuf_r>
 801aaec:	d9400015 	stw	r5,0(sp)
 801aaf0:	d9800115 	stw	r6,4(sp)
 801aaf4:	8010c4c0 	call	8010c4c <__sinit>
 801aaf8:	d9800117 	ldw	r6,4(sp)
 801aafc:	d9400017 	ldw	r5,0(sp)
 801ab00:	003fdf06 	br	801aa80 <_gp+0xffff5a78>

0801ab04 <putc>:
 801ab04:	008200b4 	movhi	r2,2050
 801ab08:	defffc04 	addi	sp,sp,-16
 801ab0c:	10b40304 	addi	r2,r2,-12276
 801ab10:	dc000115 	stw	r16,4(sp)
 801ab14:	14000017 	ldw	r16,0(r2)
 801ab18:	dc400215 	stw	r17,8(sp)
 801ab1c:	dfc00315 	stw	ra,12(sp)
 801ab20:	2023883a 	mov	r17,r4
 801ab24:	80000226 	beq	r16,zero,801ab30 <putc+0x2c>
 801ab28:	80800e17 	ldw	r2,56(r16)
 801ab2c:	10001a26 	beq	r2,zero,801ab98 <putc+0x94>
 801ab30:	28800217 	ldw	r2,8(r5)
 801ab34:	10bfffc4 	addi	r2,r2,-1
 801ab38:	28800215 	stw	r2,8(r5)
 801ab3c:	10000b16 	blt	r2,zero,801ab6c <putc+0x68>
 801ab40:	28800017 	ldw	r2,0(r5)
 801ab44:	14400005 	stb	r17,0(r2)
 801ab48:	28800017 	ldw	r2,0(r5)
 801ab4c:	10c00044 	addi	r3,r2,1
 801ab50:	28c00015 	stw	r3,0(r5)
 801ab54:	10800003 	ldbu	r2,0(r2)
 801ab58:	dfc00317 	ldw	ra,12(sp)
 801ab5c:	dc400217 	ldw	r17,8(sp)
 801ab60:	dc000117 	ldw	r16,4(sp)
 801ab64:	dec00404 	addi	sp,sp,16
 801ab68:	f800283a 	ret
 801ab6c:	28c00617 	ldw	r3,24(r5)
 801ab70:	10c00e16 	blt	r2,r3,801abac <putc+0xa8>
 801ab74:	28800017 	ldw	r2,0(r5)
 801ab78:	01000284 	movi	r4,10
 801ab7c:	14400005 	stb	r17,0(r2)
 801ab80:	28800017 	ldw	r2,0(r5)
 801ab84:	10c00003 	ldbu	r3,0(r2)
 801ab88:	193ff01e 	bne	r3,r4,801ab4c <_gp+0xffff5b44>
 801ab8c:	280d883a 	mov	r6,r5
 801ab90:	180b883a 	mov	r5,r3
 801ab94:	00000706 	br	801abb4 <putc+0xb0>
 801ab98:	8009883a 	mov	r4,r16
 801ab9c:	d9400015 	stw	r5,0(sp)
 801aba0:	8010c4c0 	call	8010c4c <__sinit>
 801aba4:	d9400017 	ldw	r5,0(sp)
 801aba8:	003fe106 	br	801ab30 <_gp+0xffff5b28>
 801abac:	280d883a 	mov	r6,r5
 801abb0:	880b883a 	mov	r5,r17
 801abb4:	8009883a 	mov	r4,r16
 801abb8:	dfc00317 	ldw	ra,12(sp)
 801abbc:	dc400217 	ldw	r17,8(sp)
 801abc0:	dc000117 	ldw	r16,4(sp)
 801abc4:	dec00404 	addi	sp,sp,16
 801abc8:	801ac641 	jmpi	801ac64 <__swbuf_r>

0801abcc <strlen>:
 801abcc:	208000cc 	andi	r2,r4,3
 801abd0:	10002026 	beq	r2,zero,801ac54 <strlen+0x88>
 801abd4:	20800007 	ldb	r2,0(r4)
 801abd8:	10002026 	beq	r2,zero,801ac5c <strlen+0x90>
 801abdc:	2005883a 	mov	r2,r4
 801abe0:	00000206 	br	801abec <strlen+0x20>
 801abe4:	10c00007 	ldb	r3,0(r2)
 801abe8:	18001826 	beq	r3,zero,801ac4c <strlen+0x80>
 801abec:	10800044 	addi	r2,r2,1
 801abf0:	10c000cc 	andi	r3,r2,3
 801abf4:	183ffb1e 	bne	r3,zero,801abe4 <_gp+0xffff5bdc>
 801abf8:	10c00017 	ldw	r3,0(r2)
 801abfc:	01ffbff4 	movhi	r7,65279
 801ac00:	39ffbfc4 	addi	r7,r7,-257
 801ac04:	00ca303a 	nor	r5,zero,r3
 801ac08:	01a02074 	movhi	r6,32897
 801ac0c:	19c7883a 	add	r3,r3,r7
 801ac10:	31a02004 	addi	r6,r6,-32640
 801ac14:	1946703a 	and	r3,r3,r5
 801ac18:	1986703a 	and	r3,r3,r6
 801ac1c:	1800091e 	bne	r3,zero,801ac44 <strlen+0x78>
 801ac20:	10800104 	addi	r2,r2,4
 801ac24:	10c00017 	ldw	r3,0(r2)
 801ac28:	19cb883a 	add	r5,r3,r7
 801ac2c:	00c6303a 	nor	r3,zero,r3
 801ac30:	28c6703a 	and	r3,r5,r3
 801ac34:	1986703a 	and	r3,r3,r6
 801ac38:	183ff926 	beq	r3,zero,801ac20 <_gp+0xffff5c18>
 801ac3c:	00000106 	br	801ac44 <strlen+0x78>
 801ac40:	10800044 	addi	r2,r2,1
 801ac44:	10c00007 	ldb	r3,0(r2)
 801ac48:	183ffd1e 	bne	r3,zero,801ac40 <_gp+0xffff5c38>
 801ac4c:	1105c83a 	sub	r2,r2,r4
 801ac50:	f800283a 	ret
 801ac54:	2005883a 	mov	r2,r4
 801ac58:	003fe706 	br	801abf8 <_gp+0xffff5bf0>
 801ac5c:	0005883a 	mov	r2,zero
 801ac60:	f800283a 	ret

0801ac64 <__swbuf_r>:
 801ac64:	defffb04 	addi	sp,sp,-20
 801ac68:	dcc00315 	stw	r19,12(sp)
 801ac6c:	dc800215 	stw	r18,8(sp)
 801ac70:	dc000015 	stw	r16,0(sp)
 801ac74:	dfc00415 	stw	ra,16(sp)
 801ac78:	dc400115 	stw	r17,4(sp)
 801ac7c:	2025883a 	mov	r18,r4
 801ac80:	2827883a 	mov	r19,r5
 801ac84:	3021883a 	mov	r16,r6
 801ac88:	20000226 	beq	r4,zero,801ac94 <__swbuf_r+0x30>
 801ac8c:	20800e17 	ldw	r2,56(r4)
 801ac90:	10004226 	beq	r2,zero,801ad9c <__swbuf_r+0x138>
 801ac94:	80800617 	ldw	r2,24(r16)
 801ac98:	8100030b 	ldhu	r4,12(r16)
 801ac9c:	80800215 	stw	r2,8(r16)
 801aca0:	2080020c 	andi	r2,r4,8
 801aca4:	10003626 	beq	r2,zero,801ad80 <__swbuf_r+0x11c>
 801aca8:	80c00417 	ldw	r3,16(r16)
 801acac:	18003426 	beq	r3,zero,801ad80 <__swbuf_r+0x11c>
 801acb0:	2088000c 	andi	r2,r4,8192
 801acb4:	9c403fcc 	andi	r17,r19,255
 801acb8:	10001a26 	beq	r2,zero,801ad24 <__swbuf_r+0xc0>
 801acbc:	80800017 	ldw	r2,0(r16)
 801acc0:	81000517 	ldw	r4,20(r16)
 801acc4:	10c7c83a 	sub	r3,r2,r3
 801acc8:	1900200e 	bge	r3,r4,801ad4c <__swbuf_r+0xe8>
 801accc:	18c00044 	addi	r3,r3,1
 801acd0:	81000217 	ldw	r4,8(r16)
 801acd4:	11400044 	addi	r5,r2,1
 801acd8:	81400015 	stw	r5,0(r16)
 801acdc:	213fffc4 	addi	r4,r4,-1
 801ace0:	81000215 	stw	r4,8(r16)
 801ace4:	14c00005 	stb	r19,0(r2)
 801ace8:	80800517 	ldw	r2,20(r16)
 801acec:	10c01e26 	beq	r2,r3,801ad68 <__swbuf_r+0x104>
 801acf0:	8080030b 	ldhu	r2,12(r16)
 801acf4:	1080004c 	andi	r2,r2,1
 801acf8:	10000226 	beq	r2,zero,801ad04 <__swbuf_r+0xa0>
 801acfc:	00800284 	movi	r2,10
 801ad00:	88801926 	beq	r17,r2,801ad68 <__swbuf_r+0x104>
 801ad04:	8805883a 	mov	r2,r17
 801ad08:	dfc00417 	ldw	ra,16(sp)
 801ad0c:	dcc00317 	ldw	r19,12(sp)
 801ad10:	dc800217 	ldw	r18,8(sp)
 801ad14:	dc400117 	ldw	r17,4(sp)
 801ad18:	dc000017 	ldw	r16,0(sp)
 801ad1c:	dec00504 	addi	sp,sp,20
 801ad20:	f800283a 	ret
 801ad24:	81401917 	ldw	r5,100(r16)
 801ad28:	00b7ffc4 	movi	r2,-8193
 801ad2c:	21080014 	ori	r4,r4,8192
 801ad30:	2884703a 	and	r2,r5,r2
 801ad34:	80801915 	stw	r2,100(r16)
 801ad38:	80800017 	ldw	r2,0(r16)
 801ad3c:	8100030d 	sth	r4,12(r16)
 801ad40:	81000517 	ldw	r4,20(r16)
 801ad44:	10c7c83a 	sub	r3,r2,r3
 801ad48:	193fe016 	blt	r3,r4,801accc <_gp+0xffff5cc4>
 801ad4c:	800b883a 	mov	r5,r16
 801ad50:	9009883a 	mov	r4,r18
 801ad54:	80108600 	call	8010860 <_fflush_r>
 801ad58:	1000071e 	bne	r2,zero,801ad78 <__swbuf_r+0x114>
 801ad5c:	80800017 	ldw	r2,0(r16)
 801ad60:	00c00044 	movi	r3,1
 801ad64:	003fda06 	br	801acd0 <_gp+0xffff5cc8>
 801ad68:	800b883a 	mov	r5,r16
 801ad6c:	9009883a 	mov	r4,r18
 801ad70:	80108600 	call	8010860 <_fflush_r>
 801ad74:	103fe326 	beq	r2,zero,801ad04 <_gp+0xffff5cfc>
 801ad78:	00bfffc4 	movi	r2,-1
 801ad7c:	003fe206 	br	801ad08 <_gp+0xffff5d00>
 801ad80:	800b883a 	mov	r5,r16
 801ad84:	9009883a 	mov	r4,r18
 801ad88:	801adbc0 	call	801adbc <__swsetup_r>
 801ad8c:	103ffa1e 	bne	r2,zero,801ad78 <_gp+0xffff5d70>
 801ad90:	8100030b 	ldhu	r4,12(r16)
 801ad94:	80c00417 	ldw	r3,16(r16)
 801ad98:	003fc506 	br	801acb0 <_gp+0xffff5ca8>
 801ad9c:	8010c4c0 	call	8010c4c <__sinit>
 801ada0:	003fbc06 	br	801ac94 <_gp+0xffff5c8c>

0801ada4 <__swbuf>:
 801ada4:	008200b4 	movhi	r2,2050
 801ada8:	10b40304 	addi	r2,r2,-12276
 801adac:	280d883a 	mov	r6,r5
 801adb0:	200b883a 	mov	r5,r4
 801adb4:	11000017 	ldw	r4,0(r2)
 801adb8:	801ac641 	jmpi	801ac64 <__swbuf_r>

0801adbc <__swsetup_r>:
 801adbc:	008200b4 	movhi	r2,2050
 801adc0:	defffd04 	addi	sp,sp,-12
 801adc4:	10b40304 	addi	r2,r2,-12276
 801adc8:	dc400115 	stw	r17,4(sp)
 801adcc:	2023883a 	mov	r17,r4
 801add0:	11000017 	ldw	r4,0(r2)
 801add4:	dc000015 	stw	r16,0(sp)
 801add8:	dfc00215 	stw	ra,8(sp)
 801addc:	2821883a 	mov	r16,r5
 801ade0:	20000226 	beq	r4,zero,801adec <__swsetup_r+0x30>
 801ade4:	20800e17 	ldw	r2,56(r4)
 801ade8:	10003126 	beq	r2,zero,801aeb0 <__swsetup_r+0xf4>
 801adec:	8080030b 	ldhu	r2,12(r16)
 801adf0:	10c0020c 	andi	r3,r2,8
 801adf4:	1009883a 	mov	r4,r2
 801adf8:	18000f26 	beq	r3,zero,801ae38 <__swsetup_r+0x7c>
 801adfc:	80c00417 	ldw	r3,16(r16)
 801ae00:	18001526 	beq	r3,zero,801ae58 <__swsetup_r+0x9c>
 801ae04:	1100004c 	andi	r4,r2,1
 801ae08:	20001c1e 	bne	r4,zero,801ae7c <__swsetup_r+0xc0>
 801ae0c:	1080008c 	andi	r2,r2,2
 801ae10:	1000291e 	bne	r2,zero,801aeb8 <__swsetup_r+0xfc>
 801ae14:	80800517 	ldw	r2,20(r16)
 801ae18:	80800215 	stw	r2,8(r16)
 801ae1c:	18001c26 	beq	r3,zero,801ae90 <__swsetup_r+0xd4>
 801ae20:	0005883a 	mov	r2,zero
 801ae24:	dfc00217 	ldw	ra,8(sp)
 801ae28:	dc400117 	ldw	r17,4(sp)
 801ae2c:	dc000017 	ldw	r16,0(sp)
 801ae30:	dec00304 	addi	sp,sp,12
 801ae34:	f800283a 	ret
 801ae38:	2080040c 	andi	r2,r4,16
 801ae3c:	10002e26 	beq	r2,zero,801aef8 <__swsetup_r+0x13c>
 801ae40:	2080010c 	andi	r2,r4,4
 801ae44:	10001e1e 	bne	r2,zero,801aec0 <__swsetup_r+0x104>
 801ae48:	80c00417 	ldw	r3,16(r16)
 801ae4c:	20800214 	ori	r2,r4,8
 801ae50:	8080030d 	sth	r2,12(r16)
 801ae54:	183feb1e 	bne	r3,zero,801ae04 <_gp+0xffff5dfc>
 801ae58:	1100a00c 	andi	r4,r2,640
 801ae5c:	01408004 	movi	r5,512
 801ae60:	217fe826 	beq	r4,r5,801ae04 <_gp+0xffff5dfc>
 801ae64:	800b883a 	mov	r5,r16
 801ae68:	8809883a 	mov	r4,r17
 801ae6c:	80118b80 	call	80118b8 <__smakebuf_r>
 801ae70:	8080030b 	ldhu	r2,12(r16)
 801ae74:	80c00417 	ldw	r3,16(r16)
 801ae78:	003fe206 	br	801ae04 <_gp+0xffff5dfc>
 801ae7c:	80800517 	ldw	r2,20(r16)
 801ae80:	80000215 	stw	zero,8(r16)
 801ae84:	0085c83a 	sub	r2,zero,r2
 801ae88:	80800615 	stw	r2,24(r16)
 801ae8c:	183fe41e 	bne	r3,zero,801ae20 <_gp+0xffff5e18>
 801ae90:	80c0030b 	ldhu	r3,12(r16)
 801ae94:	0005883a 	mov	r2,zero
 801ae98:	1900200c 	andi	r4,r3,128
 801ae9c:	203fe126 	beq	r4,zero,801ae24 <_gp+0xffff5e1c>
 801aea0:	18c01014 	ori	r3,r3,64
 801aea4:	80c0030d 	sth	r3,12(r16)
 801aea8:	00bfffc4 	movi	r2,-1
 801aeac:	003fdd06 	br	801ae24 <_gp+0xffff5e1c>
 801aeb0:	8010c4c0 	call	8010c4c <__sinit>
 801aeb4:	003fcd06 	br	801adec <_gp+0xffff5de4>
 801aeb8:	0005883a 	mov	r2,zero
 801aebc:	003fd606 	br	801ae18 <_gp+0xffff5e10>
 801aec0:	81400c17 	ldw	r5,48(r16)
 801aec4:	28000626 	beq	r5,zero,801aee0 <__swsetup_r+0x124>
 801aec8:	80801004 	addi	r2,r16,64
 801aecc:	28800326 	beq	r5,r2,801aedc <__swsetup_r+0x120>
 801aed0:	8809883a 	mov	r4,r17
 801aed4:	8010ecc0 	call	8010ecc <_free_r>
 801aed8:	8100030b 	ldhu	r4,12(r16)
 801aedc:	80000c15 	stw	zero,48(r16)
 801aee0:	80c00417 	ldw	r3,16(r16)
 801aee4:	00bff6c4 	movi	r2,-37
 801aee8:	1108703a 	and	r4,r2,r4
 801aeec:	80000115 	stw	zero,4(r16)
 801aef0:	80c00015 	stw	r3,0(r16)
 801aef4:	003fd506 	br	801ae4c <_gp+0xffff5e44>
 801aef8:	00800244 	movi	r2,9
 801aefc:	88800015 	stw	r2,0(r17)
 801af00:	20801014 	ori	r2,r4,64
 801af04:	8080030d 	sth	r2,12(r16)
 801af08:	00bfffc4 	movi	r2,-1
 801af0c:	003fc506 	br	801ae24 <_gp+0xffff5e1c>
